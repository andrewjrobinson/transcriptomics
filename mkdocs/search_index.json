{
    "docs": [
        {
            "location": "/", 
            "text": "LSCC Documentation\n\n\nContents\n\n\n\n\nTutorials", 
            "title": "Home"
        }, 
        {
            "location": "/#lscc-documentation", 
            "text": "", 
            "title": "LSCC Documentation"
        }, 
        {
            "location": "/#contents", 
            "text": "Tutorials", 
            "title": "Contents"
        }, 
        {
            "location": "/tutorials/", 
            "text": "Tutorials\n\n\nGeneral\n\n\n\n\nIntroduction to Unix workshop\n\n\nUsing Git and Github for revision control\n\n\nPython Overview\n\n\n\n\nScience\n\n\n\n\nNGS Overview\n\n\nVariant Detection Advanced\n\n\nRNA-Seq Experimental Design\n\n\nRNA Seq Differential Gene Expression - Basic", 
            "title": "Overview"
        }, 
        {
            "location": "/tutorials/#tutorials", 
            "text": "", 
            "title": "Tutorials"
        }, 
        {
            "location": "/tutorials/#general", 
            "text": "Introduction to Unix workshop  Using Git and Github for revision control  Python Overview", 
            "title": "General"
        }, 
        {
            "location": "/tutorials/#science", 
            "text": "NGS Overview  Variant Detection Advanced  RNA-Seq Experimental Design  RNA Seq Differential Gene Expression - Basic", 
            "title": "Science"
        }, 
        {
            "location": "/tutorials/ngs_overview/NGS_Overview/", 
            "text": "Next Generation Sequencing Overview\n\n\nSequencing technologies\n\n\n\n\nSequencing by hybridisation and ligation (Complete Genomics, Life Technologies, Polonator)\n\n\nEmulsion PCR amplification\n\n\nDetection: Cyclic ligation of nucleotide dimers. Multiple rounds required.\n\n\n\n\n\n\nSequencing by synthesis (Helicos, Illumina, Intelligent Bio-Sys)\n\n\nBridge PCR amplification on slides\n\n\nDetection: cyclic addition of reversible polymerisation terminators\n\n\n\n\n\n\nReal-time sequencing by synthesis (Pacific BioSciences, VisiGen)\n\n\nSingle molecule, no amplification\n\n\nCyclic removal of nucleotide and measure change in conductance of micropore\n\n\n\n\n\n\nPyrosequencing (Roche/454\u2122).\n\n\nEmulsion PCR amplification\n\n\nDetection: cyclic addition of single nucleotide species and detection of number of pyrophosphates released during polymerisation (through ATP to luciferase reaction)\n\n\n\n\n\n\n\n\nApplications\n\n\nGenomic\n\n\n\n\nWhole genome resequencing\n for \nvariation detection\n\n\nWhole genome sequencing for de novo assembly\n\n\nMetagenomics (sequencing of multiple genomes together in a 'metasample')\n\n\nTargetted resequencing\n for variation detection\n\n\nExome sequencing\n/targetted exome capture\n\n\nArbitrary PCR enrichment of target\n\n\n\n\n\n\n\n\nEpigenomic\n\n\n\n\nCHiP-Seq\n through sequencing of DNA enriched by immunoprecipitation\n\n\nDNA methylation analysis\n\n\nSequencing of DNA enriched through immunoprecipitation of 5-methylcytosine ()\n\n\nMethylation-sensitive restriction enzyme fragment enrichment\n\n\n\n\nTranscriptomic (RNA-seq)\n\n\n\n\nWhole transcriptome \nexpression profiling\n (comparative gene expression)\n\n\nWhole transcriptome sequencing for de novo assembly (identify genes)\n\n\nStrand-specific mRNA-seq\n\n\nPaired-end RNA-seq\n\n\nWhole transcriptome variation detection\n\n\nDifferential splicing detection\n\n\nsRNA analysis\n\n\n\n\nTypes of outcome\n\n\nVariation Detection\n\n\n\n\nCopy number variation (CNV)\n\n\nSingle Nucleotide Polymorphisms (SNPs)\n\n\nInsertions and deletions (Indels)\n\n\nRearrangements\n\n\n\n\nDe Novo assembly\n\n\nConcatemers (length?)\n\n\nComparative gene expression\n\n\nMatrix of gene vs expression level\n\n\nSplicing detection\n\n\nList of alternative splice isoforms\n\n\nResequencing alignment strategies\n\n\n\n\nAlign to transcriptome (simplest)\n\n\nAlign to genome and exon-exon junction sequences (discover new transcripts, splice variants)\n\n\nDe novo (most complex)\n\n\n\n\nCategories of analysis\n\n\nNGS informatics may be categorised into:\n\n\n1. Primary analysis:\n\n\nConversion of imagesets (output from NGS machines) into strings of bases - 'base calling'.\n\n\nInputs:\n\n\n\n\nImage files from NGS machine\n\n\n\n\nOutputs:\n\n\n\n\nShort reads\n\n\n\n\nSoftware:\n\n\n\n\nFirecrest and Bustard (for Illumina) \n\n\n\n\n2. Secondary analysis:\n\n\nAssembly of short strings of bases (output of primary analysis) into\ncontigs, and/or -Li Jason 11/18/09 2:43 PM alignment onto a reference\ngenome and extraction of the first level of genomic meaning (SNP,\nrearrangements)\n\n\nInputs:\n\n\n\n\nShort reads (20-30million/run?)\n\n\n\n\nOutputs:\n\n\n\n\nAligned sequences against a reference genome\n\n\nSNP analysis\n\n\nCopy number variation data\n\n\nQuantified expression data\n\n\n\n\nSoftware:\n\n\n\n\nE.g. Eland, BWA, MAQ for alignment. Velvet, ABySS for de-novo\nassembly. \n\n\n\n\nReferences:\n\n\nhttp://www.illumina.com/Documents/products/technotes/technote_denovo_assembly.pdf\n\n\n3. Tertiary analysis\n\n\nExtraction of biological information from the aligned sequences.\nAnnotation of sequence data.\n\n\nInputs:\n\n\n\n\nE.g. Aligned sequences, SNP analysis\u00a0\n\n\n\n\nOutputs:\n\n\n\n\nBiological and statistical interpretations and visualisations\n\n\n\n\nAt each stage there are multiple options for processing - vendor\nsoftware, open source software, each with varying levels of accuracy and\ncomputational expense. There are also large amounts of data produced at\neach stage. Additionally, primary and secondary analysis are dependent\non the NGS platform being supported - Illumina Solexa pipeline is\ndifferent to an Applied Biosystems SOLiD pipeline.\n\n\nAnecdotally, 80% of processing in a NGS project is manual and occurs\nmainly in tertiary analysis.\n\n\nSample preparation\n\n\nFragment\n\n\nEach read is independent - an arbitrary fragment of DNA with no\nmeta-information about the relationship of that read to any other read\n\n\nPaired-end sequencing\n\n\nEach fragment is sequenced twice, once from each end, in succession.\nProbably the reads will not overlap, as the average length of a fragment\nis normally \n2x that of a read.\n\n\nThe two reads are thus 'related' and have extra information about the\nstructure of the sample. The information is that the two reads from the\nsingle fragment are 'close' - depending on the length of fragments that\nwere prepared for the run.\n\n\nhttp://www.illumina.com/technology/paired_end_sequencing_assay.ilmn\n\n\nMate-pair\n\n\nSimilar to paired-end, but ends of sequenced fragment can be much\nfurther apart - up to 10kb (normally 2-5kb)\n\n\nhttp://www.illumina.com/technology/mate_pair_sequencing_assay.ilmn\n\n\nBarcoded fragments\n\n\nMultiple samples are prepared independently. Each sample is 'labelled'\nwith a unique sequence adaptor (barcode). Samples are then mixed and\nsequenced together. Individual reads can be categorised to a particular\nsample by their barcodes.\n\n\nEnrichment for target sequences\n\n\n\n\nPCR\n\n\nHybridisation to oligo arrays\n\n\nPolyA selection (mRNA-seq)\n\n\nSize selection\n\n\nPrecipitation\n\n\n\n\n\n\nPotential services in NGS\n\n\nCourtesy \nColorado State Uni\n\n\nSequence Matching Analysis\n\n\n\n\n\n\nAlign SOLiD colorspace reads with reference genomes\n\n\n\n\n\n\nGenerate consensus sequences\n\n\n\n\n\n\nMate-Pair Analysis\n\n\n\n\n\n\nAnalyze paired reads from SOLiD mate-pair runs\n\n\n\n\n\n\nImprove accuracy of read matches to detect structural variations\n    \n between sample and reference genomes\n\n\n\n\n\n\nSNP / Indel Analysis\n\n\n\n\n\n\nIdentify single nucleotide polymorphisms\n\n\n\n\n\n\nIdentify insertion and deletion mutations in DNA sequences\n\n\n\n\n\n\nCopy Number Variation Analysis\n\n\n\n\nDetect copy number variations in DNA sequences\n\n\n\n\nWhole Transcriptome Analysis\n\n\n\n\n\n\nMap SOLiD reads from a transcript sample to reference genomes\n\n\n\n\n\n\nAssign tag counts to features of the reference genome\n\n\n\n\n\n\nIdentify novel transcripts\n\n\n\n\n\n\nInversion Analysis\n\n\n\n\nIdentify paracentric and pericentric chromosomal inversions\n\n\n\n\nde Novo\n Assembly\n\n\n\n\n\n\nCreate \nde novo\n assemblies from SOLiD colorspace reads\n\n\n\n\n\n\nCharacterize genomic sequences for which no closely related reference genome exists\n\n\n\n\n\n\nAssemble SOLiD reads from microbial genomes into nucleotide sequence contigs of several thousand bases, and scaffolds of tens of thousands of bases.\n\n\n\n\n\n\nAssemble SOLiD reads from microbial genomes into scaffolds of tens of thousands of bases\n\n\n\n\n\n\nsmRNA Analysis\n\n\n\n\n\n\nWhole genome analysis of SOLiD RNA library reads\n\n\n\n\n\n\nIncludes filtering, matching against miRBase sequences, and matching against reference genomes\n\n\n\n\n\n\nNextGENe Analysis\n\n\n\n\n\n\nNextGENe is a comprehensive NGS bioinformatics package\n\n\n\n\n\n\nNextGENe includes de novo assembly, target assembly, SNP/Indel discovery, digital gene expression analysis, whole transcriptome analysis, ChiPSeq analysis, miRNA discovery and quantification, and a condensation assembly tool for reducing instrument error\n\n\n\n\n\n\nSystem Alignment Browser (SAB)\n\n\n\n\n\n\nSAB is a graphical genome annotation viewer\n\n\n\n\n\n\nUsed for viewing basespace and colorspace reads aligned to reference genomes\n\n\n\n\n\n\nGFF Conversion\n\n\n\n\n\n\nConvert SOLiD system mapping files into GFF-format files\n\n\n\n\n\n\nGFF is a standardized file format for describing DNA, RNA, and proteins\n\n\n\n\n\n\nSRF Conversion\n\n\n\n\n\n\nConvert SOLiD system reads into SRF format\n\n\n\n\n\n\nSRF is a standardized file format for describing DNA sequence data\n\n\n\n\n\n\nAppendix\n\n\nPaired end sequencing - empirical observations\n\n\npaired end\n or \nmate pair\n refers to how the library is made, and\nthen how it is sequenced. Both are methodologies that, in addition to\nthe sequence information, give you information about the physical\ndistance between the two reads in your genome. For example, you shear up\nsome genomic DNA, and cut a region out at ~500bp. Then you prepare your\nlibrary, and sequence 35bp from each end of each molecule. Now you have\nthree pieces of information:\n\n\n\n\nthe tag 1 sequence\n\n\nthe tag 2 sequence*\n\n\nthat they were 500bp \u00b1 (some) apart in your genome\n\n\n\n\nWhen we do 2x 50 bp paired-end runs on a GAIIx using the current gel\npurification step we get read distances of between that vary by about\n100 bp in a nice tight bell shaped curve starting between 160-200 bp. So\nthe first thing to bear in mind is that L is not fixed within or between\nruns. Either way this group accounts for \n99.99% of paired-end reads in\nan assembly. Because of the way fragments are generated for sequencing 1\nand 2 can align either F-B of B-F.\n\n\nIf you want to be more realistic there are always a tiny proportion of\nreads \n0.1% that align with much longer read distances, some of which\nis due to bioinformatics but some of which is real and simply reflects\nbiology. Likewise a tiny proportion of reads at all read distances will\nbe F-F or B-B. Also there appear to often be a tiny proportion of reads\nthat come out overlapping where the read distance is the same as a read\nlength ie 1+L+2 is, in this case, \\~50-100. I have no idea of the\nprevelance of such reads but you can often find them if you look. Lastly\nif its not going to be part of the assembler, end trimming and quality\ntrimming can often mean that 1 and 2 are different lengths and that a\nsubstantial number of reads from a paired end run end up with no partner\nat all.\n\n\nMate-pair sequencing\n\n\nIllumina refers to \"paired end\" as the original library preparation\nmethod they use, where you sequence each end of the same molecule.\nBecause of the way the cluster generation technology works, it is\nlimited to an inter-pair distance of ~300bp ( 200-600bp).\n\n\nIllumina refers to \nmate pairs\n as sequences derived from their newer\nlibrary prep method which is designed to provide paired sequences\nseparated by a greater distance (between about 2 and 10kb). This method\nstill actually only sequences the ends of ~400bp molecules, but this\ntemplate is derived from both ends of a 2-10kb fragment that has had the\nmiddle section cut out and the 'internal' ends ligated in the middle.\nBasically, you take your 2-10kb random fragments, biotinylate the end,\ncircularise them, shear the circles to ~400bp, capture biotinylated\nmolecules, and then sequence those (they go into what is essentially a\nstandard 'paired end' sample prep procedure).\n\n\nSource: \nhttp://seqanswers.com/forums/showthread.php?t=503", 
            "title": "NGS Overview"
        }, 
        {
            "location": "/tutorials/ngs_overview/NGS_Overview/#next-generation-sequencing-overview", 
            "text": "", 
            "title": "Next Generation Sequencing Overview"
        }, 
        {
            "location": "/tutorials/ngs_overview/NGS_Overview/#sequencing-technologies", 
            "text": "Sequencing by hybridisation and ligation (Complete Genomics, Life Technologies, Polonator)  Emulsion PCR amplification  Detection: Cyclic ligation of nucleotide dimers. Multiple rounds required.    Sequencing by synthesis (Helicos, Illumina, Intelligent Bio-Sys)  Bridge PCR amplification on slides  Detection: cyclic addition of reversible polymerisation terminators    Real-time sequencing by synthesis (Pacific BioSciences, VisiGen)  Single molecule, no amplification  Cyclic removal of nucleotide and measure change in conductance of micropore    Pyrosequencing (Roche/454\u2122).  Emulsion PCR amplification  Detection: cyclic addition of single nucleotide species and detection of number of pyrophosphates released during polymerisation (through ATP to luciferase reaction)", 
            "title": "Sequencing technologies"
        }, 
        {
            "location": "/tutorials/ngs_overview/NGS_Overview/#applications", 
            "text": "Genomic   Whole genome resequencing  for  variation detection  Whole genome sequencing for de novo assembly  Metagenomics (sequencing of multiple genomes together in a 'metasample')  Targetted resequencing  for variation detection  Exome sequencing /targetted exome capture  Arbitrary PCR enrichment of target     Epigenomic   CHiP-Seq  through sequencing of DNA enriched by immunoprecipitation  DNA methylation analysis  Sequencing of DNA enriched through immunoprecipitation of 5-methylcytosine ()  Methylation-sensitive restriction enzyme fragment enrichment   Transcriptomic (RNA-seq)   Whole transcriptome  expression profiling  (comparative gene expression)  Whole transcriptome sequencing for de novo assembly (identify genes)  Strand-specific mRNA-seq  Paired-end RNA-seq  Whole transcriptome variation detection  Differential splicing detection  sRNA analysis   Types of outcome  Variation Detection   Copy number variation (CNV)  Single Nucleotide Polymorphisms (SNPs)  Insertions and deletions (Indels)  Rearrangements   De Novo assembly  Concatemers (length?)  Comparative gene expression  Matrix of gene vs expression level  Splicing detection  List of alternative splice isoforms  Resequencing alignment strategies   Align to transcriptome (simplest)  Align to genome and exon-exon junction sequences (discover new transcripts, splice variants)  De novo (most complex)", 
            "title": "Applications"
        }, 
        {
            "location": "/tutorials/ngs_overview/NGS_Overview/#categories-of-analysis", 
            "text": "NGS informatics may be categorised into:  1. Primary analysis:  Conversion of imagesets (output from NGS machines) into strings of bases - 'base calling'.  Inputs:   Image files from NGS machine   Outputs:   Short reads   Software:   Firecrest and Bustard (for Illumina)    2. Secondary analysis:  Assembly of short strings of bases (output of primary analysis) into\ncontigs, and/or -Li Jason 11/18/09 2:43 PM alignment onto a reference\ngenome and extraction of the first level of genomic meaning (SNP,\nrearrangements)  Inputs:   Short reads (20-30million/run?)   Outputs:   Aligned sequences against a reference genome  SNP analysis  Copy number variation data  Quantified expression data   Software:   E.g. Eland, BWA, MAQ for alignment. Velvet, ABySS for de-novo\nassembly.    References:  http://www.illumina.com/Documents/products/technotes/technote_denovo_assembly.pdf  3. Tertiary analysis  Extraction of biological information from the aligned sequences.\nAnnotation of sequence data.  Inputs:   E.g. Aligned sequences, SNP analysis\u00a0   Outputs:   Biological and statistical interpretations and visualisations   At each stage there are multiple options for processing - vendor\nsoftware, open source software, each with varying levels of accuracy and\ncomputational expense. There are also large amounts of data produced at\neach stage. Additionally, primary and secondary analysis are dependent\non the NGS platform being supported - Illumina Solexa pipeline is\ndifferent to an Applied Biosystems SOLiD pipeline.  Anecdotally, 80% of processing in a NGS project is manual and occurs\nmainly in tertiary analysis.", 
            "title": "Categories of analysis"
        }, 
        {
            "location": "/tutorials/ngs_overview/NGS_Overview/#sample-preparation", 
            "text": "Fragment  Each read is independent - an arbitrary fragment of DNA with no\nmeta-information about the relationship of that read to any other read  Paired-end sequencing  Each fragment is sequenced twice, once from each end, in succession.\nProbably the reads will not overlap, as the average length of a fragment\nis normally  2x that of a read.  The two reads are thus 'related' and have extra information about the\nstructure of the sample. The information is that the two reads from the\nsingle fragment are 'close' - depending on the length of fragments that\nwere prepared for the run.  http://www.illumina.com/technology/paired_end_sequencing_assay.ilmn  Mate-pair  Similar to paired-end, but ends of sequenced fragment can be much\nfurther apart - up to 10kb (normally 2-5kb)  http://www.illumina.com/technology/mate_pair_sequencing_assay.ilmn  Barcoded fragments  Multiple samples are prepared independently. Each sample is 'labelled'\nwith a unique sequence adaptor (barcode). Samples are then mixed and\nsequenced together. Individual reads can be categorised to a particular\nsample by their barcodes.  Enrichment for target sequences   PCR  Hybridisation to oligo arrays  PolyA selection (mRNA-seq)  Size selection  Precipitation", 
            "title": "Sample preparation"
        }, 
        {
            "location": "/tutorials/ngs_overview/NGS_Overview/#potential-services-in-ngs", 
            "text": "Courtesy  Colorado State Uni  Sequence Matching Analysis    Align SOLiD colorspace reads with reference genomes    Generate consensus sequences    Mate-Pair Analysis    Analyze paired reads from SOLiD mate-pair runs    Improve accuracy of read matches to detect structural variations\n      between sample and reference genomes    SNP / Indel Analysis    Identify single nucleotide polymorphisms    Identify insertion and deletion mutations in DNA sequences    Copy Number Variation Analysis   Detect copy number variations in DNA sequences   Whole Transcriptome Analysis    Map SOLiD reads from a transcript sample to reference genomes    Assign tag counts to features of the reference genome    Identify novel transcripts    Inversion Analysis   Identify paracentric and pericentric chromosomal inversions   de Novo  Assembly    Create  de novo  assemblies from SOLiD colorspace reads    Characterize genomic sequences for which no closely related reference genome exists    Assemble SOLiD reads from microbial genomes into nucleotide sequence contigs of several thousand bases, and scaffolds of tens of thousands of bases.    Assemble SOLiD reads from microbial genomes into scaffolds of tens of thousands of bases    smRNA Analysis    Whole genome analysis of SOLiD RNA library reads    Includes filtering, matching against miRBase sequences, and matching against reference genomes    NextGENe Analysis    NextGENe is a comprehensive NGS bioinformatics package    NextGENe includes de novo assembly, target assembly, SNP/Indel discovery, digital gene expression analysis, whole transcriptome analysis, ChiPSeq analysis, miRNA discovery and quantification, and a condensation assembly tool for reducing instrument error    System Alignment Browser (SAB)    SAB is a graphical genome annotation viewer    Used for viewing basespace and colorspace reads aligned to reference genomes    GFF Conversion    Convert SOLiD system mapping files into GFF-format files    GFF is a standardized file format for describing DNA, RNA, and proteins    SRF Conversion    Convert SOLiD system reads into SRF format    SRF is a standardized file format for describing DNA sequence data", 
            "title": "Potential services in NGS"
        }, 
        {
            "location": "/tutorials/ngs_overview/NGS_Overview/#appendix", 
            "text": "Paired end sequencing - empirical observations  paired end  or  mate pair  refers to how the library is made, and\nthen how it is sequenced. Both are methodologies that, in addition to\nthe sequence information, give you information about the physical\ndistance between the two reads in your genome. For example, you shear up\nsome genomic DNA, and cut a region out at ~500bp. Then you prepare your\nlibrary, and sequence 35bp from each end of each molecule. Now you have\nthree pieces of information:   the tag 1 sequence  the tag 2 sequence*  that they were 500bp \u00b1 (some) apart in your genome   When we do 2x 50 bp paired-end runs on a GAIIx using the current gel\npurification step we get read distances of between that vary by about\n100 bp in a nice tight bell shaped curve starting between 160-200 bp. So\nthe first thing to bear in mind is that L is not fixed within or between\nruns. Either way this group accounts for  99.99% of paired-end reads in\nan assembly. Because of the way fragments are generated for sequencing 1\nand 2 can align either F-B of B-F.  If you want to be more realistic there are always a tiny proportion of\nreads  0.1% that align with much longer read distances, some of which\nis due to bioinformatics but some of which is real and simply reflects\nbiology. Likewise a tiny proportion of reads at all read distances will\nbe F-F or B-B. Also there appear to often be a tiny proportion of reads\nthat come out overlapping where the read distance is the same as a read\nlength ie 1+L+2 is, in this case, \\~50-100. I have no idea of the\nprevelance of such reads but you can often find them if you look. Lastly\nif its not going to be part of the assembler, end trimming and quality\ntrimming can often mean that 1 and 2 are different lengths and that a\nsubstantial number of reads from a paired end run end up with no partner\nat all.  Mate-pair sequencing  Illumina refers to \"paired end\" as the original library preparation\nmethod they use, where you sequence each end of the same molecule.\nBecause of the way the cluster generation technology works, it is\nlimited to an inter-pair distance of ~300bp ( 200-600bp).  Illumina refers to  mate pairs  as sequences derived from their newer\nlibrary prep method which is designed to provide paired sequences\nseparated by a greater distance (between about 2 and 10kb). This method\nstill actually only sequences the ends of ~400bp molecules, but this\ntemplate is derived from both ends of a 2-10kb fragment that has had the\nmiddle section cut out and the 'internal' ends ligated in the middle.\nBasically, you take your 2-10kb random fragments, biotinylate the end,\ncircularise them, shear the circles to ~400bp, capture biotinylated\nmolecules, and then sequence those (they go into what is essentially a\nstandard 'paired end' sample prep procedure).  Source:  http://seqanswers.com/forums/showthread.php?t=503", 
            "title": "Appendix"
        }, 
        {
            "location": "/tutorials/using_git/Using_Git/", 
            "text": "Using Git and Github for revision control\n\n\nWhat is Git?\n\n\nGit is a revision control system. It is designed to help you keep track\nof collections of files which stem from a common source and undergo\nmodifications over time. The files tend to be human generated text. It\nis very good at managing source code repositories, but it can also be\nused to manage other things, such as configuration files and text\ndocuments. It is not, however, a file backup system.\n\n\nGit encourages a distributed style of project development. Each\ncontributor to a project has their own complete repository. Changes are\nshared between repositories by \npushing\n changes to, or \npulling\n\nchanges from other repositories. Collaboration between developers is\ngreatly enhanced by websites such as \ngithub\n,\n\nbitbucket\n\nand \ngitorious\n which\nprovide convenient interfaces to managing multiple repositories.\n\n\nThere are many alternatives to git which each have their pros and cons.\nTwo of the more popular alternatives are:\n\n\n\n\n\n\nSubversion\n is particularly suited to a centralised model of development.\n\n\n\n\n\n\nMercurial\n is very similar to Git, but is sometimes considered more user friendly.\n\n\n\n\n\n\nGetting help\n\n\nThere are lots of resources on the web for learning how to use Git. A\npopular reference is \nPro Git\n, which is freely available online\n(\nhttp://git-scm.com/book\n). Another good\nreference is the book \nVersion Control with Git\n, by Loeliger and\nMcCullough.\n\n\nA simple workflow\n\n\nStep 1, create a github account.\n\n\nCreate a github account (\nhttps://github.com/\n).\nDo this step once only (unless you need multiple accounts).\n\n\nYou get unlimited numbers of (world readable) public repositories for\nfree.\n\n\nPrivate repositories (that can be shared with selected users) cost money\n(see \nhttps://github.com/plans\n), but \ndiscounts are available for academics\n.\n\n\nStep 2, sign into github and create a repository.\n\n\nSign in to your github account and create a new repository. Do this once\nfor every new project you have.\n\n\n\n\nYou will need to provide some information:\n\n\n\n\n\n\nthe repository name\n\n\n\n\n\n\na description of the repository\n\n\n\n\n\n\nchoose whether it is public (free) or private (costs money)\n\n\n\n\n\n\nwhether to initialise with a dummy README file (it is useful)\n\n\n\n\n\n\nwhether to provide an initial .gitignore file (probably leave this\n    \n out in the beginning)\n\n\n\n\n\n\n\n\nStep 3, clone your repository to your local computer.\n\n\nClone your new repository from github to your local computer.\n\n\nEach repository on github is identified by a URL, which will look like\nthe one below:\n\n\n\n\nRun the command below on your development machine in the directory where\nyou want to keep the repository (of course you should use the actual URL\nof your own repository, not the one in the example).\n\n\n$ git clone https://github.com/bjpop/test.git\nCloning into 'test'...\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.\n\n\n\n\nThis will create a directory with the same name as your repository (in this example it is called \ntest\n).\n\n\nIf you change into that directory and list its contents you will see a\n\n.git\n subdirectory, which is where Git keeps all the data for your\nrepository. You will also see working copies of the files in the\nproject. In this example the only such file is \nREADME.md\n which was\ncreated automatically by github when the repository was first created.\n(The .md extension on the file suggests that it uses the \nMarkdown\n\nsyntax, see \nhttps://help.github.com/articles/github-flavored-markdown\n).\n\n\n$ cd test\n$ ls -a\n. .. .git README.md\n$ ls .git\nbranches config description HEAD hooks index info logs objects packed-refs refs\n\n\n\n\nStep 4, commit a file to the repository.\n\n\nCreate a new file in the repository on your local computer and commit it\nto your local repository.\n\n\nHow you create the file is immaterial. You could copy it from somewhere\nelse, create it in a text editor. In this case we\u2019ll make a little\npython program:\n\n\n$ echo 'print(\nhello world\n)' \n hello.py\n\n\n\n\nTest that your new file is satisfactory, in this case we test our code:\n\n\n$ python hello.py\nhello world\n\n\n\n\nCheck the status of your repository:\n\n\n$ git status\n# On branch master\n# Untracked files:\n# (use \ngit add \nfile\n...\n to include in what will be committed)\n#\n# hello.py\nnothing added to commit but untracked files present (use \ngit add\n to track)\n\n\n\n\nNotice that git tells you that the new file \nhello.py\n is not tracked\n(not in the repository).\n\n\nWhen you are happy with your file, you can stage it (this is not a\ncommit), but it will cause the file to be tracked:\n\n\n$ git add hello.py\n\n\n\n\nNote that git uses a two-stage process for committing changes. The first\nstage is to \"stage\" your changes. Staged changes appear in the\nrepository index, but are not committed. You can stage many changes\ntogether, and even amend or undo previously staged (but not committed)\nchanges. The second stage is to commit the current staged changes to the\nrepository. Committing causes the changes to be reflected in the state\nof the repository.\n\n\nRe-check the status of your repository:\n\n\n$ git status\n# On branch master\n# Changes to be committed:\n# (use \ngit reset HEAD \nfile\n...\n to unstage)\n#\n# new file: hello.py\n#\n\n\n\n\nNow we can see that the changes to \nhello.py\n have been staged and are\nready to be committed. Notice that \nhello.py\n is no longer untracked.\n\n\nCommit your changes with a commit message:\n\n\n$ git commit -m \nA little greeting program\n\n[master b1cce11] A little greeting program\n1 files changed, 1 insertions(+), 0 deletions(-)\ncreate mode 100644 hello.py\n\n\n\n\nRe-check the status of your repository:\n\n\n$ git status\n# On branch master\n# Your branch is ahead of 'origin/master' by 1 commit.\n#\nnothing to commit (working directory clean)\n\n\n\n\nNow we see that there a no uncommitted changes in the repository,\nhowever git tells us that our local repository is one commit ahead of\nthe github version (which it calls \norigin/master\n).\n\n\nStep 5, push your changes to github.\n\n\nPush the commit in your local repository to github (thus synchronising them).\n\n\n$ git push origin\nUsername for 'https://github.com': \ntype your github username\n\nPassword for 'https://\nyour github username\n@github.com': \nCounting objects: 4, done.\nDelta compression using up to 16 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 305 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/bjpop/test.git\n71a771a..b1cce11 master -\n master\n\n\n\n\nNow if you look at your repository on github you should see the file\n\nhello.py\n has been uploaded, along with its commit time and commit\nmessage.\n\n\n\n\nYou can inspect the contents of the file on github by clicking on its\nname:\n\n\n\n\nStep 6, create a branch in your local repository.\n\n\nYou can ask git to tell you about the names of the current branches:\n\n\n$ git branch\n* master\n\n\n\n\nBy default your repository starts with a branch called master. The\nasterisk next to the branch name tells you which is the current branch\n(at the moment there is only one branch).\n\n\n$ git branch documentation\n$ git branch\ndocumentation\n* master\n\n\n\n\nThe first command above creates a new branch called \ndocumentation\n. The\nsecond command shows us that the new branch has been created, but the\ncurrent branch is still \nmaster\n.\n\n\nTo switch to another branch you must check it out:\n\n\n$ git checkout documentation\nSwitched to branch 'documentation'\n$ git branch\n* documentation\nmaster\n\n\n\n\nLet\u2019s add a change to our existing \nhello.py\n file:\n\n\n$ echo '#this is a comment' \n hello.py\n\n\n\n\nCheck the status of the repository (now in the documentation branch):\n\n\n$ git status\n# On branch documentation\n# Changes not staged for commit:\n# (use \ngit add \nfile\n...\n to update what will be committed)\n# (use \ngit checkout -- \nfile\n...\n to discard changes in working\n directory)\n#\n# modified: hello.py\n#\nno changes added to commit (use \ngit add\n and/or \ngit commit -a\n)\n\n\n\n\nStage the new changes and commit them, and check the status again:\n\n\n$ git add hello.py \n$ git commit -m \nAdded a comment\n\n[documentation 9bbe430] Added a comment\n1 files changed, 1 insertions(+), 0 deletions(-)\n$ git status\n# On branch documentation\nnothing to commit (working directory clean)\n\n\n\n\nNow we can push the new \u201cdocumentation\u201d branch to github:\n\n\n$ git push origin documentation\nUsername for 'https://github.com': \nyour github username\n\nPassword for 'https://\nyour github username\n@github.com': \nCounting objects: 5, done.\nDelta compression using up to 16 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 314 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/bjpop/test.git\n* [new branch] documentation -\n documentation\n\n\n\n\nOn github you should be able to see the new branch:\n\n\n\n\nStep 7, merge the changes back into the master\n\n\nbranch.\n\n\nTo go back to the master branch you must check it out:\n\n\n$ git checkout master\nSwitched to branch 'master'\n\n\n\n\nYou can confirm that the master branch does not yet have the changes\nmade in the documentation branch:\n\n\n$ cat hello.py \nprint(\nhello world\n)\n\n\n\n\nNotice that the comment is missing.\n\n\nYou can pull the changes in the documentation branch back into the\nmaster branch with the merge command:\n\n\n$ git merge documentation\nUpdating b1cce11..9bbe430\nFast-forward\nhello.py | 1 +\n1 files changed, 1 insertions(+), 0 deletions(-)\n\n\n\n\nIn this case the merge was easy because there were no conflicts between\nmaster and documentation. In this case git automatically updates the\ntracked files in the current branch.\n\n\nWe can test that the changes have taken place by looking at the contents\nof hello.py:\n\n\n$ cat hello.py \nprint(\nhello world\n)\n#this is a comment\n\n\n\n\nCheck the status of the master branch:\n\n\n$ git status\n# On branch master\n# Your branch is ahead of 'origin/master' by 1 commit.\n#\nnothing to commit (working directory clean)\n\n\n\n\nPush the changes in the master branch back to github:\n\n\n$ git push origin master\nUsername for 'https://github.com': bjpop\nPassword for 'https://bjpop@github.com': \nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/bjpop/test.git\nb1cce11..9bbe430 master -\n master\n\n\n\n\nAgain you can verify on github that the changes have taken place.\n\n\nTo get an idea of the history of a project you can ask for a log of the\ncommit messages:\n\n\n$ git log\ncommit 9bbe430f6e8b70187927b4a70a8402f71b17b426\nAuthor: Bernie \nflorbitous@gmail.com\n\nDate: Fri Mar 15 12:30:39 2013 +1100\nAdded a comment\ncommit b1cce115fb40a9b11917db7eb73c8295e276bb09\nAuthor: Bernie \nflorbitous@gmail.com\n\nDate: Fri Mar 15 12:08:01 2013 +1100\nA little greeting program\ncommit 71a771a86b8116c3f93c99db5416bfa371a6f772\nAuthor: Bernie Pope \nflorbitous@gmail.com\n\nDate: Thu Mar 14 17:29:02 2013 -0700", 
            "title": "Using Git and Github for revision control"
        }, 
        {
            "location": "/tutorials/using_git/Using_Git/#using-git-and-github-for-revision-control", 
            "text": "", 
            "title": "Using Git and Github for revision control"
        }, 
        {
            "location": "/tutorials/using_git/Using_Git/#what-is-git", 
            "text": "Git is a revision control system. It is designed to help you keep track\nof collections of files which stem from a common source and undergo\nmodifications over time. The files tend to be human generated text. It\nis very good at managing source code repositories, but it can also be\nused to manage other things, such as configuration files and text\ndocuments. It is not, however, a file backup system.  Git encourages a distributed style of project development. Each\ncontributor to a project has their own complete repository. Changes are\nshared between repositories by  pushing  changes to, or  pulling \nchanges from other repositories. Collaboration between developers is\ngreatly enhanced by websites such as  github , bitbucket \nand  gitorious  which\nprovide convenient interfaces to managing multiple repositories.  There are many alternatives to git which each have their pros and cons.\nTwo of the more popular alternatives are:    Subversion  is particularly suited to a centralised model of development.    Mercurial  is very similar to Git, but is sometimes considered more user friendly.", 
            "title": "What is Git?"
        }, 
        {
            "location": "/tutorials/using_git/Using_Git/#getting-help", 
            "text": "There are lots of resources on the web for learning how to use Git. A\npopular reference is  Pro Git , which is freely available online\n( http://git-scm.com/book ). Another good\nreference is the book  Version Control with Git , by Loeliger and\nMcCullough.", 
            "title": "Getting help"
        }, 
        {
            "location": "/tutorials/using_git/Using_Git/#a-simple-workflow", 
            "text": "Step 1, create a github account.  Create a github account ( https://github.com/ ).\nDo this step once only (unless you need multiple accounts).  You get unlimited numbers of (world readable) public repositories for\nfree.  Private repositories (that can be shared with selected users) cost money\n(see  https://github.com/plans ), but  discounts are available for academics .  Step 2, sign into github and create a repository.  Sign in to your github account and create a new repository. Do this once\nfor every new project you have.   You will need to provide some information:    the repository name    a description of the repository    choose whether it is public (free) or private (costs money)    whether to initialise with a dummy README file (it is useful)    whether to provide an initial .gitignore file (probably leave this\n      out in the beginning)     Step 3, clone your repository to your local computer.  Clone your new repository from github to your local computer.  Each repository on github is identified by a URL, which will look like\nthe one below:   Run the command below on your development machine in the directory where\nyou want to keep the repository (of course you should use the actual URL\nof your own repository, not the one in the example).  $ git clone https://github.com/bjpop/test.git\nCloning into 'test'...\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.  This will create a directory with the same name as your repository (in this example it is called  test ).  If you change into that directory and list its contents you will see a .git  subdirectory, which is where Git keeps all the data for your\nrepository. You will also see working copies of the files in the\nproject. In this example the only such file is  README.md  which was\ncreated automatically by github when the repository was first created.\n(The .md extension on the file suggests that it uses the  Markdown \nsyntax, see  https://help.github.com/articles/github-flavored-markdown ).  $ cd test\n$ ls -a\n. .. .git README.md\n$ ls .git\nbranches config description HEAD hooks index info logs objects packed-refs refs  Step 4, commit a file to the repository.  Create a new file in the repository on your local computer and commit it\nto your local repository.  How you create the file is immaterial. You could copy it from somewhere\nelse, create it in a text editor. In this case we\u2019ll make a little\npython program:  $ echo 'print( hello world )'   hello.py  Test that your new file is satisfactory, in this case we test our code:  $ python hello.py\nhello world  Check the status of your repository:  $ git status\n# On branch master\n# Untracked files:\n# (use  git add  file ...  to include in what will be committed)\n#\n# hello.py\nnothing added to commit but untracked files present (use  git add  to track)  Notice that git tells you that the new file  hello.py  is not tracked\n(not in the repository).  When you are happy with your file, you can stage it (this is not a\ncommit), but it will cause the file to be tracked:  $ git add hello.py  Note that git uses a two-stage process for committing changes. The first\nstage is to \"stage\" your changes. Staged changes appear in the\nrepository index, but are not committed. You can stage many changes\ntogether, and even amend or undo previously staged (but not committed)\nchanges. The second stage is to commit the current staged changes to the\nrepository. Committing causes the changes to be reflected in the state\nof the repository.  Re-check the status of your repository:  $ git status\n# On branch master\n# Changes to be committed:\n# (use  git reset HEAD  file ...  to unstage)\n#\n# new file: hello.py\n#  Now we can see that the changes to  hello.py  have been staged and are\nready to be committed. Notice that  hello.py  is no longer untracked.  Commit your changes with a commit message:  $ git commit -m  A little greeting program \n[master b1cce11] A little greeting program\n1 files changed, 1 insertions(+), 0 deletions(-)\ncreate mode 100644 hello.py  Re-check the status of your repository:  $ git status\n# On branch master\n# Your branch is ahead of 'origin/master' by 1 commit.\n#\nnothing to commit (working directory clean)  Now we see that there a no uncommitted changes in the repository,\nhowever git tells us that our local repository is one commit ahead of\nthe github version (which it calls  origin/master ).  Step 5, push your changes to github.  Push the commit in your local repository to github (thus synchronising them).  $ git push origin\nUsername for 'https://github.com':  type your github username \nPassword for 'https:// your github username @github.com': \nCounting objects: 4, done.\nDelta compression using up to 16 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 305 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/bjpop/test.git\n71a771a..b1cce11 master -  master  Now if you look at your repository on github you should see the file hello.py  has been uploaded, along with its commit time and commit\nmessage.   You can inspect the contents of the file on github by clicking on its\nname:   Step 6, create a branch in your local repository.  You can ask git to tell you about the names of the current branches:  $ git branch\n* master  By default your repository starts with a branch called master. The\nasterisk next to the branch name tells you which is the current branch\n(at the moment there is only one branch).  $ git branch documentation\n$ git branch\ndocumentation\n* master  The first command above creates a new branch called  documentation . The\nsecond command shows us that the new branch has been created, but the\ncurrent branch is still  master .  To switch to another branch you must check it out:  $ git checkout documentation\nSwitched to branch 'documentation'\n$ git branch\n* documentation\nmaster  Let\u2019s add a change to our existing  hello.py  file:  $ echo '#this is a comment'   hello.py  Check the status of the repository (now in the documentation branch):  $ git status\n# On branch documentation\n# Changes not staged for commit:\n# (use  git add  file ...  to update what will be committed)\n# (use  git checkout --  file ...  to discard changes in working\n directory)\n#\n# modified: hello.py\n#\nno changes added to commit (use  git add  and/or  git commit -a )  Stage the new changes and commit them, and check the status again:  $ git add hello.py \n$ git commit -m  Added a comment \n[documentation 9bbe430] Added a comment\n1 files changed, 1 insertions(+), 0 deletions(-)\n$ git status\n# On branch documentation\nnothing to commit (working directory clean)  Now we can push the new \u201cdocumentation\u201d branch to github:  $ git push origin documentation\nUsername for 'https://github.com':  your github username \nPassword for 'https:// your github username @github.com': \nCounting objects: 5, done.\nDelta compression using up to 16 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 314 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/bjpop/test.git\n* [new branch] documentation -  documentation  On github you should be able to see the new branch:   Step 7, merge the changes back into the master  branch.  To go back to the master branch you must check it out:  $ git checkout master\nSwitched to branch 'master'  You can confirm that the master branch does not yet have the changes\nmade in the documentation branch:  $ cat hello.py \nprint( hello world )  Notice that the comment is missing.  You can pull the changes in the documentation branch back into the\nmaster branch with the merge command:  $ git merge documentation\nUpdating b1cce11..9bbe430\nFast-forward\nhello.py | 1 +\n1 files changed, 1 insertions(+), 0 deletions(-)  In this case the merge was easy because there were no conflicts between\nmaster and documentation. In this case git automatically updates the\ntracked files in the current branch.  We can test that the changes have taken place by looking at the contents\nof hello.py:  $ cat hello.py \nprint( hello world )\n#this is a comment  Check the status of the master branch:  $ git status\n# On branch master\n# Your branch is ahead of 'origin/master' by 1 commit.\n#\nnothing to commit (working directory clean)  Push the changes in the master branch back to github:  $ git push origin master\nUsername for 'https://github.com': bjpop\nPassword for 'https://bjpop@github.com': \nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/bjpop/test.git\nb1cce11..9bbe430 master -  master  Again you can verify on github that the changes have taken place.  To get an idea of the history of a project you can ask for a log of the\ncommit messages:  $ git log\ncommit 9bbe430f6e8b70187927b4a70a8402f71b17b426\nAuthor: Bernie  florbitous@gmail.com \nDate: Fri Mar 15 12:30:39 2013 +1100\nAdded a comment\ncommit b1cce115fb40a9b11917db7eb73c8295e276bb09\nAuthor: Bernie  florbitous@gmail.com \nDate: Fri Mar 15 12:08:01 2013 +1100\nA little greeting program\ncommit 71a771a86b8116c3f93c99db5416bfa371a6f772\nAuthor: Bernie Pope  florbitous@gmail.com \nDate: Thu Mar 14 17:29:02 2013 -0700", 
            "title": "A simple workflow"
        }, 
        {
            "location": "/tutorials/var_detect_advanced/var_detect_advanced_background/", 
            "text": "Introduction to Variant detection\n\n\nBackground\n\n\nA variant is something that is different from a standard or type.\n\n\nThe aim of variation detection is to detect how many bases out of the total are different to a reference genome.\n\n\nIn Craig Venter\u2019s genome 4.1 million DNA variants were reported.\n\n\nWhat sort of variation could we find in the DNA sequencing?\n\n\n\n\nSingle nucleotide variations (SNVs)\n\n\nSingle nucleotide polymorphisms (SNPs)\n\n\nSmall insertions and deletions (INDELs)\n\n\nLarge Chromosome rearrangements-Structural variations (SV)\n\n\nCopy number variations (CNV)\n\n\n\n\nVariant Calling vs genotyping\n\n\nVariant calling is concerned with whether there is evidence of variant in a particular locus whereas genotyping talks about what the sets of alleles in that locus are and their frequencies. In haploid organisms variant calling and genotyping are equivalent whereas the same rule does not apply to other organisms.\n\n\nVariant callers estimate the probability of a particular genotype given the observed data.\n\n\nThe question one would be asking is what possible genotypes would be possible for a sample. The remaining question is, given that our variant calling process calls a variant, does that mean that there is truly a variant in this locus and also given that the variant caller doesn\u2019t detect a variant in a position does that mean there is no variant in that position.\n\n\nThe result of variant calling is a list of probable variants.\n\n\nProcess of variant calling\n\n\nSample DNA -\n Sequencing -\n Read alignment -\n BAM file of aligned reads against reference genome -\n Genotyper -\n Variant list\n\n\nThe number of reads that stack up on each other is called \nread coverage\n. The data is converted into positional information of the reference with the read counts that have piled up under each position. Variant calling will look at how many bases out of the total number of bases is different to the reference at any position.\n\n\nHomozygous or Heterozygous mutations:\n\n\nWhat should be noted about variants is that they are rare events and homozygous variants are even rarer than heterozygous events.\n\n\nVariant Calling Software:\n\n\nThere a number of software available for variant calling some of which are as follows:\n\n\n\n\nSAMtools (mpileup and bcftools): Li 2009 Bioinformatics\n\n\nGATK: McKenna et al. 2010 Genome Res\n\n\nFreeBayes: MIT\n\n\nDiBayes: SOLiD software http://www.lifetechnologies.com\n\n\nInGAP: Qi J, Zhao F, Buboltz A, Schuster SC.. 2009. \nBioinformatics\n\n\nMAQGene: Bigelow H, Doitsidou M, Sarin S, Hobert O. 2009. \nNature Methods\n\n\n\n\nVariant Calling using Samtools (Mpileup + bcftools)\n\n\nSamtools calculates the genotype likelihoods. We then pipe the output to bcftools, which does our SNP calling based on those likelihoods.\n\n\nMpileup: Input: BAM file Output: Pileuped up reads under the reference\n\n\nbcftools: Input: Pileup output from Mpileup Output: VCF file with sites and genotypes\n\n\nFurther information\n\n\nVariant Calling using GATK-Unified Genotyper\n\n\nGATK is a programming framework based on the philosophy of MapReduce for developing NGS tools in a distributed or shared memory parallelized form.\n\n\nGATK unified genotyper uses a Bayesian probabilistic model to calculate genotype likelihoods.\n\n\nInputs: BAM file\n\n\nOutput: VCF file with sites and genotypes.\n\n\nThe probability of a variant genotype for a given sequence of data is calculated using the \nBayes Theorem\n as follows:\n\n\nP(Genotype | Data) =  (P(Data | Genotype) * P(Genotype)) / P(Data)\n\n\n\n\nP(Genotype) is the overall probability of that genotype being present in a sequence. This is called the prior probability of a Genotype.\n\n\nP(Data | Genotype) is the probability of the data (the reads) given the genotype\n\n\nP(Data) is the probability of seeing the reads.\n\n\nGATK unified genotyper is not very good in dealing with INDELs and thus we would only calculate SNPs throughout this tutorial. GATK is setup to work with diploid genomes but can be used on haploids as well.\n\n\nFurther information\n\n\nVariant Calling using FreeBayes\n\n\nFreeBayes is a high performance, flexible variant caller which uses the open source Freebayes tool to detect genetic variations based high throughput sequencing data (BAM files).\n\n\nFurther information\n\n\nEvaluation of detected variants using Variant Eval\n\n\nThe identified variation can further be evaluated against known variations such as common dbSNPs. The result can be checked for high concordance to the common SNPs or a known set of SNPs, the truth set.\n\n\nThe results will have:\n\n\n\n\nTrue Positives (TP): The variants called by the software which are also a known variant in the known variants file.\n\n\nFalse Positives (FP): The Variants called by the software which are not known to be variants in the known variants file.\n\n\nTrue Negatives (TN): The variants not called by the software which are not known to be variants in the known variants file.\n\n\nFalse Negatives (FN): The variants not called by the software which are known as variants in the known variants file.\n\n\n\n\nQuality Matrix:\n\n\nTP | FP\n---|----\nTN | FN\n\n\n\n\nSensitivity: TP/(TP+FN)\n\n\nSpecificity: TN/(TN+FP)\n\n\nNote:\n\n\nAlthough software methods available can find variants in unique regions reliably, the short NGS read length prevent them from detecting variations in repetitive regions with comparable sensitivity.\n\n\nDNA substitution mutations are of two types: Transitions and Transversions. The Ti/Tv ratio (Transitions/Transversions) is also an indicator of how well the model has performed for genotyping.\n\n\n\n\n\n\nTransition: a point mutation in which a purine nucleotide is changed to another purine nucleotide. (A\\\n->G) or a pyrimidine nucleotide to another pyrimidine. Approximately 2 out of 3 SNPs are Transitions.\n\n\n\n\n\n\nTransversion: a substitute of a purine for a pyrimidine.\n\n\n\n\n\n\nAlthough there are twice as many Transversions as there are Transitions because of the molecular mechanisms by which they are generated, Transition mutations occur at the higher rate than the Transversion mutations.\n\n\nFor more details on variant eval visit: \nhttp://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_sting_gatk_walkers_varianteval_VariantEval.html\n\n\nNotes:\n\n\nAn important thing worth noting is the more data the better the variant calling. In addition multisampling improves performance.\n\n\nLocal realignment\n\n\nIn order to call SNPs close by INDELs correctly, local realignment is strongly recommended before variant calling when using both UnifiedGenotyper and FreeBayes. Samtools mpileup output would not however be affected since it works around this by introducing Base Alignment Quality (BAC). For more information on BAC refer to: \nhttp://samtools.sourceforge.net/mpileup.shtml\n\n\nThe Galaxy workflow platform\n\n\nGalaxy is an online bioinformatics workflow management system. Essentially, you upload your files, create various analysis pipelines and run them, then visualise your results.\n\n\nGalaxy is really an interface to the various tools that do the data processing; each of these tools could be run from the command line, outside of Galaxy. Galaxy makes it easier to link up the tools together and visualise the entire analysis pipeline.\n\n\nGalaxy uses the concept of 'histories'. Histories are sets of data and workflows that act on that data. The data for this workshop is available in a shared history, which you can import into your own Galaxy account\n\n\nLearn more about Galaxy here\n\n\nThe Galaxy interface. Tools on the left, data in the middle, analysis workflow on the right.\n\n\n\n\nData Format used in the tutorial\n\n\nSequence Alignment Map format\n\n\nSAM format\n\n\nSequence Alignment/Map format records all information relevant to how a set of reads aligns to a reference genome. A SAM file has an optional set of header lines describing the context of the alignment, then one line per read, with the following format:\n\n\n\n\n11 mandatory fields (+ variable number of optional fields)\n\n\n1 QNAME: Query name of the read\n\n\n2 FLAG\n\n\n3 RNAME: Reference sequence name\n\n\n4 POS: Position of alignment in reference sequence\n\n\n5 MAPQ: Mapping quality (Phred-scaled)\n\n\n6 CIGAR: String that describes the specifics of the alignment against the reference\n\n\n7 MRNM\n\n\n8 MPOS\n\n\n9 ISIZE\n\n\n10 SEQQuery: Sequence on the same strand as the reference\n\n\n11 QUAL: Query quality (ASCII-33=Phred base quality)\n\n\n\n\nSAM example\n\n\n    SRR017937.312 16 chr20 43108717 37 76M * 0 0\n    TGAGCCTCCGGGCTATGTGTGCTCACTGACAGAAGACCTGGTCACCAAAGCCCGGGAAGAGCTGCAGGAAAAGCCG\n    ?,@A=A\\\n5=,@==A:BB@=B9(.;A@B;\\\n@ABBB@@9BB@:@5\\\nBBBB9)\\\nBBB2\\\nBBB@BBB?;;BABBBBBBB@\n\n\n\n\nFor this example:\n\n\n\n\nQNAME = SRR017937.312\n - this is the name of this read\n\n\nFLAG = 16\n - see the format description below\n\n\nRNAME = chr20\n - this read aligns to chromosome 20\n\n\nPOS = 43108717\n - this read aligns the sequence on chr20 at position 43108717\n\n\nMAPQ = 37\n - this is quite a high quality score for the alignment (b/w 0 and 90)\n\n\nCIGAR = 76M\n - this read aligns to the reference segment across all bases (76 Matches means no deletions or insertions. Note that 'aligns' can mean 'aligns with mismatches' - mismatches that don't affect the alignment are not recorded in this field)\n\n\nMRNM = *\n - see the format description below\n\n\nMPOS = 0\n as there is no mate for this read - the sequenced DNA library was single ended, not mate paired*.\n\n\nISIZE = 0\n as there is no mate for this read\n\n\nSEQQuery =\n the 76bp sequence of the reference segment\n\n\nQUAL =\n per-base quality scores for each position on the alignment. This is just a copy of what is in the FASTQ file\n\n\n\n\nSAM\n format is described more fully \nhere\n\n\nNOTE: reads are shown mapped to the \"sense\" strand of the reference, and bases are listed in 5' -> 3' order. This is important because an actual read might be from the other strand of DNA. The alignment tool will try to map the read as it is, and also the reverse compliment. If it was on the other strand then the reverse compliment is shown in the SAM file, rather than the original read itself\n\n\nSee\nhttp://www.illumina.com/technology/paired_end_sequencing_assay.ilmn\n for an overview of paired-end sequencing.\n\n\nSAM file in Galaxy\n\n\n\n\nBinary Sequence Alignment Map format\n\n\nBAM format\n\n\nSAM is a text format which is not space efficient. Binary Sequence Alignment is a compressed version of SAM.\n\n\nData in a BAM file is binary and therefore can't be visualised as text. If you try and visualise in Galaxy, it will default to downloading the file\n\n\nBAM file in IGV\n\n\n\n\nVCF file format\n\n\nWhat is VCF file:\n\n\nThe \nVariant Call Format\n (VCF) is the emerging standard for storing variant data. Originally designed for SNPs and short INDELs, it also works for structural variations.\n\n\nVCF consists of a header section and a data section. The header must contain a line starting with one '#', showing the name of each field, and then the sample names starting at the 10th column. The data section is TAB delimited with each line consisting of at least 8 mandatory fields (the first 8 fields in the table below). The FORMAT field and sample information are allowed to be absent. We refer to the official \nVCF spec\n for a more rigorous description of the format.\n\n\n\n\n\n\n\n\nCol\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nCHROM\n\n\nChromosome name\n\n\n\n\n\n\n2\n\n\nPOS\n\n\n1-based position. For an indel, this is the position preceding the indel.\n\n\n\n\n\n\n3\n\n\nID\n\n\nVariant identifier. Usually the dbSNP rsID.\n\n\n\n\n\n\n4\n\n\nREF\n\n\nReference sequence at POS involved in the variant. For a SNP, it is a single base.\n\n\n\n\n\n\n5\n\n\nALT\n\n\nComma delimited list of alternative seuqence(s).\n\n\n\n\n\n\n6\n\n\nQUAL\n\n\nPhred-scaled probability of all samples being homozygous reference.\n\n\n\n\n\n\n7\n\n\nFILTER\n\n\nSemicolon delimited list of filters that the variant fails to pass.\n\n\n\n\n\n\n8\n\n\nINFO\n\n\nSemicolon delimited list of variant information.\n\n\n\n\n\n\n9\n\n\nFORMAT\n\n\nColon delimited list of the format of individual genotypes in the following fields.\n\n\n\n\n\n\n10+\n\n\nSample(s)\n\n\nIndividual genotype information defined by FORMAT.\n\n\n\n\n\n\n\n\nVCF format in Galaxy:\n\n\n\n\nBcf file format:\n\n\n\n\nBCF format:\n\n\nBCF, or the binary variant call format, is the binary version of VCF. It keeps the same information in VCF, while much more efficient to process especially for many samples. The relationship between BCF and VCF is similar to that between BAM and SAM.", 
            "title": "Variant Detection Advanced"
        }, 
        {
            "location": "/tutorials/var_detect_advanced/var_detect_advanced_background/#introduction-to-variant-detection", 
            "text": "", 
            "title": "Introduction to Variant detection"
        }, 
        {
            "location": "/tutorials/var_detect_advanced/var_detect_advanced_background/#background", 
            "text": "A variant is something that is different from a standard or type.  The aim of variation detection is to detect how many bases out of the total are different to a reference genome.  In Craig Venter\u2019s genome 4.1 million DNA variants were reported.  What sort of variation could we find in the DNA sequencing?   Single nucleotide variations (SNVs)  Single nucleotide polymorphisms (SNPs)  Small insertions and deletions (INDELs)  Large Chromosome rearrangements-Structural variations (SV)  Copy number variations (CNV)   Variant Calling vs genotyping  Variant calling is concerned with whether there is evidence of variant in a particular locus whereas genotyping talks about what the sets of alleles in that locus are and their frequencies. In haploid organisms variant calling and genotyping are equivalent whereas the same rule does not apply to other organisms.  Variant callers estimate the probability of a particular genotype given the observed data.  The question one would be asking is what possible genotypes would be possible for a sample. The remaining question is, given that our variant calling process calls a variant, does that mean that there is truly a variant in this locus and also given that the variant caller doesn\u2019t detect a variant in a position does that mean there is no variant in that position.  The result of variant calling is a list of probable variants.  Process of variant calling  Sample DNA -  Sequencing -  Read alignment -  BAM file of aligned reads against reference genome -  Genotyper -  Variant list  The number of reads that stack up on each other is called  read coverage . The data is converted into positional information of the reference with the read counts that have piled up under each position. Variant calling will look at how many bases out of the total number of bases is different to the reference at any position.  Homozygous or Heterozygous mutations:  What should be noted about variants is that they are rare events and homozygous variants are even rarer than heterozygous events.", 
            "title": "Background"
        }, 
        {
            "location": "/tutorials/var_detect_advanced/var_detect_advanced_background/#variant-calling-software", 
            "text": "There a number of software available for variant calling some of which are as follows:   SAMtools (mpileup and bcftools): Li 2009 Bioinformatics  GATK: McKenna et al. 2010 Genome Res  FreeBayes: MIT  DiBayes: SOLiD software http://www.lifetechnologies.com  InGAP: Qi J, Zhao F, Buboltz A, Schuster SC.. 2009.  Bioinformatics  MAQGene: Bigelow H, Doitsidou M, Sarin S, Hobert O. 2009.  Nature Methods   Variant Calling using Samtools (Mpileup + bcftools)  Samtools calculates the genotype likelihoods. We then pipe the output to bcftools, which does our SNP calling based on those likelihoods.  Mpileup: Input: BAM file Output: Pileuped up reads under the reference  bcftools: Input: Pileup output from Mpileup Output: VCF file with sites and genotypes  Further information  Variant Calling using GATK-Unified Genotyper  GATK is a programming framework based on the philosophy of MapReduce for developing NGS tools in a distributed or shared memory parallelized form.  GATK unified genotyper uses a Bayesian probabilistic model to calculate genotype likelihoods.  Inputs: BAM file  Output: VCF file with sites and genotypes.  The probability of a variant genotype for a given sequence of data is calculated using the  Bayes Theorem  as follows:  P(Genotype | Data) =  (P(Data | Genotype) * P(Genotype)) / P(Data)  P(Genotype) is the overall probability of that genotype being present in a sequence. This is called the prior probability of a Genotype.  P(Data | Genotype) is the probability of the data (the reads) given the genotype  P(Data) is the probability of seeing the reads.  GATK unified genotyper is not very good in dealing with INDELs and thus we would only calculate SNPs throughout this tutorial. GATK is setup to work with diploid genomes but can be used on haploids as well.  Further information  Variant Calling using FreeBayes  FreeBayes is a high performance, flexible variant caller which uses the open source Freebayes tool to detect genetic variations based high throughput sequencing data (BAM files).  Further information  Evaluation of detected variants using Variant Eval  The identified variation can further be evaluated against known variations such as common dbSNPs. The result can be checked for high concordance to the common SNPs or a known set of SNPs, the truth set.  The results will have:   True Positives (TP): The variants called by the software which are also a known variant in the known variants file.  False Positives (FP): The Variants called by the software which are not known to be variants in the known variants file.  True Negatives (TN): The variants not called by the software which are not known to be variants in the known variants file.  False Negatives (FN): The variants not called by the software which are known as variants in the known variants file.   Quality Matrix:  TP | FP\n---|----\nTN | FN  Sensitivity: TP/(TP+FN)  Specificity: TN/(TN+FP)  Note:  Although software methods available can find variants in unique regions reliably, the short NGS read length prevent them from detecting variations in repetitive regions with comparable sensitivity.  DNA substitution mutations are of two types: Transitions and Transversions. The Ti/Tv ratio (Transitions/Transversions) is also an indicator of how well the model has performed for genotyping.    Transition: a point mutation in which a purine nucleotide is changed to another purine nucleotide. (A\\ ->G) or a pyrimidine nucleotide to another pyrimidine. Approximately 2 out of 3 SNPs are Transitions.    Transversion: a substitute of a purine for a pyrimidine.    Although there are twice as many Transversions as there are Transitions because of the molecular mechanisms by which they are generated, Transition mutations occur at the higher rate than the Transversion mutations.  For more details on variant eval visit:  http://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_sting_gatk_walkers_varianteval_VariantEval.html  Notes:  An important thing worth noting is the more data the better the variant calling. In addition multisampling improves performance.  Local realignment  In order to call SNPs close by INDELs correctly, local realignment is strongly recommended before variant calling when using both UnifiedGenotyper and FreeBayes. Samtools mpileup output would not however be affected since it works around this by introducing Base Alignment Quality (BAC). For more information on BAC refer to:  http://samtools.sourceforge.net/mpileup.shtml", 
            "title": "Variant Calling Software:"
        }, 
        {
            "location": "/tutorials/var_detect_advanced/var_detect_advanced_background/#the-galaxy-workflow-platform", 
            "text": "Galaxy is an online bioinformatics workflow management system. Essentially, you upload your files, create various analysis pipelines and run them, then visualise your results.  Galaxy is really an interface to the various tools that do the data processing; each of these tools could be run from the command line, outside of Galaxy. Galaxy makes it easier to link up the tools together and visualise the entire analysis pipeline.  Galaxy uses the concept of 'histories'. Histories are sets of data and workflows that act on that data. The data for this workshop is available in a shared history, which you can import into your own Galaxy account  Learn more about Galaxy here  The Galaxy interface. Tools on the left, data in the middle, analysis workflow on the right.", 
            "title": "The Galaxy workflow platform"
        }, 
        {
            "location": "/tutorials/var_detect_advanced/var_detect_advanced_background/#data-format-used-in-the-tutorial", 
            "text": "Sequence Alignment Map format  SAM format  Sequence Alignment/Map format records all information relevant to how a set of reads aligns to a reference genome. A SAM file has an optional set of header lines describing the context of the alignment, then one line per read, with the following format:   11 mandatory fields (+ variable number of optional fields)  1 QNAME: Query name of the read  2 FLAG  3 RNAME: Reference sequence name  4 POS: Position of alignment in reference sequence  5 MAPQ: Mapping quality (Phred-scaled)  6 CIGAR: String that describes the specifics of the alignment against the reference  7 MRNM  8 MPOS  9 ISIZE  10 SEQQuery: Sequence on the same strand as the reference  11 QUAL: Query quality (ASCII-33=Phred base quality)   SAM example      SRR017937.312 16 chr20 43108717 37 76M * 0 0\n    TGAGCCTCCGGGCTATGTGTGCTCACTGACAGAAGACCTGGTCACCAAAGCCCGGGAAGAGCTGCAGGAAAAGCCG\n    ?,@A=A\\ 5=,@==A:BB@=B9(.;A@B;\\ @ABBB@@9BB@:@5\\ BBBB9)\\ BBB2\\ BBB@BBB?;;BABBBBBBB@  For this example:   QNAME = SRR017937.312  - this is the name of this read  FLAG = 16  - see the format description below  RNAME = chr20  - this read aligns to chromosome 20  POS = 43108717  - this read aligns the sequence on chr20 at position 43108717  MAPQ = 37  - this is quite a high quality score for the alignment (b/w 0 and 90)  CIGAR = 76M  - this read aligns to the reference segment across all bases (76 Matches means no deletions or insertions. Note that 'aligns' can mean 'aligns with mismatches' - mismatches that don't affect the alignment are not recorded in this field)  MRNM = *  - see the format description below  MPOS = 0  as there is no mate for this read - the sequenced DNA library was single ended, not mate paired*.  ISIZE = 0  as there is no mate for this read  SEQQuery =  the 76bp sequence of the reference segment  QUAL =  per-base quality scores for each position on the alignment. This is just a copy of what is in the FASTQ file   SAM  format is described more fully  here  NOTE: reads are shown mapped to the \"sense\" strand of the reference, and bases are listed in 5' -> 3' order. This is important because an actual read might be from the other strand of DNA. The alignment tool will try to map the read as it is, and also the reverse compliment. If it was on the other strand then the reverse compliment is shown in the SAM file, rather than the original read itself  See http://www.illumina.com/technology/paired_end_sequencing_assay.ilmn  for an overview of paired-end sequencing.  SAM file in Galaxy   Binary Sequence Alignment Map format  BAM format  SAM is a text format which is not space efficient. Binary Sequence Alignment is a compressed version of SAM.  Data in a BAM file is binary and therefore can't be visualised as text. If you try and visualise in Galaxy, it will default to downloading the file  BAM file in IGV   VCF file format  What is VCF file:  The  Variant Call Format  (VCF) is the emerging standard for storing variant data. Originally designed for SNPs and short INDELs, it also works for structural variations.  VCF consists of a header section and a data section. The header must contain a line starting with one '#', showing the name of each field, and then the sample names starting at the 10th column. The data section is TAB delimited with each line consisting of at least 8 mandatory fields (the first 8 fields in the table below). The FORMAT field and sample information are allowed to be absent. We refer to the official  VCF spec  for a more rigorous description of the format.     Col  Field  Description      1  CHROM  Chromosome name    2  POS  1-based position. For an indel, this is the position preceding the indel.    3  ID  Variant identifier. Usually the dbSNP rsID.    4  REF  Reference sequence at POS involved in the variant. For a SNP, it is a single base.    5  ALT  Comma delimited list of alternative seuqence(s).    6  QUAL  Phred-scaled probability of all samples being homozygous reference.    7  FILTER  Semicolon delimited list of filters that the variant fails to pass.    8  INFO  Semicolon delimited list of variant information.    9  FORMAT  Colon delimited list of the format of individual genotypes in the following fields.    10+  Sample(s)  Individual genotype information defined by FORMAT.     VCF format in Galaxy:   Bcf file format:   BCF format:  BCF, or the binary variant call format, is the binary version of VCF. It keeps the same information in VCF, while much more efficient to process especially for many samples. The relationship between BCF and VCF is similar to that between BAM and SAM.", 
            "title": "Data Format used in the tutorial"
        }, 
        {
            "location": "/tutorials/rna_seq_dge_basic/rna_seq_basic_background/", 
            "text": "Background\n\n\nIntroduction to RNA-seq\n\n\nRNA-seq as a genomics application is essentially the process of collecting RNA (of any type: mRNA, rRNA, miRNA), converting in some way to DNA, and sequencing on a massively parallel sequencing technology such as Illumina Hiseq. Critically, the number of short reads generated for a particular RNA is assumed to be proportional to the amount of that RNA that was present in the collected sample.\n\n\nDifferential gene expression studies can exploit RNA-seq to quantitate the amount of mRNA in different samples and statistically test the difference in expression per-gene (generally measured as the normalised number of sequence reads per gene/transcript) between the samples.\n\n\nIn eukaryotes, differential gene expression analysis is complicated by the possibility of multiple isoforms for any particular gene through alternative splicing and/or multiple transcription start sites\n\n\nThe Galaxy workflow platform\n\n\nWhat is Galaxy?\n\n\nGalaxy is an online bioinformatics workflow management system. Essentially, you upload your files, create various analysis pipelines and run them, then visualise your results.\n\n\nGalaxy is really an interface to the various tools that do the data processing; each of these tools could be run from the command line, outside of Galaxy. Galaxy makes it easier to link up the tools together and visualise the entire analysis pipeline.\n\n\nGalaxy uses the concept of 'histories'. Histories are sets of data and workflows that act on that data. The data for this workshop is available in a shared history, which you can import into your own Galaxy account\n\n\nLearn more about Galaxy here\n\n\nFigure 1: The Galaxy interface\n\n\nTools on the left, data in the middle, analysis workflow on the right.\n\n\n\n\nDifferential gene expression analysis using Tophat and Cufflinks\n\n\nTwo protocols are described in the paper inspiring this tutorial (Trapnell et al 2012):\n\n\n\n\n\n\nThe \nTuxedo protocol\n: a full analysis protocol covering the assembly and characterisation of the expressed genes from the experimental data, and statistical analysis of gene expression changes in those genes\n\n\n\n\n\n\nThe \nAlternate protocol\n: a shorter approach for experiments in which the set of genes to be analysed is already known. Changes in expression of those genes are analysed\n\n\n\n\n\n\nAssembling a transcriptome is advised if no well characterised transcriptome exists, but as \nD. melanogaster\n is a model organism we have access to well-annotated and comprehensive genomes and transcriptomes from the multitude of previous genomic analyses on \nD. melanogaster\n, so the simpler \u2018Alternate protocol\u2019 is appropriate. It also has the advantage of being simpler.\n\n\nIf we were investigating a novel organism then we would first need to characterise the transcriptome by assembling it from the experimental data, as gene expression is only meaningful in the context of a defined transcriptome.\n\n\nThe Alternate protocol\n\n\nThe overall workflow for this protocol is depicted below[^1]. Briefly, raw reads from each of the sequenced replicates for each experimental condition are aligned against a reference genome; during this process splice sites are identified and reads mapped across introns as required. The mapped reads are then used to derive counts of reads vs genes by cross referencing against a list of known genes (the \u2018reference transcriptome\u2019); these read counts are normalised within and between sample sets by a variety of methods and then statistical tests are used to assess the significance of differences between the normalised read counts of sample sets, producing a ranked list of differentially expressed genes.\n\n\nFigure 2: General workflow for testing expression differences between two experimental conditions\n\n\n\n\nTophat\n\n\nReads from experimental conditions A and B are mapped to a reference genome with TopHat. TopHat uses the Bowtie aligner as an alignment engine; it breaks up the reads that Bowtie cannot align on its own into smaller pieces called segments.\n\n\n\n\nTopHat input: Fasta or Fastq files\n\n\nTopHat output: BAM file (Compressed SAM file)\n\n\n\n\nCuffdiff\n\n\nThe reads and the reference transcriptome are fed to Cuffdiff which calculates expression levels and tests the statistical significance of the observed changes.\n\n\n\n\nCuffdiff input: Reference transcriptome as GTF file\n\n\nCuffdiff output:\n\n\nGene and transcript expression levels as tables of normalised read counts\n\n\nDifferential analysis testing on:\n\n\nGenes\n\n\nTranscripts\n\n\nTranscription Start Site (TSS) groups\n\n\nSplicing: files reporting on splicing\n\n\nPromoter: differentially spliced genes via promoter switching\n\n\nCDS: CoDing Sequences\n\n\n\n\n\n\n\n\n\n\n\n\nThe full Tuxedo Protocol\n\n\nFigure 3: Full Tuxedo protocol workflow\n\n\n\n\n\n\n\n\nTophat: Reads from different experimental conditions are mapped to a reference genome with TopHat. TopHat uses the Bowtie aligner as an alignment engine. It breaks up the reads that Bowtie cannot align on its own into smaller pieces called segments.\n\n\n\n\nTopHat input: Fasta or Fastq files\n\n\nTopHat output: BAM file (Compressed SAM file)\n\n\n\n\n\n\n\n\nCufflinks: Resulting alignment files are provided to the Cufflinks program. Cufflinks uses these alignments to generate a transcriptome assembly for each condition. It reports a parsimonious transcriptome assembly of the data, i.e. all transcript fragments or \u2018transfrags\u2019 needed to \u2018explain\u2019 all the splicing event outcomes in the input data are reported. Cufflinks also quantifies the expression level of each transfrag in the sample to filter out the artificial ones\n\n\n\n\nCufflinks input:\n\n\nMapped reads (SAM or BAM), use accepted_hits.bam from Tophat\n\n\nGenome annotation: GTF file\n\n\n\n\n\n\nCufflinks output:\n\n\nassembled transcripts (GTF) including all isoforms with their exon structure and expression levels. (tabular)\n\n\ntranscript_expression (tabular): table of expression levels for each transcript\n\n\ngene_expression (tabular): table of total expression levels for each gene.\n\n\n\n\n\n\n\n\n\n\n\n\nCuffmerge[^2]/Cuffcompare: Cufflinks produces an assembly for each condition/sample. To perform differential expression we need to combine to assemblies into a single assembly. Assemblies can be merged together using the Cuffmerge or Cuffcompare utilities which are included with the Cufflinks package. This will result in the creation of a meta-transcriptome. Both Cuffcompare and Cuffmerge are available on Galaxy.\n\n\n\n\nCuffcompare input:\n\n\nAssembled_transcripts for each sample\n\n\nReference Annotation\n\n\n\n\n\n\nCuffcompare output: combined_transcripts.gtf\n\n\n\n\n\n\n\n\nCuffdiff:The reads and the combined assembly are fed to Cuffdiff which calculates expression levels and tests the statistical significance of the observed changes.\n\n\n\n\nCuffdiff input:\n\n\nReference transcriptome as GTF file\n\n\nBAM files of mapped reads from Tophat for all samples\n\n\n\n\n\n\nCuffdiff output:\n\n\nGene and transcript expression levels as tables of normalised read counts\n\n\nDifferential analysis testing on:\n\n\nGenes\n\n\nTranscripts\n\n\nTranscription Start Site (TSS) groups\n\n\nSplicing: files reporting on splicing\n\n\nPromoter: differentially spliced genes via promoter switching\n\n\nCDS: CoDing Sequences\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCummRbund[^3]: Using an R package called CummRbund, diiferentially expressed genes and transcriptomes can be visually displayed using various expression plots.\n\n\n\n\n\n\nProtocols recommendations\n\n\n\n\nCreate a replicate from each condition to control the batch effects such as variation in culture conditions. With current available kits creating triplicates is feasible and strongly recommended.\n\n\nDo paired-end sequencing whenever possible. For example, Cufflinks is much more accurate in the presence of paired-end reads.\n\n\nSequence with longer reads whenever possible. Tophat is more accurate in presence of longer reads in compare to shorter reads. However, since the cost of sequencing with longer reads is substantially more than shorter reads, some researchers prefer to do more replicates or more samples with shorter reads.\n\n\nIdentify new genes with traditional cloning and PCR-based techniques because transcriptome assembly is difficult.\n\n\n\n\nLimitations of the protocols\n\n\n\n\nBoth Tophat and Cufflinks require a reference genome.\n\n\nThe protocol assumes that RNASeq was done using Illumina or Solid sequencing techniques.\n\n\n\n\nReferences\n\n\n\n\nTrapnell C, Roberts A, Pachter L, et al. Differential gene and transcript expression analysis of RNA-seq experiments with TopHat and Cufflinks. \nNature Protocols\n [serial online]. March 1, 2012;7(3):562-578.\n\n\nJames T. Robinson, Helga Thorvaldsd\u00f3ttir, Wendy Winckler, Mitchell Guttman, Eric S. Lander, Gad Getz, Jill P. Mesirov.\n \nIntegrative Genomics Viewer\n. Nature Biotechnology 29, 24\u201326 (2011)\n,\n\n\n\n\n[^1]: \nThe published protocol has been designed for running on the\n    command line in Linux. This tutorial has been adapted to use on the\n    web-based Galaxy platform.\n\n\n[^2]: \nNote: Cuffmerge is a meta-assembler. It treats the assemblies\n    created by Cufflinks the same way Cufflinks treats reads from\n    Tophat. That is, it produces a parsimonious transcript assembly of\n    the assemblies. The difference between Cuffmerge and Cuffcompare is\n    that if we have two transfrags A and B, Cuffcompare only combines\n    the two where either A or B is \u2018contained\u2019 in the other transfrag or\n    in other words one of them is redundant; whereas Cuffmerge assembles\n    them if they overlap with each other and agree on splicing.\n\n\n[^3]: \nSince CummRbund is currently not installed on Galaxy, the\n    underlying steps are not included in this tutorial; instead we use\n    IGV (Robinson et al 2011) and Trackster for visualizing the output\n    which are accessible from Galaxy.", 
            "title": "RNA Seq Basic"
        }, 
        {
            "location": "/tutorials/rna_seq_dge_basic/rna_seq_basic_background/#background", 
            "text": "", 
            "title": "Background"
        }, 
        {
            "location": "/tutorials/rna_seq_dge_basic/rna_seq_basic_background/#introduction-to-rna-seq", 
            "text": "RNA-seq as a genomics application is essentially the process of collecting RNA (of any type: mRNA, rRNA, miRNA), converting in some way to DNA, and sequencing on a massively parallel sequencing technology such as Illumina Hiseq. Critically, the number of short reads generated for a particular RNA is assumed to be proportional to the amount of that RNA that was present in the collected sample.  Differential gene expression studies can exploit RNA-seq to quantitate the amount of mRNA in different samples and statistically test the difference in expression per-gene (generally measured as the normalised number of sequence reads per gene/transcript) between the samples.  In eukaryotes, differential gene expression analysis is complicated by the possibility of multiple isoforms for any particular gene through alternative splicing and/or multiple transcription start sites", 
            "title": "Introduction to RNA-seq"
        }, 
        {
            "location": "/tutorials/rna_seq_dge_basic/rna_seq_basic_background/#the-galaxy-workflow-platform", 
            "text": "What is Galaxy?  Galaxy is an online bioinformatics workflow management system. Essentially, you upload your files, create various analysis pipelines and run them, then visualise your results.  Galaxy is really an interface to the various tools that do the data processing; each of these tools could be run from the command line, outside of Galaxy. Galaxy makes it easier to link up the tools together and visualise the entire analysis pipeline.  Galaxy uses the concept of 'histories'. Histories are sets of data and workflows that act on that data. The data for this workshop is available in a shared history, which you can import into your own Galaxy account  Learn more about Galaxy here  Figure 1: The Galaxy interface  Tools on the left, data in the middle, analysis workflow on the right.", 
            "title": "The Galaxy workflow platform"
        }, 
        {
            "location": "/tutorials/rna_seq_dge_basic/rna_seq_basic_background/#differential-gene-expression-analysis-using-tophat-and-cufflinks", 
            "text": "Two protocols are described in the paper inspiring this tutorial (Trapnell et al 2012):    The  Tuxedo protocol : a full analysis protocol covering the assembly and characterisation of the expressed genes from the experimental data, and statistical analysis of gene expression changes in those genes    The  Alternate protocol : a shorter approach for experiments in which the set of genes to be analysed is already known. Changes in expression of those genes are analysed    Assembling a transcriptome is advised if no well characterised transcriptome exists, but as  D. melanogaster  is a model organism we have access to well-annotated and comprehensive genomes and transcriptomes from the multitude of previous genomic analyses on  D. melanogaster , so the simpler \u2018Alternate protocol\u2019 is appropriate. It also has the advantage of being simpler.  If we were investigating a novel organism then we would first need to characterise the transcriptome by assembling it from the experimental data, as gene expression is only meaningful in the context of a defined transcriptome.  The Alternate protocol  The overall workflow for this protocol is depicted below[^1]. Briefly, raw reads from each of the sequenced replicates for each experimental condition are aligned against a reference genome; during this process splice sites are identified and reads mapped across introns as required. The mapped reads are then used to derive counts of reads vs genes by cross referencing against a list of known genes (the \u2018reference transcriptome\u2019); these read counts are normalised within and between sample sets by a variety of methods and then statistical tests are used to assess the significance of differences between the normalised read counts of sample sets, producing a ranked list of differentially expressed genes.  Figure 2: General workflow for testing expression differences between two experimental conditions   Tophat  Reads from experimental conditions A and B are mapped to a reference genome with TopHat. TopHat uses the Bowtie aligner as an alignment engine; it breaks up the reads that Bowtie cannot align on its own into smaller pieces called segments.   TopHat input: Fasta or Fastq files  TopHat output: BAM file (Compressed SAM file)   Cuffdiff  The reads and the reference transcriptome are fed to Cuffdiff which calculates expression levels and tests the statistical significance of the observed changes.   Cuffdiff input: Reference transcriptome as GTF file  Cuffdiff output:  Gene and transcript expression levels as tables of normalised read counts  Differential analysis testing on:  Genes  Transcripts  Transcription Start Site (TSS) groups  Splicing: files reporting on splicing  Promoter: differentially spliced genes via promoter switching  CDS: CoDing Sequences", 
            "title": "Differential gene expression analysis using Tophat and Cufflinks"
        }, 
        {
            "location": "/tutorials/rna_seq_dge_basic/rna_seq_basic_background/#the-full-tuxedo-protocol", 
            "text": "Figure 3: Full Tuxedo protocol workflow     Tophat: Reads from different experimental conditions are mapped to a reference genome with TopHat. TopHat uses the Bowtie aligner as an alignment engine. It breaks up the reads that Bowtie cannot align on its own into smaller pieces called segments.   TopHat input: Fasta or Fastq files  TopHat output: BAM file (Compressed SAM file)     Cufflinks: Resulting alignment files are provided to the Cufflinks program. Cufflinks uses these alignments to generate a transcriptome assembly for each condition. It reports a parsimonious transcriptome assembly of the data, i.e. all transcript fragments or \u2018transfrags\u2019 needed to \u2018explain\u2019 all the splicing event outcomes in the input data are reported. Cufflinks also quantifies the expression level of each transfrag in the sample to filter out the artificial ones   Cufflinks input:  Mapped reads (SAM or BAM), use accepted_hits.bam from Tophat  Genome annotation: GTF file    Cufflinks output:  assembled transcripts (GTF) including all isoforms with their exon structure and expression levels. (tabular)  transcript_expression (tabular): table of expression levels for each transcript  gene_expression (tabular): table of total expression levels for each gene.       Cuffmerge[^2]/Cuffcompare: Cufflinks produces an assembly for each condition/sample. To perform differential expression we need to combine to assemblies into a single assembly. Assemblies can be merged together using the Cuffmerge or Cuffcompare utilities which are included with the Cufflinks package. This will result in the creation of a meta-transcriptome. Both Cuffcompare and Cuffmerge are available on Galaxy.   Cuffcompare input:  Assembled_transcripts for each sample  Reference Annotation    Cuffcompare output: combined_transcripts.gtf     Cuffdiff:The reads and the combined assembly are fed to Cuffdiff which calculates expression levels and tests the statistical significance of the observed changes.   Cuffdiff input:  Reference transcriptome as GTF file  BAM files of mapped reads from Tophat for all samples    Cuffdiff output:  Gene and transcript expression levels as tables of normalised read counts  Differential analysis testing on:  Genes  Transcripts  Transcription Start Site (TSS) groups  Splicing: files reporting on splicing  Promoter: differentially spliced genes via promoter switching  CDS: CoDing Sequences         CummRbund[^3]: Using an R package called CummRbund, diiferentially expressed genes and transcriptomes can be visually displayed using various expression plots.", 
            "title": "The full Tuxedo Protocol"
        }, 
        {
            "location": "/tutorials/rna_seq_dge_basic/rna_seq_basic_background/#protocols-recommendations", 
            "text": "Create a replicate from each condition to control the batch effects such as variation in culture conditions. With current available kits creating triplicates is feasible and strongly recommended.  Do paired-end sequencing whenever possible. For example, Cufflinks is much more accurate in the presence of paired-end reads.  Sequence with longer reads whenever possible. Tophat is more accurate in presence of longer reads in compare to shorter reads. However, since the cost of sequencing with longer reads is substantially more than shorter reads, some researchers prefer to do more replicates or more samples with shorter reads.  Identify new genes with traditional cloning and PCR-based techniques because transcriptome assembly is difficult.", 
            "title": "Protocols recommendations"
        }, 
        {
            "location": "/tutorials/rna_seq_dge_basic/rna_seq_basic_background/#limitations-of-the-protocols", 
            "text": "Both Tophat and Cufflinks require a reference genome.  The protocol assumes that RNASeq was done using Illumina or Solid sequencing techniques.", 
            "title": "Limitations of the protocols"
        }, 
        {
            "location": "/tutorials/rna_seq_dge_basic/rna_seq_basic_background/#references", 
            "text": "Trapnell C, Roberts A, Pachter L, et al. Differential gene and transcript expression analysis of RNA-seq experiments with TopHat and Cufflinks.  Nature Protocols  [serial online]. March 1, 2012;7(3):562-578.  James T. Robinson, Helga Thorvaldsd\u00f3ttir, Wendy Winckler, Mitchell Guttman, Eric S. Lander, Gad Getz, Jill P. Mesirov.   Integrative Genomics Viewer . Nature Biotechnology 29, 24\u201326 (2011) ,   [^1]:  The published protocol has been designed for running on the\n    command line in Linux. This tutorial has been adapted to use on the\n    web-based Galaxy platform.  [^2]:  Note: Cuffmerge is a meta-assembler. It treats the assemblies\n    created by Cufflinks the same way Cufflinks treats reads from\n    Tophat. That is, it produces a parsimonious transcript assembly of\n    the assemblies. The difference between Cuffmerge and Cuffcompare is\n    that if we have two transfrags A and B, Cuffcompare only combines\n    the two where either A or B is \u2018contained\u2019 in the other transfrag or\n    in other words one of them is redundant; whereas Cuffmerge assembles\n    them if they overlap with each other and agree on splicing.  [^3]:  Since CummRbund is currently not installed on Galaxy, the\n    underlying steps are not included in this tutorial; instead we use\n    IGV (Robinson et al 2011) and Trackster for visualizing the output\n    which are accessible from Galaxy.", 
            "title": "References"
        }, 
        {
            "location": "/tutorials/rna_seq_exp_design/rna_seq_experimental_design/", 
            "text": "RNA-Seq Experimental Design\n\n\nWhat is RNA-seq?\n\n\nRNA-seq is a method of measuring gene expression using shotgun sequencing. The\nprocess involves reverse transcribing RNA into cDNA, then sequencing fragments\non a high-throughput platform such as Illumina to obtain a large number of\nshort reads. For each sample, the reads are then aligned to a genome, and the\nnumber of reads aligned to each gene or feature is recorded.\n\n\nA typical RNA-seq experiment aims to find differentially expressed genes\nbetween two conditions (e.g. up and down-regulated genes in knock-out mice\ncompared to wild-type mice). RNA-seq can also be used to discover new\ntranscripts, splice variants, and fusion genes.\n\n\nWhy is a good experimental design vital?\n\n\nAn RNA-seq experiment produces high dimensional data. This means we get a huge\nnumber of observations for a small number of samples. For example, the\nexpression of ~20,000 genes could be measured for 6 samples (3 knock-out and 3\nwild-type). A frequently used approach to analyse RNA-seq data is to fit each\ngene to a linear model where for each of the 20,000 genes, parameters need to\nbe estimated using a small number of observations. To complicate matters, each\nmeasurement of gene expression is comprised of a mix of biological signal and\nunwanted noise. Thus, in order to perform a robust statistical analysis, the\nmethodology must be carefully designed.\n\n\nBefore you begin any RNA-seq experiment, some questions you should ask\nyourself are:\n\n\n\n\nWhy do you expect to find differentially expressed genes in the particular\n   tissue?\n\n\nWhat types of genes do you expect to find differentially expressed?\n\n\nWhat are the sources of variability from your samples?\n\n\nWhere do you expect most of your variation to come from?\n\n\n\n\nA coherent experimental design is the groundwork of a successful experiment.\nYou should invest time and thought in designing a robust experiment as failing\nto think this step through can lead to unusable data and wasted time, money,\nand effort.\n\n\nIt is also useful to think about the statistical methods you will use to\nanalyse the data. If you're planning to bring a data analyst or\nbioinformatician onboard for data analysis, you should include him or her in\nthe experimental design stage.\n\n\nTerminology\n\n\nBefore progressing, it may be useful to define some terms which are commonly\nused in RNA-seq.\n\n\n\n  \n\n    \nVariability:\n    \nA measure of how much the data is spread around. Variance is\n    mathematically defined as the average of the squared difference between\n    observations and the expected value. Simply put, a larger variance means\n    it is harder to identify differentially expressed genes.\n  \n\n    \nFeature:\n    \nA defined genomic region. Usually a gene in RNA-seq, but can also\n    refer to any region such as an exon or an isoform. In RNA-seq, an estimate\n    of abundance is obtained for each feature.\n  \n\n    \nBiological replicates:\n    \nSamples that have been obtained from biologically separate samples.\n    This can mean different individual organisms (e.g. tissue samples from\n    different mice), different samplings of the same tumour, or different\n    population of cells grown separately from each other but originating from\n    the same cell-line. For example, the samples obtained from three different\n    knock-out mice could be considered biological replicates in a knock-out\n    versus wild-type experiment. A biological replicate combines both technical\n    and biological variability as it is also an independent case of all the\n    technical steps.\n  \n\n    \nTechnical replicates:\n    \nSamples in which the starting biological sample is the same, but the\n    replicates are processed separately. For example, if a biological sample\n    is divided and two different library preps are processed and sequenced,\n    those two samples would be considered technical replicates.\n  \n\n    \nCovariate:\n    \nThe term 'covariate' is often used interchangeably with 'factor' or\n    'variable' in RNA-seq. The term refers to a property of the sample which\n    may have some influence on gene expression and should be represented in\n    the RNA-seq model. Covariates in RNA-seq are often categorical (e.g.\n    treatment condition, sex, batch), but continuous factors are also possible\n    (e.g. time points, age). A linear model will contain terms to represent\n    the relationships between covariates and each sample. Each possible value\n    a factor can take is called a level (e.g. 'male' and 'female' are two\n    levels in the factor 'sex'). Factors can either be directly of interest\n    to the experiment (e.g. treatment condition) or not of interest (also\n    known as nuisance variables) (e.g. sex, batch). The purpose of covariates\n    is to explain the variance seen in samples.\n  \n\n    \nConfounding variable:\n    \nA confounding variable is a nuisance variable that is associated with\n    the factor of interest. Possible confounding factors should be controlled\n    for so they don't interfere with analysis. For example, if all knock-out\n    mice samples were harvested in the morning and all wild-type mice samples\n    were harvested in the afternoon, the time of sample collection would be a\n    confounding factor as the effects from sample collection time and from the\n    knock-out cannot be separated.\n  \n\n    \nStatistical power:\n    \nThe ability to identify differentially expressed genes when there\n    really is a difference. This is partly dependent on variance and therefore\n    is affected by the number of replicates available and sequencing depth.\n\n\n\n\nThe importance of replicates to estimate variance\n\n\nWhen performing a differential gene expression analysis, we look at the\nexpression values of each gene and try to determine if the expression is\nsignificantly different in the different conditions (e.g. knock-out and\nwild-type). The ability to distinguish whether a gene is differentially\nexpressed is partly determined by the estimates of variability obtained by\nusing multiple observations in each condition.\n\n\nVariability is present in two forms: technical variability and biological\nvariability.\n\n\nCombined biological and technical variability is measured using biological \nreplicates. Biological variability is the main source of variability and is \ndue to natural variation in the population and within cells. This includes \ndifferent individuals having different levels of a particular gene and the \nstochastic nature of expression levels in different cells.\n\n\nTechnical variability is measured using technical replicates. Technical\nvariability is often very small compared to biological variability.  Usually\nthe question is whether an observed difference is greater than the total \nvariability (i.e. significant).  As combined variability is measured by \nbiological replicates technical replicates are only important if you need to\nknow the degree of biological variability or technical variability.  An\nexample of wanting technical variability would be method development. The\nmain source of technical variation comes from RNA processing and from \nlibrary prep. Variability from sequencing in different flow cells or different\nlanes is usually minimal. Generally, creating technical replicates from multiple\nlibrary preps is unnecessary for RNA-seq experiments.\n\n\nThe amount of variance between your biological replicates will affect the\noutcome of your analysis. Ideally, you aim to have minimal variability between\nsamples so you only measure the effect of the condition of interest. Too much\nvariability between samples can drown out the signal of truly differentially\nexpressed genes. Controlling for possible confounding factors between\nconditions is also important to prevent falsely attributing differential\nexpression to the condition of interest.\n\n\nStrategies to minimise variation between samples and to control confounding\nvariables include:\n\n\n\n\nchoosing organisms from the same litter,\n\n\nchoosing organisms of the same sex if possible,\n\n\nusing a constant sample collection time,\n\n\nhaving the same laboratory technician perform each library prep,\n\n\nrandomising samples to prevent a confounding batch effect if all samples\n   can't be processed at one time.\n\n\n\n\nIf variation between samples can not be removed it should be balanced between\nconditions of interest as much as possible, and carefully recorded to allow\nits effect to be measured and potentially removed during analysis.\n\n\nHow many replicates and how many reads do I need?\n\n\nTwo very common question asked are:\n\n\n\n\nhow many biological replicates do I need, and\n\n\nwhat sequencing depth is needed for each sample\n\n\n\n\nin order to have enough statistical power for my RNA-seq experiment?\n\n\nThese questions cannot be precisely answered without a pilot study. A small\namount of data (minimum of two biological replicates for each condition with\nat least 10M reads) can estimate the amount of biological variation, which\ndetermines how many biological replicates are required. Performing a pilot\nstudy is highly recommended to estimate statistical power and identify\npossible problems before investing more time and money into the project.\n\n\nScotty\n is a web-based tool\nthat uses data generated from a pilot study to optimize a design for\nstatistical power. With a limited budget, one must balance sequence coverage\nand number of biological replicates. Scotty also has a cost estimate feature\nwhich returns the most powerful design within budget constraints.\n\n\nAs a general rule, the number of biological replicates should never be below 3.\nFor a basic RNA-seq differential expression experiment, 10M to 20M reads per\nsample is usually enough.  If similar data exists it can be helpful to check\nthe read counts for key genes of interest to estimate the required depth.\n\n\nBiological variability is usually the largest effect limiting the power of \nRNA-seq analysis.  The most improvement in an experiment will usually be \nachieved by increasing the biological replication to improve estimation of \nthe biological variation.\n\n\nIt is often possible to design experiments where the analysis is done \nincrementally such that a pilot study is added to with an additional block of\nsamples or a pool of libraries is sequenced to additional depth. In these cases\ncare must be taken to balance the design in a manner that each stage is a\nvalid experiment in its own right.  This can allow a focused question to be \nanswered in the first stage, with an ability to either address issues or \nprogress to a second stage with additional questions.\n\n\nSequencing options to consider\n\n\nHow much total RNA is needed:\n\nMany sequencing centres such as\n\nAGRF\n\nrecommend at least 250ng of total RNA for RNA sequencing. It is possible to go\nas low as 100ng of total RNA, but results are not guaranteed. The quality of\nRNA is also important when making libraries. A RNA Integrity Number (RIN) is a\nnumber from 1 (poor) to 10 (good) and can indicate how much degradation there\nis in the sample. A poor score can lead to over representation at the 3' end\nof the transcript and low yield. Samples with low RIN scores (below 8) are\nnot recommended for sequencing.  Care should also be taken to ensure RIN is\nconsistent between conditions to avoid confounding this technical effect with\nthe biological question.\n\n\nChoosing an enrichment method:\n\nRibosomal RNA makes up \n95% of total cellular RNA, so a preparation for\nRNA-seq must either enrich for mRNA using poly-A enrichment, or deplete rRNA.\nPoly-A enrichment is recommended for most standard RNA-seq experiments, but\nwill not provide information about microRNAs and other non-coding RNA species.\nIn general, ribo-depleted RNA-seq data will contain more noise, however, the\nprotocol is recommended if you have poor or variable quality of RNA as the 3\u2019\nbias of poly-A enrichment will be more pronounced with increased RNA\ndegradation. The amount of RNA needed for each method differs. For Poly-A\nenrichment a minimum of 100ng is needed while for ribo-depletion, a minimum of\n200ng is recommended.\n\n\nChoosing read type:\n\nFor basic differential expression analysis RNA-seq experiments, single-end\nsequencing is recommended to obtain gene transcript counts. In more advanced\nexperiments, paired-ends are useful for determining transcript structure and\ndiscovering splice variants.\n\n\nChoosing strandedness:\n  \n\n\nWith a non-directional (unstranded) protocol, there is no way to identify\nwhether a read originated from the coding strand or its reverse complement.\nNon-directional protocols allow mapping of a read to a genomic location, but\nnot the direction in which the RNA was transcribed. They are therefore used to\ncount transcripts for known genes, and are recommended for basic RNA-seq\nexperiments. Directional protocols (stranded) preserve strand information and\nare useful for novel transcript discovery.\n\n\nMultiplexing:\n\nMultiplexing is an approach to sequence multiple samples in the same\nsequencing lane. By sequencing all samples in the same lane, multiplexing can\nalso minimise bias from lane effects.\n\n\nSpike-in controls:\n\nRNA-seq spike-in controls are a set of synthetic RNAs of known concentration\nwhich act as negative or positive controls. These controls have been used for\nnormalisation and quality control, but recent work has shown that the amount\nof technical variability in their use dramatically reduces their utility.\n\n\nSummary\n\n\n\n\nA good experimental design is vital for a successful experiment. If you're\n   planning to work with a data analyst or bioinformatician, include them in\n   the design stage.\n\n\nAim to minimise variability by identifying possible sources of variance in\n   your samples.\n\n\nBiological replicates are important. The number of biological replicates\n   you should have should never be below 3. Technical replicates are often\n   unnecessary.\n\n\nPilot studies are highly recommended for identifying how many replicates\n   and how many reads you should have for enough statistical power in your\n   experiment.\n\n\nFor basic RNA-seq experiments, poly-A enriched, single-ended, unstranded\n   sequencing at depths of 10M to 20M is probably what you want.", 
            "title": "RNA Seq Experimental Design"
        }, 
        {
            "location": "/tutorials/rna_seq_exp_design/rna_seq_experimental_design/#rna-seq-experimental-design", 
            "text": "", 
            "title": "RNA-Seq Experimental Design"
        }, 
        {
            "location": "/tutorials/rna_seq_exp_design/rna_seq_experimental_design/#what-is-rna-seq", 
            "text": "RNA-seq is a method of measuring gene expression using shotgun sequencing. The\nprocess involves reverse transcribing RNA into cDNA, then sequencing fragments\non a high-throughput platform such as Illumina to obtain a large number of\nshort reads. For each sample, the reads are then aligned to a genome, and the\nnumber of reads aligned to each gene or feature is recorded.  A typical RNA-seq experiment aims to find differentially expressed genes\nbetween two conditions (e.g. up and down-regulated genes in knock-out mice\ncompared to wild-type mice). RNA-seq can also be used to discover new\ntranscripts, splice variants, and fusion genes.", 
            "title": "What is RNA-seq?"
        }, 
        {
            "location": "/tutorials/rna_seq_exp_design/rna_seq_experimental_design/#why-is-a-good-experimental-design-vital", 
            "text": "An RNA-seq experiment produces high dimensional data. This means we get a huge\nnumber of observations for a small number of samples. For example, the\nexpression of ~20,000 genes could be measured for 6 samples (3 knock-out and 3\nwild-type). A frequently used approach to analyse RNA-seq data is to fit each\ngene to a linear model where for each of the 20,000 genes, parameters need to\nbe estimated using a small number of observations. To complicate matters, each\nmeasurement of gene expression is comprised of a mix of biological signal and\nunwanted noise. Thus, in order to perform a robust statistical analysis, the\nmethodology must be carefully designed.  Before you begin any RNA-seq experiment, some questions you should ask\nyourself are:   Why do you expect to find differentially expressed genes in the particular\n   tissue?  What types of genes do you expect to find differentially expressed?  What are the sources of variability from your samples?  Where do you expect most of your variation to come from?   A coherent experimental design is the groundwork of a successful experiment.\nYou should invest time and thought in designing a robust experiment as failing\nto think this step through can lead to unusable data and wasted time, money,\nand effort.  It is also useful to think about the statistical methods you will use to\nanalyse the data. If you're planning to bring a data analyst or\nbioinformatician onboard for data analysis, you should include him or her in\nthe experimental design stage.", 
            "title": "Why is a good experimental design vital?"
        }, 
        {
            "location": "/tutorials/rna_seq_exp_design/rna_seq_experimental_design/#terminology", 
            "text": "Before progressing, it may be useful to define some terms which are commonly\nused in RNA-seq.  \n   \n     Variability:\n     A measure of how much the data is spread around. Variance is\n    mathematically defined as the average of the squared difference between\n    observations and the expected value. Simply put, a larger variance means\n    it is harder to identify differentially expressed genes.\n   \n     Feature:\n     A defined genomic region. Usually a gene in RNA-seq, but can also\n    refer to any region such as an exon or an isoform. In RNA-seq, an estimate\n    of abundance is obtained for each feature.\n   \n     Biological replicates:\n     Samples that have been obtained from biologically separate samples.\n    This can mean different individual organisms (e.g. tissue samples from\n    different mice), different samplings of the same tumour, or different\n    population of cells grown separately from each other but originating from\n    the same cell-line. For example, the samples obtained from three different\n    knock-out mice could be considered biological replicates in a knock-out\n    versus wild-type experiment. A biological replicate combines both technical\n    and biological variability as it is also an independent case of all the\n    technical steps.\n   \n     Technical replicates:\n     Samples in which the starting biological sample is the same, but the\n    replicates are processed separately. For example, if a biological sample\n    is divided and two different library preps are processed and sequenced,\n    those two samples would be considered technical replicates.\n   \n     Covariate:\n     The term 'covariate' is often used interchangeably with 'factor' or\n    'variable' in RNA-seq. The term refers to a property of the sample which\n    may have some influence on gene expression and should be represented in\n    the RNA-seq model. Covariates in RNA-seq are often categorical (e.g.\n    treatment condition, sex, batch), but continuous factors are also possible\n    (e.g. time points, age). A linear model will contain terms to represent\n    the relationships between covariates and each sample. Each possible value\n    a factor can take is called a level (e.g. 'male' and 'female' are two\n    levels in the factor 'sex'). Factors can either be directly of interest\n    to the experiment (e.g. treatment condition) or not of interest (also\n    known as nuisance variables) (e.g. sex, batch). The purpose of covariates\n    is to explain the variance seen in samples.\n   \n     Confounding variable:\n     A confounding variable is a nuisance variable that is associated with\n    the factor of interest. Possible confounding factors should be controlled\n    for so they don't interfere with analysis. For example, if all knock-out\n    mice samples were harvested in the morning and all wild-type mice samples\n    were harvested in the afternoon, the time of sample collection would be a\n    confounding factor as the effects from sample collection time and from the\n    knock-out cannot be separated.\n   \n     Statistical power:\n     The ability to identify differentially expressed genes when there\n    really is a difference. This is partly dependent on variance and therefore\n    is affected by the number of replicates available and sequencing depth.", 
            "title": "Terminology"
        }, 
        {
            "location": "/tutorials/rna_seq_exp_design/rna_seq_experimental_design/#the-importance-of-replicates-to-estimate-variance", 
            "text": "When performing a differential gene expression analysis, we look at the\nexpression values of each gene and try to determine if the expression is\nsignificantly different in the different conditions (e.g. knock-out and\nwild-type). The ability to distinguish whether a gene is differentially\nexpressed is partly determined by the estimates of variability obtained by\nusing multiple observations in each condition.  Variability is present in two forms: technical variability and biological\nvariability.  Combined biological and technical variability is measured using biological \nreplicates. Biological variability is the main source of variability and is \ndue to natural variation in the population and within cells. This includes \ndifferent individuals having different levels of a particular gene and the \nstochastic nature of expression levels in different cells.  Technical variability is measured using technical replicates. Technical\nvariability is often very small compared to biological variability.  Usually\nthe question is whether an observed difference is greater than the total \nvariability (i.e. significant).  As combined variability is measured by \nbiological replicates technical replicates are only important if you need to\nknow the degree of biological variability or technical variability.  An\nexample of wanting technical variability would be method development. The\nmain source of technical variation comes from RNA processing and from \nlibrary prep. Variability from sequencing in different flow cells or different\nlanes is usually minimal. Generally, creating technical replicates from multiple\nlibrary preps is unnecessary for RNA-seq experiments.  The amount of variance between your biological replicates will affect the\noutcome of your analysis. Ideally, you aim to have minimal variability between\nsamples so you only measure the effect of the condition of interest. Too much\nvariability between samples can drown out the signal of truly differentially\nexpressed genes. Controlling for possible confounding factors between\nconditions is also important to prevent falsely attributing differential\nexpression to the condition of interest.  Strategies to minimise variation between samples and to control confounding\nvariables include:   choosing organisms from the same litter,  choosing organisms of the same sex if possible,  using a constant sample collection time,  having the same laboratory technician perform each library prep,  randomising samples to prevent a confounding batch effect if all samples\n   can't be processed at one time.   If variation between samples can not be removed it should be balanced between\nconditions of interest as much as possible, and carefully recorded to allow\nits effect to be measured and potentially removed during analysis.", 
            "title": "The importance of replicates to estimate variance"
        }, 
        {
            "location": "/tutorials/rna_seq_exp_design/rna_seq_experimental_design/#how-many-replicates-and-how-many-reads-do-i-need", 
            "text": "Two very common question asked are:   how many biological replicates do I need, and  what sequencing depth is needed for each sample   in order to have enough statistical power for my RNA-seq experiment?  These questions cannot be precisely answered without a pilot study. A small\namount of data (minimum of two biological replicates for each condition with\nat least 10M reads) can estimate the amount of biological variation, which\ndetermines how many biological replicates are required. Performing a pilot\nstudy is highly recommended to estimate statistical power and identify\npossible problems before investing more time and money into the project.  Scotty  is a web-based tool\nthat uses data generated from a pilot study to optimize a design for\nstatistical power. With a limited budget, one must balance sequence coverage\nand number of biological replicates. Scotty also has a cost estimate feature\nwhich returns the most powerful design within budget constraints.  As a general rule, the number of biological replicates should never be below 3.\nFor a basic RNA-seq differential expression experiment, 10M to 20M reads per\nsample is usually enough.  If similar data exists it can be helpful to check\nthe read counts for key genes of interest to estimate the required depth.  Biological variability is usually the largest effect limiting the power of \nRNA-seq analysis.  The most improvement in an experiment will usually be \nachieved by increasing the biological replication to improve estimation of \nthe biological variation.  It is often possible to design experiments where the analysis is done \nincrementally such that a pilot study is added to with an additional block of\nsamples or a pool of libraries is sequenced to additional depth. In these cases\ncare must be taken to balance the design in a manner that each stage is a\nvalid experiment in its own right.  This can allow a focused question to be \nanswered in the first stage, with an ability to either address issues or \nprogress to a second stage with additional questions.", 
            "title": "How many replicates and how many reads do I need?"
        }, 
        {
            "location": "/tutorials/rna_seq_exp_design/rna_seq_experimental_design/#sequencing-options-to-consider", 
            "text": "How much total RNA is needed: \nMany sequencing centres such as AGRF \nrecommend at least 250ng of total RNA for RNA sequencing. It is possible to go\nas low as 100ng of total RNA, but results are not guaranteed. The quality of\nRNA is also important when making libraries. A RNA Integrity Number (RIN) is a\nnumber from 1 (poor) to 10 (good) and can indicate how much degradation there\nis in the sample. A poor score can lead to over representation at the 3' end\nof the transcript and low yield. Samples with low RIN scores (below 8) are\nnot recommended for sequencing.  Care should also be taken to ensure RIN is\nconsistent between conditions to avoid confounding this technical effect with\nthe biological question.  Choosing an enrichment method: \nRibosomal RNA makes up  95% of total cellular RNA, so a preparation for\nRNA-seq must either enrich for mRNA using poly-A enrichment, or deplete rRNA.\nPoly-A enrichment is recommended for most standard RNA-seq experiments, but\nwill not provide information about microRNAs and other non-coding RNA species.\nIn general, ribo-depleted RNA-seq data will contain more noise, however, the\nprotocol is recommended if you have poor or variable quality of RNA as the 3\u2019\nbias of poly-A enrichment will be more pronounced with increased RNA\ndegradation. The amount of RNA needed for each method differs. For Poly-A\nenrichment a minimum of 100ng is needed while for ribo-depletion, a minimum of\n200ng is recommended.  Choosing read type: \nFor basic differential expression analysis RNA-seq experiments, single-end\nsequencing is recommended to obtain gene transcript counts. In more advanced\nexperiments, paired-ends are useful for determining transcript structure and\ndiscovering splice variants.  Choosing strandedness:     With a non-directional (unstranded) protocol, there is no way to identify\nwhether a read originated from the coding strand or its reverse complement.\nNon-directional protocols allow mapping of a read to a genomic location, but\nnot the direction in which the RNA was transcribed. They are therefore used to\ncount transcripts for known genes, and are recommended for basic RNA-seq\nexperiments. Directional protocols (stranded) preserve strand information and\nare useful for novel transcript discovery.  Multiplexing: \nMultiplexing is an approach to sequence multiple samples in the same\nsequencing lane. By sequencing all samples in the same lane, multiplexing can\nalso minimise bias from lane effects.  Spike-in controls: \nRNA-seq spike-in controls are a set of synthetic RNAs of known concentration\nwhich act as negative or positive controls. These controls have been used for\nnormalisation and quality control, but recent work has shown that the amount\nof technical variability in their use dramatically reduces their utility.", 
            "title": "Sequencing options to consider"
        }, 
        {
            "location": "/tutorials/rna_seq_exp_design/rna_seq_experimental_design/#summary", 
            "text": "A good experimental design is vital for a successful experiment. If you're\n   planning to work with a data analyst or bioinformatician, include them in\n   the design stage.  Aim to minimise variability by identifying possible sources of variance in\n   your samples.  Biological replicates are important. The number of biological replicates\n   you should have should never be below 3. Technical replicates are often\n   unnecessary.  Pilot studies are highly recommended for identifying how many replicates\n   and how many reads you should have for enough statistical power in your\n   experiment.  For basic RNA-seq experiments, poly-A enriched, single-ended, unstranded\n   sequencing at depths of 10M to 20M is probably what you want.", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/hpc/", 
            "text": "em {font-style: normal; font-family: courier new;}\n\n\n\nHigh-Performance Computing\n\n\nA hands-on-workshop covering High-Performance Computing (HPC)\n\n\nHow to use this workshop\n\n\nThe workshop is broken up into a number of \nTopics\n each focusing on a particular aspect of HPCs.  You should take a short break between \neach to refresh and relax before tackling the next.\n\n\nTopic\ns may start with some background followed by a number of \nexercises\n.  Each \nexercise\n begins with a \nquestion\n, then \nsometimes a \nhint\n (or two) and finishes with the suggested \nanswer\n.\n\n\nQuestion\n\n\nAn example question looks like:\n\n\n\n\n\n\nWhat is the Answer to Life?\n\n\n\n\n\n\n(function(w,d,u){w.readyQ=[];w.bindReadyQ=[];function p(x,y){if(x==\"ready\"){w.bindReadyQ.push(y);}else{w.readyQ.push(x);}};var a={ready:p,bind:p};w.$=w.jQuery=function(f){if(f===d||f===u){return a}else{p(f)}}})(window,document)\n\n\nHint\n\n\nDepending on how much of a challenge you like, you may choose to use hints.  Even if you work out the answer without hints, its a good \nidea to read the hints afterwards because they contain extra information that is good to know.\n\n\nNote: \nhint\ns may be staged, that is, there may be a \nmore\n section within a hint for further hints\n\n\n\n\n\n\nHint\n \n- click here to reveal hint\n\n\n\n\nWhat is the answer to everything?\n\n\nAs featured in \n\"The Hitchhiker's Guide to the Galaxy\"\n\n\n\n\n\n\nMore\n \n- and here to show more\n\n\n\n\nIt is probably a two digit number\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink2\").click(function(e){\n            e.preventDefault();\n            $(\"#showable2\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable2\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink2\").text(\"More\");\n            } else {\n                $(\"#showablelink2\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink1\").click(function(e){\n            e.preventDefault();\n            $(\"#showable1\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nAnswer\n\n\nOnce you have worked out the answer to the question expand the Answer section to check if you got it correct.\n\n\n\n\n\n\nAnswer\n \n- click here to reveal answer\n\n\n\n\nAnswer\n: 42\n\n\nRef: \nNumber 42 (Wikipedia)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink3\").click(function(e){\n            e.preventDefault();\n            $(\"#showable3\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nUsage Style\n\n\nThis workshop attempts to cater for two usage styles:\n\n\n\n\nProblem solver\n: for those who like a challenge and learn best be trying to solve the problems by-them-selves (hints optional):\n\n\nAttempt to answer the question by yourself.\n\n\nUse hints when you get stuck.\n\n\nOnce solved, reveal the answer and read through our suggested solution.\n\n\nIts a good idea to read the hints and answer description as they often contain extra useful information.\n\n\n\n\n\n\nBy example\n:  for those who learn by following examples:  \nExpand\n all sections\n\n\nExpand the Answer section at the start of each question and follow along with the commands that are shown and check you get the\n  same (or similar) answers.\n\n\nIts a good idea to read the hints and answer description as they often contain extra useful information.\n\n\n\n\n\n\n\n\nConnecting to HPC\n\n\nTo begin this workshop you will need to connect to an HPC.  Today we will use the LIMS-HPC.  The computer called \nlims-hpc-m\n (m is for \nmaster which is another name for head node) is the one that coordinates all the HPCs tasks.\n\n\nServer details\n:\n\n\n\n\nhost\n: lims-hpc-m.latrobe.edu.au\n\n\nport\n: 6022 \n\n\nusername\n: trainingXX (where XX is a two digit number, provided at workshop)\n\n\npassword\n: PROVIDED at workshop \n\n\n\n\nConnection instructions\n:\n\n\n\n\n\n\nMac OS X / Linux\n\n\n\n\nBoth Mac OS X and Linux come with a version of ssh (called OpenSSH) that can be used from the command line.  To use OpenSSH you must \nfirst start a terminal program on your computer.  On OS X the standard terminal is called Terminal, and it is installed by default. \nOn Linux there are many popular terminal programs including: xterm, gnome-terminal, konsole (if you aren't sure, then xterm is a good \ndefault).  When you've started the terminal you should see a command prompt.  To log into LIMS-HPC, for example, type this command at \nthe prompt and press return (where the word username is replaced with your LIMS-HPC username):\n\n\nssh -p 6022 username@lims-hpc-m.latrobe.edu.au\n\n\n\n\nThe same procedure works for any other machine where you have an account except most other HPCs will not need the \n-p 6022\n \n(which is telling ssh to connect on a non-standard port number).\n\n\nYou may be presented with a message along the lines of:\n\n\nThe authenticity of host 'lims-hpc-m.latrobe.edu.au (131.172.36.150)' can't be  established.\n...\nAre you sure you want to continue connecting (yes/no)?\n\n\n\n\nAlthough you should never ignore a warning, this particular one is nothing to be concerned about; type \nyes\n and then \npress enter\n. \nIf all goes well you will be asked to enter your password.  Assuming you type the correct username and password the system should \nthen display a welcome message, and then present you with a Unix prompt.  If you get this far then you are ready to start entering \nUnix commands and thus begin using the remote computer.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink4\").click(function(e){\n            e.preventDefault();\n            $(\"#showable4\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nWindows\n\n\n\n\nOn Microsoft Windows (Vista, 7, 8) we recommend that you use the PuTTY ssh client.  PuTTY (putty.exe) can be downloaded \nfrom this web page:\n\n\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\n\n\nDocumentation for using PuTTY is here:\n\n\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/docs.html\n\n\nWhen you start PuTTY you should see a window which looks something like this:\n\n\n\n\nTo connect to LIMS-HPC you should enter its hostname into the box entitled \"Host Name (or IP address)\" and \n6022\n in the port, \nthen click on the Open button. All of the settings should remain the same as they were when PuTTY started (which should be the \nsame as they are in the picture above).\n\n\nIn some circumstances you will be presented with a window entitled PuTTY Security Alert. It will say something along the lines \nof \n\"The server's host key is not cached in the registry\"\n. This is nothing to worry about, and you should agree to continue (by \nclicking on Yes). You usually see this message the first time you try to connect to a particular remote computer.\n\n\nIf all goes well, a terminal window will open, showing a prompt with the text \n\"login as:\"\n. An example terminal window is shown \nbelow. You should type your LIMS-HPC username and press enter. After entering your username you will be prompted for your \npassword. Assuming you type the correct username and password the system should then display a welcome message, and then \npresent you with a Unix prompt. If you get this far then you are ready to start entering Unix commands and thus begin using \nthe remote computer.\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink5\").click(function(e){\n            e.preventDefault();\n            $(\"#showable5\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 1: Exploring an HPC\n\n\nAn HPC (short for \u2018High Performance Computer\u2019) is simply a collection of Server Grade computers that work together to solve large problems.\n\n\n\n\nFigure\n: Overview of the computers involved when using an HPC.  Computer systems are shown in rectangles and arrows represent interactions.\n\n\nExercises\n\n\n\n\n\n\n1.1) What is the contact email for your HPC's System Administrator?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWhen you login, you will be presented with a message; this is called the \nMessage Of The Day\n and usually includes lots of useful \ninformation.  On LIMS-HPC this includes a list of useful commands, the last login details for your account and the contact email\nof the system administrator\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink7\").click(function(e){\n            e.preventDefault();\n            $(\"#showable7\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nLIMS-HPC: andrew.robinson@latrobe.edu.au\n\n\nMERRI \n BARCOO: help@vlsci.unimelb.edu.au\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink8\").click(function(e){\n            e.preventDefault();\n            $(\"#showable8\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n1.2) Run the \nsinfo\n command.  How many nodes are there in this hpc?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe \nlims-hpc-[2-4]\n is shorthand for \nlims-hpc-2 lims-hpc-3 and lims-hpc-4\n and \nlims-hpc-[1,5]\n is shorthand for\n\nlims-hpc-1 and lims-hpc-5\n\n\n\n\n\n\nmore\n\n\n\n\nHave a look at the NODELIST column.  Only count each node once.\n\n\n$ sinfo\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ncompute*     up 200-00:00:      3    mix lims-hpc-[2-4]\ncompute*     up 200-00:00:      2   idle lims-hpc-[1,5]\nbigmem       up 200-00:00:      1   idle lims-hpc-1\n8hour        up   08:00:00      3    mix lims-hpc-[2-4]\n8hour        up   08:00:00      3   idle lims-hpc-[1,5],lims-hpc-m\n\n\n\n\nNOTE: the above list will vary depending on the HPC setup.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink11\").click(function(e){\n            e.preventDefault();\n            $(\"#showable11\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable11\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink11\").text(\"more\");\n            } else {\n                $(\"#showablelink11\").text(\"less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink10\").click(function(e){\n            e.preventDefault();\n            $(\"#showable10\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \nsinfo\n command lists all available partitions and the status of each node within them.  If you count up the names of nodes \n(uniquely) you will get the total nodes in this cluster.  \n\n\n\n\nLIMS-HPC: \n6\n (\nlims-hpc-m\n and \nlims-hpc-1\n through \nlims-hpc-5\n)\n\n\nMERRI: \n84\n (\nturpin\n and \nmerri001\n through \nmerri083\n)\n\n\nBARCOO: \n70\n (\nbarcoo001\n through \nbarcoo070\n)\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink12\").click(function(e){\n            e.preventDefault();\n            $(\"#showable12\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAlternate Method\n\n\n\n\nAn automatic (though more complex) way would have been running the following command:\n\n\n$ scontrol show node | grep NodeName | wc -l\n\n\n\n\nWhere:\n\n\n\n\nscontrol show node\n: lists details of all nodes (over multiple lines)\n\n\ngrep NodeName\n: only shows the NodeName line\n\n\nwc -l\n: counts the number of lines\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink13\").click(function(e){\n            e.preventDefault();\n            $(\"#showable13\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 2: Software Modules\n\n\nUp to this point we have been using only standard Unix software packages which are included with Linux/Unix computers.\nLarge computing systems such as HPCs often use a system of modules to load specific software packages (and versions)\nwhen needed for the user.\n\n\nIn this topic we will discover what science software modules (tools) are available and load them ready for analysis.\n\n\nThis topic uses the \nman\n and \nmodule\n commands heavily\n\n\nExercises\n\n\n\n\n\n\n2.1) What happens if you run the \nmodule\n command without any options / arguments?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nLiterally type \nmodule\n and press \nENTER\n key.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink15\").click(function(e){\n            e.preventDefault();\n            $(\"#showable15\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: It prints an error followed by a list of available options / flags\n\n\n$ module\ncmdModule.c(166):ERROR:11: Usage is 'module command  [arguments ...] '\n\n  Modules Release 3.2.10 2012-12-21 (Copyright GNU GPL v2 1991):\n\n  Usage: module [ switches ] [ subcommand ] [subcommand-args ]\n\nSwitches:\n    -H|--help       this usage info\n    -V|--version        modules version \n configuration options\n    -f|--force      force active dependency resolution\n    -t|--terse      terse    format avail and list format\n    -l|--long       long     format avail and list format\n    -h|--human      readable format avail and list format\n    -v|--verbose        enable  verbose messages\n    -s|--silent     disable verbose messages\n    -c|--create     create caches for avail and apropos\n    -i|--icase      case insensitive\n    -u|--userlvl \nlvl\n  set user level to (nov[ice],exp[ert],adv[anced])\n  Available SubCommands and Args:\n    + add|load      modulefile [modulefile ...]\n    + rm|unload     modulefile [modulefile ...]\n    + switch|swap       [modulefile1] modulefile2\n    + display|show      modulefile [modulefile ...]\n    + avail         [modulefile [modulefile ...]]\n    + use [-a|--append] dir [dir ...]\n    + unuse         dir [dir ...]\n    + update\n    + refresh\n    + purge\n    + list\n    + clear\n    + help          [modulefile [modulefile ...]]\n    + whatis        [modulefile [modulefile ...]]\n    + apropos|keyword   string\n    + initadd       modulefile [modulefile ...]\n    + initprepend       modulefile [modulefile ...]\n    + initrm        modulefile [modulefile ...]\n    + initswitch        modulefile1 modulefile2\n    + initlist\n    + initclear\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink16\").click(function(e){\n            e.preventDefault();\n            $(\"#showable16\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.2) How do you find a list of \navailable\n software?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTry the \nmodule\n command.  Don't forget the \nman\n command to get help for a command\n\n\n\n\n\n\nMore\n\n\n\n\nRun the command \nman module\n\n\nUse a search to find out about the \navail\n subcommand (e.g. /avail\nenter\n)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink19\").click(function(e){\n            e.preventDefault();\n            $(\"#showable19\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable19\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink19\").text(\"More\");\n            } else {\n                $(\"#showablelink19\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink18\").click(function(e){\n            e.preventDefault();\n            $(\"#showable18\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe module command is used to show details of software modules (tools).\n\n\nAnswer\n:\n\n\n$ module avail\n\n------------------- /usr/share/Modules/modulefiles --------------------\ndot         module-git  module-info modules     null        use.own\n\n------------------- /usr/local/Modules/modulefiles --------------------\nacana/1.60                         mafft-gcc/7.215\naftrrad/4.1.20150201               malt/0.1.0\narlequin/3.5.1.3                   matplotlib-gcc/1.3.1\n...\n\n\n\n\nThe modules list has been shortened because it is very long.  The modules after the \n/usr/local/Modules/modulefiles\n line\nare the science software; before this are a few built-in ones that you can ignore.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink20\").click(function(e){\n            e.preventDefault();\n            $(\"#showable20\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.3) How many modules are there starting with \u2018\nf\n\u2019?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRun the command \nman module\n\n\nUse a search to find out about the \navail\n subcommand (e.g. /avail\nenter\n).  You may have to press 'n' a few times\nto reach the section where the it describes the \navail\n subcommand.\n\n\n\n\n\n\nMore\n\n\n\n\n\n\nIf an argument is given, then each directory in the MODULEPATH is searched for modulefiles\nwhose pathname match the argument\n\n\n\n\nThis is a quote from the manual page for the module command explaining the avail subcommand.  It uses rather technical \nlanguage but basically it's saying you can put search terms after the avail subcommand when entering the command.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink23\").click(function(e){\n            e.preventDefault();\n            $(\"#showable23\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable23\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink23\").text(\"More\");\n            } else {\n                $(\"#showablelink23\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink22\").click(function(e){\n            e.preventDefault();\n            $(\"#showable22\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe man page told us that we could put a search term after \nmodule avail\n.\n\n\n$ module avail f\n------------------- /usr/local/Modules/modulefiles -------------------\nfasta-gcc/35.4.12            flex-gcc/2.5.39\nfastqc/0.10.1                fontconfig-gcc/2.11.93\nfastStructure-gcc/2013.11.07 freebayes-gcc/20140603\nfastx_toolkit-gcc/0.0.14     freetype-gcc/2.5.3\n\n\n\n\nAnswer\n: 8 modules\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink24\").click(function(e){\n            e.preventDefault();\n            $(\"#showable24\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAlternate Method\n\n\n\n\nTo get a fully automated solution your could do the following command:\n\n\n$ module -l avail 2\n1 | grep \n^f\n | wc -l\n\n\n\n\nWhere:\n\n\n\n\nmodule -l avail\n: lists all modules (in long format, i.e. one per line)\n\n\n2\n1\n: merges output from \nstandard error\n to the \nstandard output\n so it can be feed into grep.  For some reason the\ndevelopers of the \nmodule\n command thought it was a good idea to output the module names on the \nerror\n stream rather than\nthe logical \noutput\n stream.\n\n\ngrep \"^f\"\n: only shows lines beginning with \nf\n\n\nwc -l\n: counts the number of lines\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink25\").click(function(e){\n            e.preventDefault();\n            $(\"#showable25\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.4) Run the \npear\n command (without loading it), does it work?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThis question is very literal\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink27\").click(function(e){\n            e.preventDefault();\n            $(\"#showable27\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ pear\n-bash: pear: command not found\n\n\n\n\nThe error you see is from BASH, it is complaining that it doesn't know anything about a command called 'pear'\n\n\nAnswer\n: No, command not found\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink28\").click(function(e){\n            e.preventDefault();\n            $(\"#showable28\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.5) How would we \nload\n the \npear\n module?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheck the man page for \nmodule\n again and look for a subcommand that might load modules; it is quite literal as well.\n\n\n\n\n\n\nMore\n\n\n\n\nRun the command \nman module\n\n\nUse a search to find out about the \nload\n subcommand (e.g. /load\nenter\n)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink31\").click(function(e){\n            e.preventDefault();\n            $(\"#showable31\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable31\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink31\").text(\"More\");\n            } else {\n                $(\"#showablelink31\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink30\").click(function(e){\n            e.preventDefault();\n            $(\"#showable30\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ module load pear-gcc/0.9.4\n\n\n\n\n-gcc | -intel\n: Lots of modules will have either \n-gcc\n or \n-intel\n after the software name.  This refers to the compiler that\nwas used to make the software.  If you have a choice then usually the \n-intel\n one will be faster.\n\n\n\nVERSIONS\n: \nmodule load pear-gcc\n would have been sufficient to load the module however it is best-practice (in science) to specify the \nversion number so that the answer you get today will be the answer you get in 1 year time.  Some software will produce different results with different versions\nof the software.\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink32\").click(function(e){\n            e.preventDefault();\n            $(\"#showable32\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.6) Now it's \nload\ned, run pear again, what does it do?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe paper citation gives a clue.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink34\").click(function(e){\n            e.preventDefault();\n            $(\"#showable34\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ module load pear-gcc/0.9.4\n[15:59:19] training21@lims-hpc-m ~ $ pear\n ____  _____    _    ____ \n|  _ \\| ____|  / \\  |  _ \\\n| |_) |  _|   / _ \\ | |_) |\n|  __/| |___ / ___ \\|  _ \n\n|_|   |_____/_/   \\_\\_| \\_\\\nPEAR v0.9.4 [August 8, 2014]  - [+bzlib]\n\nCitation - PEAR: a fast and accurate Illumina Paired-End reAd mergeR\nZhang et al (2014) Bioinformatics 30(5): 614-620 | doi:10.1093/bioinformatics/btt593\n\n... REST REMOVED ...\n\n\n\n\nAnswer\n: \"PEAR: a fast and accurate Illumina Paired-End reAd mergeR\" (i.e. merges paired dna reads into a single read when they overlap)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink35\").click(function(e){\n            e.preventDefault();\n            $(\"#showable35\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.7) \nList\n all the loaded modules. How many are there? Where did all the others come from?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse man to find a subcommand that will list currently loaded modules.\n\n\nWe are not really expecting you to be able to answer the 2nd question however if you do get it correct then well-done, that was very tough.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink37\").click(function(e){\n            e.preventDefault();\n            $(\"#showable37\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n \nList\n all the loaded modules. How many are there?\n\n\n$ module list\nCurrently Loaded Modulefiles:\n  1) gmp/5.1.3         3) mpc/1.0.2         5) bzip2-gcc/1.0.6\n  2) mpfr/3.1.2        4) gcc/4.8.2         6) pear-gcc/0.9.4\n\n\n\n\nAnswer\n: 6\n\n\nWhere did all the others come from?\n\n\nYou may have noticed when we loaded \npear-gcc\n the module called \ngcc\n was also loaded; this gives a hint as to where the others come from.\n\n\nAnswer\n: They are \ndependencies\n; that is, they are supporting software that is used by the module we loaded.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink38\").click(function(e){\n            e.preventDefault();\n            $(\"#showable38\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.8) How do you undo the loading of the \npear\n module?  List the loaded modules again, did they all disappear?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nComputer Scientists are not always inventive with naming commands, try something starting with \nun\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink40\").click(function(e){\n            e.preventDefault();\n            $(\"#showable40\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nHow do you undo the loading of the \npear\n module?\n\n\n$ module unload pear-gcc\n\n\n\n\nAnswer\n: the \nunload\n sub-command removes the named module from our current SSH session.\n\n\nList the loaded modules again, did they all disapear?\n\n\nAnswer\n: Unfortunately not, the module command is not smart enough to determine if any of the other modules that were loaded are still\nneeded or not so we will need to do it manually (or see next question) \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink41\").click(function(e){\n            e.preventDefault();\n            $(\"#showable41\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.9) How do you clear ALL loaded modules?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIt's easier than running \nunload\n for all modules\n\n\nThis one isn't that straight forward; try a \nsynonym\n of \nrid\n.\n\n\n\n\n\n\nMore\n\n\n\n\nWe will \npurge\n the list of loaded modules.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink44\").click(function(e){\n            e.preventDefault();\n            $(\"#showable44\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable44\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink44\").text(\"More\");\n            } else {\n                $(\"#showablelink44\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink43\").click(function(e){\n            e.preventDefault();\n            $(\"#showable43\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ module purge \n\n\n\n\nAnswer\n: running the \npurge\n sub-command will unload all modules you loaded (and all dependencies).\n\n\nAlternative\n: if you close your SSH connection and re-open it the new session will be blank as well.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink45\").click(function(e){\n            e.preventDefault();\n            $(\"#showable45\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nLIMS-HPC Specific\n: \n\n\nThe following questions use the \nmoduleinfo\n command; this is only available on LIMS-HPC so if you are using\nanother HPC then you will need to skip ahead to topic 3. \n\n\n\n\n\n\n2.10) What does the \nmoduleinfo\n command do?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTry running it (with \nno\n or only \n-h\n option)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink47\").click(function(e){\n            e.preventDefault();\n            $(\"#showable47\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ moduleinfo -h\nmoduleinfo: support application for environment modules to provide \n            licence and citation information about each module\n...\n\n\n\n\nAnswer\n: provides information about modules\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink48\").click(function(e){\n            e.preventDefault();\n            $(\"#showable48\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.11) Find a \ndescription\n of the \nbiostreamtools\n module\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nView the help information provided when you ran \nmoduleinfo -h\n.  Search for a function that displays a description.\n\n\nUse the \nmodule\n command to find the full name for the \nbiostreamtools\n module\n\n\n\n\n\n\nMore\n\n\n\n\nFunction\n: desc\n\n\nModule\n: biostreamtools-gcc/0.4.0\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink51\").click(function(e){\n            e.preventDefault();\n            $(\"#showable51\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable51\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink51\").text(\"More\");\n            } else {\n                $(\"#showablelink51\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink50\").click(function(e){\n            e.preventDefault();\n            $(\"#showable50\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ moduleinfo desc biostreamtools-gcc/0.4.0\nbiostreamtools-gcc/0.4.0: A collection of fast generic bioinformatics \n                          tools implemented in C++\n\n\n\n\nAnswer\n: A collection of fast generic bioinformatics tools implemented in C++.\n\n\nDisclaimer\n: you may find that the author of this software also created this workshop :-P\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink52\").click(function(e){\n            e.preventDefault();\n            $(\"#showable52\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.12) How would you \ncite\n all currently loaded modules?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nView the help information provided when you ran \nmoduleinfo -h\n.  Search for a function that displays a citation.\n\n\n\n\n\n\nMore\n\n\n\n\nFunction\n: cite\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink55\").click(function(e){\n            e.preventDefault();\n            $(\"#showable55\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable55\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink55\").text(\"More\");\n            } else {\n                $(\"#showablelink55\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink54\").click(function(e){\n            e.preventDefault();\n            $(\"#showable54\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAssuming we had the pear module loaded\n\n\n$ moduleinfo cite\ngmp/5.1.3:                No information recorded\nmpfr/3.1.2:               No information recorded\nmpc/1.0.2:                No information recorded\ngcc/4.8.2:                No information recorded\nbzip2-gcc/1.0.6:          No information recorded\npear-gcc/0.9.4:           J. Zhang, K. Kobert, T. Flouri, A. Stamatakis. \n                          PEAR: A fast and accurate Illimuna Paired-End \n                          reAd mergeR\n\n\n\n\nAnswer\n: using the moduleinfo cite function with no module specified will display info for currently loaded modules.\n\n\nNote\n: When you see \n\"No information recorded\"\n it means that there is no moduleinfo record for that module.\n\n\"nil\"\n it means none was requested (at time software was installed, you should check software's website for updates since).\n\n\n\"No record\"\n means nothing could be found for this record/module\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink56\").click(function(e){\n            e.preventDefault();\n            $(\"#showable56\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.13) The malt module requires a special licence, how can you find out details of this?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nView the help information provided when you ran \nmoduleinfo -h\n.  Search for a function that displays a description.\n\n\nUse the \nmodule\n command to find the full name for the \nmalt\n module.\n\n\n\n\n\n\nMore\n\n\n\n\nVerbose flag tells moduleinfo to give more information if it is available\n\n\nFunction\n: licence\n\n\nModule\n: malt/0.1.0\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink59\").click(function(e){\n            e.preventDefault();\n            $(\"#showable59\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable59\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink59\").text(\"More\");\n            } else {\n                $(\"#showablelink59\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink58\").click(function(e){\n            e.preventDefault();\n            $(\"#showable58\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ moduleinfo -v licence malt/0.1.0\n[[malt/0.1.0]]\n-----[licence]-----\n\nCustom Academic:\n\n1) You need to complete this form (which will send you an email):\n   http://www-ab2.informatik.uni-tuebingen.de/software/megan5/register/index.php\n\n2) Save the emailed licence details to a text file (suggested name:\n   '~/megan-license.txt') on the LIMS-HPC.  NOTE: you need to copy the \n   text from the email starting at line \nUser: ...\n and ending with line\n   \nSignature: ...\n\n\n3) When running the malt-* commands you need to specify this file. (Even \n   for the --help option!!!).  e.g. malt-build -L ~/megan-license.txt ...\n\n\n\n\nAnswer\n: issuing the command \nmoduleinfo -v licence malt/0.1.0\n will display details on how to obtain the special\nlicence for malt.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink60\").click(function(e){\n            e.preventDefault();\n            $(\"#showable60\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 3: Job Submission\n\n\nUp to this point in the workshop (and the previous Unix workshop) we have only used the head-node of the HPC.  While this is ok for small jobs on small\nHPCs like LIMS-HPC, it's unworkable for most jobs.  In this topic we will start to learn how to make use of the rest of the HPCs immense compute power\n\n\nBackground\n\n\nOn conventional Unix computers (such as the HPC headnode) we enter the commands we want to run at the terminal and see the results directly output\nin front of us.  On an HPC this type of computation will only make use of one node, namely, the \nHead Node\n.  To make use of the remaining (\ncompute\n) nodes\nwe need to use the SLURM software package (called an HPC Scheduler).  The purpose of SLURM is to manage all user jobs and distribute the available resources\n(i.e. time on the compute nodes) to each job in a fair manner.  You can think of the SLURM software as like an electronic \ncalendar\n and the user jobs like \n\nmeetings\n.  Users \nsay\n to SLURM \"I want XX CPUS for YY hours\" and SLURM will look at its current bookings and find the next available time it can fit the job.\n\n\nTerminology\n:\n\n\n\n\nNode\n: a server grade computer which is part of an HPC\n\n\nBatch Job\n: a group of one or more related Unix commands that need to be run (executed) for a user.  e.g. run fastqc on all my samples\n\n\nPartition (or Queue)\n: a list of jobs that need to be run.  There is often more than one partition on an HPC which usually have specific requirements \nfor the jobs that can run be added to them.  e.g. \n8hour\n will accept jobs less than or equal to 8hours long\n\n\nRuntime\n: the amount of time a job is expected (or actually) runs\n\n\nResources\n: computation resources that can be given to our jobs in order to run them.  e.g. CPU Cores, Memory, and Time.\n\n\nJob Script\n: a special BASH script that SLURM uses to run a job on our behalf once resources become available.  Job scripts contain details of the \nresources that our commands need to run.\n\n\nOutput (or Results) file\n: When SLURM runs our batch job it will save the results that would normally be output on the terminal to a file; this file \nis called the output file.\n\n\n\n\nExercises\n\n\nUseful Commands\n: \nman, sinfo, cat, sbatch, squeue, cp, module, prime\n\n\n\n\n\n\n3.1) Which nodes could a \u2018compute\u2019 job go on?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTry the \nsinfo\n command\n\n\n\n\n\n\nmore\n\n\n\n\nHave a look at the PARTITION and NODELIST columns.  The \nlims-hpc-[2-4]\n is shorthand for \nlims-hpc-2 lims-hpc-3 \nand lims-hpc-4\n\n\n$ sinfo\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ncompute*     up 200-00:00:      3    mix lims-hpc-[2-4]\ncompute*     up 200-00:00:      2   idle lims-hpc-[1,5]\nbigmem       up 200-00:00:      1   idle lims-hpc-1\n8hour        up   08:00:00      3    mix lims-hpc-[2-4]\n8hour        up   08:00:00      3   idle lims-hpc-[1,5],lims-hpc-m\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink63\").click(function(e){\n            e.preventDefault();\n            $(\"#showable63\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable63\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink63\").text(\"more\");\n            } else {\n                $(\"#showablelink63\").text(\"less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink62\").click(function(e){\n            e.preventDefault();\n            $(\"#showable62\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nThe \nsinfo\n command will list the \npartitions\n.  It summaries the nodes by their current status so there may be more \nthat one line with \ncompute\n in the partition column.  It lists the nodes in shorthand i.e. lims-hpc-[1,3-5] means lims-hpc-1, \nlims-hpc-3, lims-hpc-4, lims-hpc-5.\n\n\nAnswer\n: lims-hpc-1, lims-hpc-2 lims-hpc-3, lims-hpc-4, lims-hpc-5\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink64\").click(function(e){\n            e.preventDefault();\n            $(\"#showable64\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.2) What about an \u20188hour\u2019 job?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse \nsinfo\n again but look at the 8hour rows\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink66\").click(function(e){\n            e.preventDefault();\n            $(\"#showable66\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nAnswer\n: lims-hpc-1, lims-hpc-2 lims-hpc-3, lims-hpc-4, lims-hpc-5, lims-hpc-m\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink67\").click(function(e){\n            e.preventDefault();\n            $(\"#showable67\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nUse the \ncat\n command to view the contents of \ntask01\n, \ntask02\n and \ntask03\n job script\n\n\n\n\n\n\n3.3) How many \ncpu cores\n will each ask for?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nLookup the man page for \nsbatch\n command.  \nsbatch\n's options match up with the \n#SBATCH\n comments at the top of each job \nscript.  Some will be affected by more than one option\n\n\n\n\n\n\nMore\n\n\n\n\nNon-exclusive (shared) jobs\n:\n\n\nIt is \n--cpus-per-task x --ntasks\n but if \n--ntasks\n is not present it defaults to 1 so its \n--cpus-per-task x 1\n\n\nExclusive jobs\n:\n\n\nThe \n--nodes\n options tells us how many nodes we ask for and the \n--exclusive\n option says give us all it has.  This\none is a bit tricky as we don't really know until it runs.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink70\").click(function(e){\n            e.preventDefault();\n            $(\"#showable70\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable70\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink70\").text(\"More\");\n            } else {\n                $(\"#showablelink70\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink69\").click(function(e){\n            e.preventDefault();\n            $(\"#showable69\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nAnswer\n:\n\n\n\n\ntask01: \n1 cpu core\n\n\ntask02: \n6 cpu cores\n\n\ntask03: \nat least 1\n as this has requested all cpu cores on the node its running on (\n--exclusive\n).\n\nHowever, since we know that all nodes on LIMS-HPC have 16, we know it will get 16.\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink71\").click(function(e){\n            e.preventDefault();\n            $(\"#showable71\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.4) What about total memory?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nLookup the man page for \nsbatch\n command.  \nsbatch\n's options match up with the \n#SBATCH\n comments at the top of each job \nscript.  Some will be affected by more than one option\n\n\n\n\n\n\nMore\n\n\n\n\nThe \n--mem-per-cpu\n OR \n--mem\n options are holding the answer to total memory.\n\n\nFor task01 and task02 the calculation is \n--mem-per-cpu x --cpus-per-task x --ntasks\n\n\nFor task03, like with the cpus cores question, we get all the memory available on the node we get allocated\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink74\").click(function(e){\n            e.preventDefault();\n            $(\"#showable74\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable74\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink74\").text(\"More\");\n            } else {\n                $(\"#showablelink74\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink73\").click(function(e){\n            e.preventDefault();\n            $(\"#showable73\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nThe \n--mem-per-cpu\n OR \n--mem\n options are holding the answer to total memory.\n\n\nFor task01 and task02 the calculation is \n--mem-per-cpu x --ntasks x --cpus-per-task\n\n\nFor task03, like with the cpus cores question, we get all the memory available on the node we get allocated\n\n\nNOTE\n: it might be tempting to use the \n--mem\n option on non-exclusive (i.e. \n--shared\n) jobs \nhowever this will \nNOT\n work since the meaning of \n--mem\n is \n\"go on a node with at least X MB of memory\"\n; it does \nnot actually allocate any of it to you so your job will get terminated once it tries to use any memory.\n\n\n\nAnswer\n:\n\n\n\n\ntask01: \n1024MB\n (1GB) i.e. 1024 x 1 x 1\n\n\ntask02: \n12288MB\n (12GB) i.e. 2048 x 3 x 2\n\n\ntask03: \nat least 1024MB\n (1GB). The actual amount could be 128GB (nodes 2 to 5) or 256GB (node 1)\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink75\").click(function(e){\n            e.preventDefault();\n            $(\"#showable75\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.5) How long can each run for?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the \nman sbatch\n command to look up the time specification.  If you search for \n--time\n it will describe the formats it uses (i.e. type \n\n/--time\n and press enter)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink77\").click(function(e){\n            e.preventDefault();\n            $(\"#showable77\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nThe \n--time\n option is what tells slurm how long your job will run for.\n\n\nAnswer\n:\n\n\n\n\ntask01: requests \n30:00 (30mins 0secs)\n, uses ~30secs\n\n\ntask02: requests \n5:00 (5mins 0secs)\n, uses ~5secs\n\n\ntask03: requests \n1:00 (1min 0secs)\n, uses ~30secs\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink78\").click(function(e){\n            e.preventDefault();\n            $(\"#showable78\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.6) Is this maximum, minimum or both runtime?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the \nman sbatch\n command to look up the time specification.  If you search for \n--time\n it will describe the formats it uses (i.e. type \n\n/--time\n and press enter)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink80\").click(function(e){\n            e.preventDefault();\n            $(\"#showable80\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nThis is a maximum time.  Your job may finish early, at which point it hands back the resources for the next job.  However if it \ntries to run longer the HPC will terminate the job.\n\nHINT\n: when selecting a time for your job its best to estimate your job runtime to be close to \nwhat it actually uses as it can help the HPC scheduler 'fit' your job in between other jobs though be careful to allow enough \ntime.  If you think your job may not complete in time you can ask the system administrator of your HPC to add more time.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink81\").click(function(e){\n            e.preventDefault();\n            $(\"#showable81\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.7) Calculate the \n--time\n specification for the following runtimes:\n\n\n\n\n\n\n1h30m:\n--time=\n\n\n1m20s:\n--time=\n\n\n1.5days:\n--time=\n\n\n30m:\n--time=\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink82\").click(function(e){\n            e.preventDefault();\n            $(\"#showable82\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nUse the \nman sbatch\n command to look up the time specification.  If you search for \n--time\n it will describe the formats it uses (i.e. type \n\n/--time\n and press enter)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink83\").click(function(e){\n            e.preventDefault();\n            $(\"#showable83\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\n\n\n1h30m:\n--time=01:30:00 (alternatively: 0-01:30)\n\n\n1m20s:\n--time=01:20\n\n\n1.5days:\n--time=1-12\n\n\n30m:\n--time=30\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink84\").click(function(e){\n            e.preventDefault();\n            $(\"#showable84\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.8) What do the following --time specifications mean?\n\n\n\n\n\n\n--time=12-00:20\n\n\n--time=45\n\n\n--time=00:30\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink85\").click(function(e){\n            e.preventDefault();\n            $(\"#showable85\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nUse the \nman sbatch\n command to look up the time specification.  If you search for \n--time\n it will describe the formats it uses (i.e. type \n\n/--time\n and press enter)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink86\").click(function(e){\n            e.preventDefault();\n            $(\"#showable86\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\n\n\n--time=12-00:20\n12 days and 20 minutes\n\n\n--time=45\n45 minutes\n\n\n--time=00:30\n30 seconds\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink87\").click(function(e){\n            e.preventDefault();\n            $(\"#showable87\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nNow use sbatch to submit the \ntask01\n job:\n\n\n\n\n\n\n\n\n3.9) What job id was your job given?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the man page for the sbatch command.  The \nSynopsis\n at the top will give you an idea how to run it.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink89\").click(function(e){\n            e.preventDefault();\n            $(\"#showable89\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\n$ sbatch task01 \nSubmitted batch job 9998\n\n\n\n\nAnswer\n: it's unique for each job; in the above example mine was \n9998\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink90\").click(function(e){\n            e.preventDefault();\n            $(\"#showable90\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.10) Which node did your job go on?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe \nsqueue\n command shows you the currently running jobs.  If its been longer than 30 seconds since you submitted it you might have to resubmit it.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink92\").click(function(e){\n            e.preventDefault();\n            $(\"#showable92\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nUse the \nsqueue\n command to show all jobs.  Search for your \njobid\n and look in the \nNODELIST\n column.\n\n\nNOTE\n: if there are lots of jobs you can use \nsqueue -u YOUR_USERNAME\n to only show your jobs, where \nYOUR_USERNAME is replaced with your actual username.\n\n\n\n$ sbatch task01\nSubmitted batch job 9999\n$ squeue -u training01\n JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n  9999   compute   task01 training  R       0:05      1 lims-hpc-2\n\n\n\n\nAnswer\n: it's dependent on node availability at time; in the above example mine was \nlims-hpc-2\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink93\").click(function(e){\n            e.preventDefault();\n            $(\"#showable93\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nAdvanced\n\n\n\n\n\n\n3.11) Make a copy of \ntask01\n and call it \nprime_numbers\n.  Make it load the training module and use the \nprime\n command calculate prime \nnumbers for 20 seconds.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nYou can find the \nprime\n command in the \ntraining/1.0\n module\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink95\").click(function(e){\n            e.preventDefault();\n            $(\"#showable95\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nThe key points to change in the task01 script are:\n\n\n\n\nadding the \nmodule load training/1.0\n\n\nreplacing the \nsleep\n (and \necho\n) statements with a call to \nprime 20\n.\n\n\n\n\n#!/bin/bash\n#SBATCH --ntasks=1\n#SBATCH --mem-per-cpu=1024\n#SBATCH --partition=training\n#SBATCH --time=30:00\n\nmodule load training/1.0\n\necho \nStarting at: $(date)\n\nprime 20\necho \nFinished at: $(date)\n\n\n\n\n\nRepeatable Science\n: It's good scientific practice to include the version number of the module when loading it as this will \nensure that the same version is loaded next time you run this script which will mean you get the same results.\n\n\n\nDate your work\n: It's also good practice to include the date command in the output so you have a permanent record \nof when this job was run.  If you have one before and after your main program you will get a record of how long it ran for as well.\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink96\").click(function(e){\n            e.preventDefault();\n            $(\"#showable96\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.12) Submit the job.  What was the \nlargest\n prime number it found in 20 seconds?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe output from the program will provide the results that we are after.  For HPC jobs this will be placed in the \nSLURM output file\n; this is called\n\nslurm-JOBID.out\n where JOBID is replaced by the actual job id.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink98\").click(function(e){\n            e.preventDefault();\n            $(\"#showable98\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nYou should get results similar to below however the actual numbers will vary as amount of computations performed will be affected by \nthe amount of other jobs running on the HPC\n\n\n$ sbatch prime_numbers\nSubmitted batch job 9304\n$ cat slurm-9304.out \nStarting at: Fri May  8 16:11:07 AEST 2015\n\nPrimes:        710119\nLast trial:    10733927\nLargest prime: 10733873\nRuntime:       20 seconds\nFinished at: Fri May  8 16:11:27 AEST 2015\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink99\").click(function(e){\n            e.preventDefault();\n            $(\"#showable99\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.13) Modify your prime_numbers script to notify you via email when it starts and ends.  Submit it again\n\n\n\n\n\n\nDid it start immediately or have some delay?\n\n\nHow long did it actually run for?\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink100\").click(function(e){\n            e.preventDefault();\n            $(\"#showable100\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nThere are two options that you will need to set.  See sbatch manpage for details.\n\n\n\n\n\n\nMore\n\n\n\n\nBoth start with \n--mail\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink102\").click(function(e){\n            e.preventDefault();\n            $(\"#showable102\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable102\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink102\").text(\"More\");\n            } else {\n                $(\"#showablelink102\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink101\").click(function(e){\n            e.preventDefault();\n            $(\"#showable101\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\n#!/bin/bash\n#SBATCH --ntasks=1\n#SBATCH --mem-per-cpu=1024\n#SBATCH --partition=training\n#SBATCH --time=30:00\n#SBATCH --mail-user=name@email.address\n#SBATCH --mail-type=ALL\n\nmodule load training/1.0\n\necho \nStarting at: $(date)\n\nprime 20\necho \nFinished at: $(date)\n\n\n\n\n\nAnswers\n:\n\n\n\n\nDid it start immediately or have some delay?\n The \nQueued time\n value in the subject of start email will tell you how long it waited.\n\n\nHow long did it actually run for?\n The \nRun time\n value in the subject of the end email will tell you how long it ran for which should \nbe ~20 seconds.\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink103\").click(function(e){\n            e.preventDefault();\n            $(\"#showable103\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 4: Job Monitoring\n\n\nIt is often difficult to predict how a software tool may utilise HPC System Resources (CPU/Memory) as it can vary quite widely based \non a number of factors (data set, number of CPU's, processing step etc.).\n\n\nIn this topic we will cover some of the tools that are available to you to \nwatch\n what is happening so we can make better predictions\nin the future.\n\n\nExercises\n\n\n\n\n\n\n4.1) What does the \ntop\n command show?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWhen all else fails, try \nman\n; specifically, the description section\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink105\").click(function(e){\n            e.preventDefault();\n            $(\"#showable105\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\n$ man top\n...\nDESCRIPTION\n       The top program provides a dynamic real-time view of a running system.\n...\n\n\n\n\nAnswer\n: in lay-person terms \n\"Continually updating CPU and Memory usage\"\n \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink106\").click(function(e){\n            e.preventDefault();\n            $(\"#showable106\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nRun the \ntop\n command.  Above the black line it shows some \nsystem-wide statistics\n and below are statistics specific to a single \nprocess (a.k.a, tasks OR software applications).\n\n\n\n\n\n\n4.2) How much total memory does this HPC (head-node) have?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThis would be a system-wide statistic.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink108\").click(function(e){\n            e.preventDefault();\n            $(\"#showable108\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nAnswer\n: If you look at the first value on the \nMem\n line (line 4) it will tell you the total memory on this computer (node).\n\n\n\n\nLIMS-HPC\n: 132085396k or ~128 GigaBytes\n\n\nMERRI\n: 49413840k or ~48 GigaBytes\n\n\nBARCOO\n: 65942760k or ~64 GigaBytes\n\n\n\n\nTo transfer from kB to MB you divide by 1024 and MB to GB by 1024 again.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink109\").click(function(e){\n            e.preventDefault();\n            $(\"#showable109\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.3) What is the current total CPU usage?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThis might be easier to work out what is not used and subtract it from 100%\n\n\n\n\n\n\nMore\n\n\n\n\nIdle\n is another term for not used (or \nid\n for short)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink112\").click(function(e){\n            e.preventDefault();\n            $(\"#showable112\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable112\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink112\").text(\"More\");\n            } else {\n                $(\"#showablelink112\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink111\").click(function(e){\n            e.preventDefault();\n            $(\"#showable111\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nAnswer\n: If you subtract the \n%id\n value (4th value on Cpu(s) line) from 100% you will get the total CPU Usage\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink113\").click(function(e){\n            e.preventDefault();\n            $(\"#showable113\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.4) What column does it appear to be sorting the processes by? Is this \nlow-to-high\n OR \nhigh-to-low\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIts not PID but from time to time it might be ordered sequentially.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink115\").click(function(e){\n            e.preventDefault();\n            $(\"#showable115\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nAnswer\n: \n%CPU\n which gives you an indication of how much CPU time each process uses\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink116\").click(function(e){\n            e.preventDefault();\n            $(\"#showable116\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nAdd up the top few CPU usages of processes and compare this to the system-wide CPU usage at that time.  NOTE: you may need to quit \n\ntop\n (by pressing q) so you can compare before it updates.\n\n\n\n\n\n\n4.5) Why might the numbers disagree?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIt might have something to do with the total number of CPU Cores on the system.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink118\").click(function(e){\n            e.preventDefault();\n            $(\"#showable118\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nAnswer\n: \n%CPU\n column gives you an indication of how much this process uses of 1 CPU Core, where as the system-wide values at the top \nare exactly that, how much the entire system is utilised.  i.e. if you could see all processes in \ntop\n (excluding round errors) \nthey would add up 100% x the number of cpu cores available; on LIMS-HPC this would be 0-1600% in the individual processes and 0-100% \non the system-wide section.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink119\").click(function(e){\n            e.preventDefault();\n            $(\"#showable119\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.6) What command-line flag instructs \ntop\n to sort results by \n%MEM\n?\n\n\n\n\nCan you think of a reason that this might be useful?\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink120\").click(function(e){\n            e.preventDefault();\n            $(\"#showable120\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nUse the \ntop\n manpage.\n\n\n\n\n\n\nMore\n\n\n\n\n\"m is for memory!\"\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink122\").click(function(e){\n            e.preventDefault();\n            $(\"#showable122\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable122\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink122\").text(\"More\");\n            } else {\n                $(\"#showablelink122\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink121\").click(function(e){\n            e.preventDefault();\n            $(\"#showable121\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nAnswer\n: \ntop -m\n will cause \ntop\n to sort the processes by memory usage.\n\n\nCan you think of a reason that this might be useful?\n\n\nYour program might be using a lot of memory and you want to know how much, by sorting by memory will cause your program to stay at the top.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink123\").click(function(e){\n            e.preventDefault();\n            $(\"#showable123\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.7) Run \n\"top -c\"\n.  What does it do?  How might this be helpful?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the \ntop\n manpage.\n\n\n\n\n\n\nMore\n\n\n\n\n\"c is for complete!\"\n\n\n\"c is also for command!\"\n which is another name for program\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink126\").click(function(e){\n            e.preventDefault();\n            $(\"#showable126\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable126\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink126\").text(\"More\");\n            } else {\n                $(\"#showablelink126\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink125\").click(function(e){\n            e.preventDefault();\n            $(\"#showable125\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nWhat does it do?\n\nIt changes the COMMAND column (right most) to show the complete command (or as much that fits) including the flags and options.\n\n\nHow might this be helpful?\n\nSometimes you might be running a lot of commands with the same name that only differ by the command-line options.  In this case it is hard \nto tell which ones are still running unless you use the \n-c\n flag to show the complete command.\n\n\nNOTE\n:\n\nIf \ntop\n is running you can press the \nc\n key to toggle show/hide complete command\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink127\").click(function(e){\n            e.preventDefault();\n            $(\"#showable127\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.8) How can you get \ntop\n to only show your processes?  Why might this be useful?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the \ntop\n manpage.\n\n\n\n\n\n\nMore\n\n\n\n\n\"u is for user[name]!\"\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink130\").click(function(e){\n            e.preventDefault();\n            $(\"#showable130\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable130\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink130\").text(\"More\");\n            } else {\n                $(\"#showablelink130\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink129\").click(function(e){\n            e.preventDefault();\n            $(\"#showable129\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nHow can you get \ntop\n to only show your processes?\n\n\nAnswer 1\n: \ntop -u YOURUSERNAME\n\n\nAnswer 2\n: while running \ntop\n press the \nu\n key, type YOURUSERNAME and press \n key \n\n\nWhy might this be useful?\n\nWhen you are looking to see how much CPU or Memory you are using on a node that has other user jobs running it can be hard\nto quickly identify yours.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink131\").click(function(e){\n            e.preventDefault();\n            $(\"#showable131\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nLIMS-HPC Specific\n\n\nLIMS-HPC has an extra monitoring and graphing tool called Munin.\n\n\nOpen the munin webpage and have a look at the graphs\n\n\nMunin\n: \nhttp://munin-lims.latrobe.edu.au/lims-hpc.html\n\n\n\n\n\n\n4.9) What are the graphs showing?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTake a look at the title on the graphs.  Then the style of graphs.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink133\").click(function(e){\n            e.preventDefault();\n            $(\"#showable133\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nAnswer\n: CPU usage (stacked by type of usage)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink134\").click(function(e){\n            e.preventDefault();\n            $(\"#showable134\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.10) How much is the Compute Node 5 being used currently?\n\n\n\n\n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nYou can either:\n\n\n\n\nestimate this off the right most position on the graph (everything except mid-yellow is the CPU doing something) or \n\n\nlook at the \ncur\n value for \nidle\n and subtract it from 1600 (the maximum value for a 16 core server)\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink136\").click(function(e){\n            e.preventDefault();\n            $(\"#showable136\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.11) And at midday yesterday?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIts easiest to think in reverse (i.e. What is not being used?)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink138\").click(function(e){\n            e.preventDefault();\n            $(\"#showable138\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nYou have to estimate system idle at the point on the graph indicating 12:00 (yesterday).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink139\").click(function(e){\n            e.preventDefault();\n            $(\"#showable139\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 5: All Together\n\n\nThis topic will allow you to put all the skills that you learnt in this workshop to the test.  You might need to refer back to\nthe earlier topics if you have forgotten how to do these tasks.\n\n\nOverview\n:\n\n\n\n\nWrite jobscript\n\n\nLoad/use software module\n\n\nSubmit job\n\n\nMonitor job\n\n\n\n\n\n\nNOTE (for later)\n: to complete this topic from your regular LIMS-HPC account you will need to:\n\n\n\nfirst setup node logins.  This has already been done for your *training* account so no need to do this today\n\nLIMS-HPC Node Login Setup\n\n\n\n\nuse the *compute* partition instead of *training*\n\n\n\n\n\n\n\n\nTask 1: Write a job script\n\n\nWrite a job script that requests the following resources:\n\n\n\n\nFilename\n: monINITIALS.slurm\n\n\nwhere INITIALS is replaced with your initials.  e.g. for me it would be monAR.slurm\n\n\n\n\n\n\nTasks\n: 1 \n\n\nCPUs\n: 1\n\n\nPartition\n: training \n\n\nTime\n: 5 mins \n\n\nMemory\n: 1 GB (remember to specify it in MB)\n\n\n\n\nTask 2: Load/use software module\n\n\nEdit your job script so that it: \n\n\n\n\nLoads the training module\n\n\nRuns the \nfakejob\n command with your name as the first parameter\n\n\n\n\n\n\nNOTE\n: remember good practice here and add the date commands to print the date/time in your output.  You can copy them from the *task01* script.\n\n\n\n\nTask 3: Submit job\n\n\n\n\nUse \nsbatch\n to submit the job to the HPC.\n\n\nNote down the job id it was given (for later).\n\n\nUse squeue (or qs) to check that is started ok.\n\n\nWhen it starts check which compute node it is running on (for the next task).\n\n\n\n\nTask 4: Monitor the job\n\n\nUse the \ntop\n command to check how much CPU and Memory the job is using.  Given that SLURM is running the job on your behalf on one of the compute \nnodes, \ntop\n wont be able to see the job.  To be able to use top, you will first need to login to the compute node the is running your job.\n\n\nTo login:\n\n\n$ ssh lims-hpc-X\n\n\n\n\nWhere X is the actual node number you were allocated (See task 3.4).\n\n\nYou are now connected from your computer to lims-hpc-m which is connected to lims-hpc-X.\n\n\n+---------------+            +------------+            +------------+\n| YOUR COMPUTER | -- SSH --\n | LIMS-HPC-M | -- SSH --\n | LIMS-HPC-X |\n+---------------+            +------------+            +------------+\n\n\n\n\nYou can tell which node you are on by the text in the prompt\n\n\n[10:00:06] USERNAME@lims-hpc-m ~ $ \n\nChanges to:\n\n[10:06:05] USERNAME@lims-hpc-1 ~ $\n\n\n\n\nOnce logged in to the relevent compute node you can run \ntop\n to view you job.  Remember the \nu\n and \nc\n options we learnt earlier; they will be helpful \nhere when everyone is running the same jobs.\n\n\n\n\n\n\n\n\nHow does the CPU and Memory usage change over time?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIt should vary (within the limits you set in the job script)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink141\").click(function(e){\n            e.preventDefault();\n            $(\"#showable141\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nShow \nAnswer\n\n\n\n\nThe \nfakejob\n program should vary its CPU usage between 50 and 100% CPU and 500 and 1000MB of memory (on lims-hpc-[m,2-5] this will equate to 0.4 to 0.8%)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink142\").click(function(e){\n            e.preventDefault();\n            $(\"#showable142\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nFinished\n\n\nWell done, you learnt a lot over the last 5 topics and you should be proud of your achievement; it \nwas a lot to take in.\n\n\nFrom here you should be confortable to begin submitting real jobs to the HPC (in your real account, \nnot the training one).\n\n\nYou will no-doubt forget a lot of what you learnt here so I encourage you to save a link to this \nWorkshop for later reference.\n\n\nThank you for your attendance, please don't forget to complete the VLSCI training survey and give it\nback to the Workshop facilitators.", 
            "title": "Introduction to HPC"
        }, 
        {
            "location": "/tutorials/hpc/#high-performance-computing", 
            "text": "A hands-on-workshop covering High-Performance Computing (HPC)", 
            "title": "High-Performance Computing"
        }, 
        {
            "location": "/tutorials/hpc/#how-to-use-this-workshop", 
            "text": "The workshop is broken up into a number of  Topics  each focusing on a particular aspect of HPCs.  You should take a short break between \neach to refresh and relax before tackling the next.  Topic s may start with some background followed by a number of  exercises .  Each  exercise  begins with a  question , then \nsometimes a  hint  (or two) and finishes with the suggested  answer .  Question  An example question looks like:    What is the Answer to Life?    (function(w,d,u){w.readyQ=[];w.bindReadyQ=[];function p(x,y){if(x==\"ready\"){w.bindReadyQ.push(y);}else{w.readyQ.push(x);}};var a={ready:p,bind:p};w.$=w.jQuery=function(f){if(f===d||f===u){return a}else{p(f)}}})(window,document)  Hint  Depending on how much of a challenge you like, you may choose to use hints.  Even if you work out the answer without hints, its a good \nidea to read the hints afterwards because they contain extra information that is good to know.  Note:  hint s may be staged, that is, there may be a  more  section within a hint for further hints    Hint   - click here to reveal hint   What is the answer to everything?  As featured in  \"The Hitchhiker's Guide to the Galaxy\"    More   - and here to show more   It is probably a two digit number     \n    $(document).ready(function(){\n        $(\"#showablelink2\").click(function(e){\n            e.preventDefault();\n            $(\"#showable2\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable2\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink2\").text(\"More\");\n            } else {\n                $(\"#showablelink2\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink1\").click(function(e){\n            e.preventDefault();\n            $(\"#showable1\").toggleClass(\"showable-hidden\");\n        });\n    });\n      Answer  Once you have worked out the answer to the question expand the Answer section to check if you got it correct.    Answer   - click here to reveal answer   Answer : 42  Ref:  Number 42 (Wikipedia)     \n    $(document).ready(function(){\n        $(\"#showablelink3\").click(function(e){\n            e.preventDefault();\n            $(\"#showable3\").toggleClass(\"showable-hidden\");\n        });\n    });\n      Usage Style  This workshop attempts to cater for two usage styles:   Problem solver : for those who like a challenge and learn best be trying to solve the problems by-them-selves (hints optional):  Attempt to answer the question by yourself.  Use hints when you get stuck.  Once solved, reveal the answer and read through our suggested solution.  Its a good idea to read the hints and answer description as they often contain extra useful information.    By example :  for those who learn by following examples:   Expand  all sections  Expand the Answer section at the start of each question and follow along with the commands that are shown and check you get the\n  same (or similar) answers.  Its a good idea to read the hints and answer description as they often contain extra useful information.     Connecting to HPC  To begin this workshop you will need to connect to an HPC.  Today we will use the LIMS-HPC.  The computer called  lims-hpc-m  (m is for \nmaster which is another name for head node) is the one that coordinates all the HPCs tasks.  Server details :   host : lims-hpc-m.latrobe.edu.au  port : 6022   username : trainingXX (where XX is a two digit number, provided at workshop)  password : PROVIDED at workshop    Connection instructions :    Mac OS X / Linux   Both Mac OS X and Linux come with a version of ssh (called OpenSSH) that can be used from the command line.  To use OpenSSH you must \nfirst start a terminal program on your computer.  On OS X the standard terminal is called Terminal, and it is installed by default. \nOn Linux there are many popular terminal programs including: xterm, gnome-terminal, konsole (if you aren't sure, then xterm is a good \ndefault).  When you've started the terminal you should see a command prompt.  To log into LIMS-HPC, for example, type this command at \nthe prompt and press return (where the word username is replaced with your LIMS-HPC username):  ssh -p 6022 username@lims-hpc-m.latrobe.edu.au  The same procedure works for any other machine where you have an account except most other HPCs will not need the  -p 6022  \n(which is telling ssh to connect on a non-standard port number).  You may be presented with a message along the lines of:  The authenticity of host 'lims-hpc-m.latrobe.edu.au (131.172.36.150)' can't be  established.\n...\nAre you sure you want to continue connecting (yes/no)?  Although you should never ignore a warning, this particular one is nothing to be concerned about; type  yes  and then  press enter . \nIf all goes well you will be asked to enter your password.  Assuming you type the correct username and password the system should \nthen display a welcome message, and then present you with a Unix prompt.  If you get this far then you are ready to start entering \nUnix commands and thus begin using the remote computer.     \n    $(document).ready(function(){\n        $(\"#showablelink4\").click(function(e){\n            e.preventDefault();\n            $(\"#showable4\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Windows   On Microsoft Windows (Vista, 7, 8) we recommend that you use the PuTTY ssh client.  PuTTY (putty.exe) can be downloaded \nfrom this web page:  http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html  Documentation for using PuTTY is here:  http://www.chiark.greenend.org.uk/~sgtatham/putty/docs.html  When you start PuTTY you should see a window which looks something like this:   To connect to LIMS-HPC you should enter its hostname into the box entitled \"Host Name (or IP address)\" and  6022  in the port, \nthen click on the Open button. All of the settings should remain the same as they were when PuTTY started (which should be the \nsame as they are in the picture above).  In some circumstances you will be presented with a window entitled PuTTY Security Alert. It will say something along the lines \nof  \"The server's host key is not cached in the registry\" . This is nothing to worry about, and you should agree to continue (by \nclicking on Yes). You usually see this message the first time you try to connect to a particular remote computer.  If all goes well, a terminal window will open, showing a prompt with the text  \"login as:\" . An example terminal window is shown \nbelow. You should type your LIMS-HPC username and press enter. After entering your username you will be prompted for your \npassword. Assuming you type the correct username and password the system should then display a welcome message, and then \npresent you with a Unix prompt. If you get this far then you are ready to start entering Unix commands and thus begin using \nthe remote computer.      \n    $(document).ready(function(){\n        $(\"#showablelink5\").click(function(e){\n            e.preventDefault();\n            $(\"#showable5\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "How to use this workshop"
        }, 
        {
            "location": "/tutorials/hpc/#topic-1-exploring-an-hpc", 
            "text": "An HPC (short for \u2018High Performance Computer\u2019) is simply a collection of Server Grade computers that work together to solve large problems.   Figure : Overview of the computers involved when using an HPC.  Computer systems are shown in rectangles and arrows represent interactions.  Exercises    1.1) What is the contact email for your HPC's System Administrator?      Hint   When you login, you will be presented with a message; this is called the  Message Of The Day  and usually includes lots of useful \ninformation.  On LIMS-HPC this includes a list of useful commands, the last login details for your account and the contact email\nof the system administrator     \n    $(document).ready(function(){\n        $(\"#showablelink7\").click(function(e){\n            e.preventDefault();\n            $(\"#showable7\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer    LIMS-HPC: andrew.robinson@latrobe.edu.au  MERRI   BARCOO: help@vlsci.unimelb.edu.au      \n    $(document).ready(function(){\n        $(\"#showablelink8\").click(function(e){\n            e.preventDefault();\n            $(\"#showable8\").toggleClass(\"showable-hidden\");\n        });\n    });\n         1.2) Run the  sinfo  command.  How many nodes are there in this hpc?      Hint   The  lims-hpc-[2-4]  is shorthand for  lims-hpc-2 lims-hpc-3 and lims-hpc-4  and  lims-hpc-[1,5]  is shorthand for lims-hpc-1 and lims-hpc-5    more   Have a look at the NODELIST column.  Only count each node once.  $ sinfo\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ncompute*     up 200-00:00:      3    mix lims-hpc-[2-4]\ncompute*     up 200-00:00:      2   idle lims-hpc-[1,5]\nbigmem       up 200-00:00:      1   idle lims-hpc-1\n8hour        up   08:00:00      3    mix lims-hpc-[2-4]\n8hour        up   08:00:00      3   idle lims-hpc-[1,5],lims-hpc-m  NOTE: the above list will vary depending on the HPC setup.     \n    $(document).ready(function(){\n        $(\"#showablelink11\").click(function(e){\n            e.preventDefault();\n            $(\"#showable11\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable11\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink11\").text(\"more\");\n            } else {\n                $(\"#showablelink11\").text(\"less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink10\").click(function(e){\n            e.preventDefault();\n            $(\"#showable10\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The  sinfo  command lists all available partitions and the status of each node within them.  If you count up the names of nodes \n(uniquely) you will get the total nodes in this cluster.     LIMS-HPC:  6  ( lims-hpc-m  and  lims-hpc-1  through  lims-hpc-5 )  MERRI:  84  ( turpin  and  merri001  through  merri083 )  BARCOO:  70  ( barcoo001  through  barcoo070 )      \n    $(document).ready(function(){\n        $(\"#showablelink12\").click(function(e){\n            e.preventDefault();\n            $(\"#showable12\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Alternate Method   An automatic (though more complex) way would have been running the following command:  $ scontrol show node | grep NodeName | wc -l  Where:   scontrol show node : lists details of all nodes (over multiple lines)  grep NodeName : only shows the NodeName line  wc -l : counts the number of lines      \n    $(document).ready(function(){\n        $(\"#showablelink13\").click(function(e){\n            e.preventDefault();\n            $(\"#showable13\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 1: Exploring an HPC"
        }, 
        {
            "location": "/tutorials/hpc/#topic-2-software-modules", 
            "text": "Up to this point we have been using only standard Unix software packages which are included with Linux/Unix computers.\nLarge computing systems such as HPCs often use a system of modules to load specific software packages (and versions)\nwhen needed for the user.  In this topic we will discover what science software modules (tools) are available and load them ready for analysis.  This topic uses the  man  and  module  commands heavily  Exercises    2.1) What happens if you run the  module  command without any options / arguments?      Hint   Literally type  module  and press  ENTER  key.     \n    $(document).ready(function(){\n        $(\"#showablelink15\").click(function(e){\n            e.preventDefault();\n            $(\"#showable15\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer : It prints an error followed by a list of available options / flags  $ module\ncmdModule.c(166):ERROR:11: Usage is 'module command  [arguments ...] '\n\n  Modules Release 3.2.10 2012-12-21 (Copyright GNU GPL v2 1991):\n\n  Usage: module [ switches ] [ subcommand ] [subcommand-args ]\n\nSwitches:\n    -H|--help       this usage info\n    -V|--version        modules version   configuration options\n    -f|--force      force active dependency resolution\n    -t|--terse      terse    format avail and list format\n    -l|--long       long     format avail and list format\n    -h|--human      readable format avail and list format\n    -v|--verbose        enable  verbose messages\n    -s|--silent     disable verbose messages\n    -c|--create     create caches for avail and apropos\n    -i|--icase      case insensitive\n    -u|--userlvl  lvl   set user level to (nov[ice],exp[ert],adv[anced])\n  Available SubCommands and Args:\n    + add|load      modulefile [modulefile ...]\n    + rm|unload     modulefile [modulefile ...]\n    + switch|swap       [modulefile1] modulefile2\n    + display|show      modulefile [modulefile ...]\n    + avail         [modulefile [modulefile ...]]\n    + use [-a|--append] dir [dir ...]\n    + unuse         dir [dir ...]\n    + update\n    + refresh\n    + purge\n    + list\n    + clear\n    + help          [modulefile [modulefile ...]]\n    + whatis        [modulefile [modulefile ...]]\n    + apropos|keyword   string\n    + initadd       modulefile [modulefile ...]\n    + initprepend       modulefile [modulefile ...]\n    + initrm        modulefile [modulefile ...]\n    + initswitch        modulefile1 modulefile2\n    + initlist\n    + initclear     \n    $(document).ready(function(){\n        $(\"#showablelink16\").click(function(e){\n            e.preventDefault();\n            $(\"#showable16\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.2) How do you find a list of  available  software?      Hint   Try the  module  command.  Don't forget the  man  command to get help for a command    More   Run the command  man module  Use a search to find out about the  avail  subcommand (e.g. /avail enter )     \n    $(document).ready(function(){\n        $(\"#showablelink19\").click(function(e){\n            e.preventDefault();\n            $(\"#showable19\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable19\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink19\").text(\"More\");\n            } else {\n                $(\"#showablelink19\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink18\").click(function(e){\n            e.preventDefault();\n            $(\"#showable18\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The module command is used to show details of software modules (tools).  Answer :  $ module avail\n\n------------------- /usr/share/Modules/modulefiles --------------------\ndot         module-git  module-info modules     null        use.own\n\n------------------- /usr/local/Modules/modulefiles --------------------\nacana/1.60                         mafft-gcc/7.215\naftrrad/4.1.20150201               malt/0.1.0\narlequin/3.5.1.3                   matplotlib-gcc/1.3.1\n...  The modules list has been shortened because it is very long.  The modules after the  /usr/local/Modules/modulefiles  line\nare the science software; before this are a few built-in ones that you can ignore.     \n    $(document).ready(function(){\n        $(\"#showablelink20\").click(function(e){\n            e.preventDefault();\n            $(\"#showable20\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.3) How many modules are there starting with \u2018 f \u2019?      Hint   Run the command  man module  Use a search to find out about the  avail  subcommand (e.g. /avail enter ).  You may have to press 'n' a few times\nto reach the section where the it describes the  avail  subcommand.    More    If an argument is given, then each directory in the MODULEPATH is searched for modulefiles\nwhose pathname match the argument   This is a quote from the manual page for the module command explaining the avail subcommand.  It uses rather technical \nlanguage but basically it's saying you can put search terms after the avail subcommand when entering the command.     \n    $(document).ready(function(){\n        $(\"#showablelink23\").click(function(e){\n            e.preventDefault();\n            $(\"#showable23\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable23\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink23\").text(\"More\");\n            } else {\n                $(\"#showablelink23\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink22\").click(function(e){\n            e.preventDefault();\n            $(\"#showable22\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The man page told us that we could put a search term after  module avail .  $ module avail f\n------------------- /usr/local/Modules/modulefiles -------------------\nfasta-gcc/35.4.12            flex-gcc/2.5.39\nfastqc/0.10.1                fontconfig-gcc/2.11.93\nfastStructure-gcc/2013.11.07 freebayes-gcc/20140603\nfastx_toolkit-gcc/0.0.14     freetype-gcc/2.5.3  Answer : 8 modules     \n    $(document).ready(function(){\n        $(\"#showablelink24\").click(function(e){\n            e.preventDefault();\n            $(\"#showable24\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Alternate Method   To get a fully automated solution your could do the following command:  $ module -l avail 2 1 | grep  ^f  | wc -l  Where:   module -l avail : lists all modules (in long format, i.e. one per line)  2 1 : merges output from  standard error  to the  standard output  so it can be feed into grep.  For some reason the\ndevelopers of the  module  command thought it was a good idea to output the module names on the  error  stream rather than\nthe logical  output  stream.  grep \"^f\" : only shows lines beginning with  f  wc -l : counts the number of lines      \n    $(document).ready(function(){\n        $(\"#showablelink25\").click(function(e){\n            e.preventDefault();\n            $(\"#showable25\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.4) Run the  pear  command (without loading it), does it work?      Hint   This question is very literal     \n    $(document).ready(function(){\n        $(\"#showablelink27\").click(function(e){\n            e.preventDefault();\n            $(\"#showable27\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ pear\n-bash: pear: command not found  The error you see is from BASH, it is complaining that it doesn't know anything about a command called 'pear'  Answer : No, command not found     \n    $(document).ready(function(){\n        $(\"#showablelink28\").click(function(e){\n            e.preventDefault();\n            $(\"#showable28\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.5) How would we  load  the  pear  module?      Hint   Check the man page for  module  again and look for a subcommand that might load modules; it is quite literal as well.    More   Run the command  man module  Use a search to find out about the  load  subcommand (e.g. /load enter )     \n    $(document).ready(function(){\n        $(\"#showablelink31\").click(function(e){\n            e.preventDefault();\n            $(\"#showable31\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable31\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink31\").text(\"More\");\n            } else {\n                $(\"#showablelink31\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink30\").click(function(e){\n            e.preventDefault();\n            $(\"#showable30\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ module load pear-gcc/0.9.4  -gcc | -intel : Lots of modules will have either  -gcc  or  -intel  after the software name.  This refers to the compiler that\nwas used to make the software.  If you have a choice then usually the  -intel  one will be faster.  VERSIONS :  module load pear-gcc  would have been sufficient to load the module however it is best-practice (in science) to specify the \nversion number so that the answer you get today will be the answer you get in 1 year time.  Some software will produce different results with different versions\nof the software.     \n    $(document).ready(function(){\n        $(\"#showablelink32\").click(function(e){\n            e.preventDefault();\n            $(\"#showable32\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.6) Now it's  load ed, run pear again, what does it do?      Hint   The paper citation gives a clue.     \n    $(document).ready(function(){\n        $(\"#showablelink34\").click(function(e){\n            e.preventDefault();\n            $(\"#showable34\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ module load pear-gcc/0.9.4\n[15:59:19] training21@lims-hpc-m ~ $ pear\n ____  _____    _    ____ \n|  _ \\| ____|  / \\  |  _ \\\n| |_) |  _|   / _ \\ | |_) |\n|  __/| |___ / ___ \\|  _  \n|_|   |_____/_/   \\_\\_| \\_\\\nPEAR v0.9.4 [August 8, 2014]  - [+bzlib]\n\nCitation - PEAR: a fast and accurate Illumina Paired-End reAd mergeR\nZhang et al (2014) Bioinformatics 30(5): 614-620 | doi:10.1093/bioinformatics/btt593\n\n... REST REMOVED ...  Answer : \"PEAR: a fast and accurate Illumina Paired-End reAd mergeR\" (i.e. merges paired dna reads into a single read when they overlap)     \n    $(document).ready(function(){\n        $(\"#showablelink35\").click(function(e){\n            e.preventDefault();\n            $(\"#showable35\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.7)  List  all the loaded modules. How many are there? Where did all the others come from?      Hint   Use man to find a subcommand that will list currently loaded modules.  We are not really expecting you to be able to answer the 2nd question however if you do get it correct then well-done, that was very tough.     \n    $(document).ready(function(){\n        $(\"#showablelink37\").click(function(e){\n            e.preventDefault();\n            $(\"#showable37\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer     List  all the loaded modules. How many are there?  $ module list\nCurrently Loaded Modulefiles:\n  1) gmp/5.1.3         3) mpc/1.0.2         5) bzip2-gcc/1.0.6\n  2) mpfr/3.1.2        4) gcc/4.8.2         6) pear-gcc/0.9.4  Answer : 6  Where did all the others come from?  You may have noticed when we loaded  pear-gcc  the module called  gcc  was also loaded; this gives a hint as to where the others come from.  Answer : They are  dependencies ; that is, they are supporting software that is used by the module we loaded.     \n    $(document).ready(function(){\n        $(\"#showablelink38\").click(function(e){\n            e.preventDefault();\n            $(\"#showable38\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.8) How do you undo the loading of the  pear  module?  List the loaded modules again, did they all disappear?      Hint   Computer Scientists are not always inventive with naming commands, try something starting with  un     \n    $(document).ready(function(){\n        $(\"#showablelink40\").click(function(e){\n            e.preventDefault();\n            $(\"#showable40\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   How do you undo the loading of the  pear  module?  $ module unload pear-gcc  Answer : the  unload  sub-command removes the named module from our current SSH session.  List the loaded modules again, did they all disapear?  Answer : Unfortunately not, the module command is not smart enough to determine if any of the other modules that were loaded are still\nneeded or not so we will need to do it manually (or see next question)      \n    $(document).ready(function(){\n        $(\"#showablelink41\").click(function(e){\n            e.preventDefault();\n            $(\"#showable41\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.9) How do you clear ALL loaded modules?      Hint   It's easier than running  unload  for all modules  This one isn't that straight forward; try a  synonym  of  rid .    More   We will  purge  the list of loaded modules.     \n    $(document).ready(function(){\n        $(\"#showablelink44\").click(function(e){\n            e.preventDefault();\n            $(\"#showable44\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable44\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink44\").text(\"More\");\n            } else {\n                $(\"#showablelink44\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink43\").click(function(e){\n            e.preventDefault();\n            $(\"#showable43\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ module purge   Answer : running the  purge  sub-command will unload all modules you loaded (and all dependencies).  Alternative : if you close your SSH connection and re-open it the new session will be blank as well.     \n    $(document).ready(function(){\n        $(\"#showablelink45\").click(function(e){\n            e.preventDefault();\n            $(\"#showable45\").toggleClass(\"showable-hidden\");\n        });\n    });\n       LIMS-HPC Specific :   The following questions use the  moduleinfo  command; this is only available on LIMS-HPC so if you are using\nanother HPC then you will need to skip ahead to topic 3.     2.10) What does the  moduleinfo  command do?      Hint   Try running it (with  no  or only  -h  option)     \n    $(document).ready(function(){\n        $(\"#showablelink47\").click(function(e){\n            e.preventDefault();\n            $(\"#showable47\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ moduleinfo -h\nmoduleinfo: support application for environment modules to provide \n            licence and citation information about each module\n...  Answer : provides information about modules     \n    $(document).ready(function(){\n        $(\"#showablelink48\").click(function(e){\n            e.preventDefault();\n            $(\"#showable48\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.11) Find a  description  of the  biostreamtools  module      Hint   View the help information provided when you ran  moduleinfo -h .  Search for a function that displays a description.  Use the  module  command to find the full name for the  biostreamtools  module    More   Function : desc  Module : biostreamtools-gcc/0.4.0     \n    $(document).ready(function(){\n        $(\"#showablelink51\").click(function(e){\n            e.preventDefault();\n            $(\"#showable51\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable51\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink51\").text(\"More\");\n            } else {\n                $(\"#showablelink51\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink50\").click(function(e){\n            e.preventDefault();\n            $(\"#showable50\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ moduleinfo desc biostreamtools-gcc/0.4.0\nbiostreamtools-gcc/0.4.0: A collection of fast generic bioinformatics \n                          tools implemented in C++  Answer : A collection of fast generic bioinformatics tools implemented in C++.  Disclaimer : you may find that the author of this software also created this workshop :-P     \n    $(document).ready(function(){\n        $(\"#showablelink52\").click(function(e){\n            e.preventDefault();\n            $(\"#showable52\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.12) How would you  cite  all currently loaded modules?      Hint   View the help information provided when you ran  moduleinfo -h .  Search for a function that displays a citation.    More   Function : cite     \n    $(document).ready(function(){\n        $(\"#showablelink55\").click(function(e){\n            e.preventDefault();\n            $(\"#showable55\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable55\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink55\").text(\"More\");\n            } else {\n                $(\"#showablelink55\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink54\").click(function(e){\n            e.preventDefault();\n            $(\"#showable54\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Assuming we had the pear module loaded  $ moduleinfo cite\ngmp/5.1.3:                No information recorded\nmpfr/3.1.2:               No information recorded\nmpc/1.0.2:                No information recorded\ngcc/4.8.2:                No information recorded\nbzip2-gcc/1.0.6:          No information recorded\npear-gcc/0.9.4:           J. Zhang, K. Kobert, T. Flouri, A. Stamatakis. \n                          PEAR: A fast and accurate Illimuna Paired-End \n                          reAd mergeR  Answer : using the moduleinfo cite function with no module specified will display info for currently loaded modules.  Note : When you see  \"No information recorded\"  it means that there is no moduleinfo record for that module. \"nil\"  it means none was requested (at time software was installed, you should check software's website for updates since).  \"No record\"  means nothing could be found for this record/module     \n    $(document).ready(function(){\n        $(\"#showablelink56\").click(function(e){\n            e.preventDefault();\n            $(\"#showable56\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.13) The malt module requires a special licence, how can you find out details of this?      Hint   View the help information provided when you ran  moduleinfo -h .  Search for a function that displays a description.  Use the  module  command to find the full name for the  malt  module.    More   Verbose flag tells moduleinfo to give more information if it is available  Function : licence  Module : malt/0.1.0     \n    $(document).ready(function(){\n        $(\"#showablelink59\").click(function(e){\n            e.preventDefault();\n            $(\"#showable59\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable59\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink59\").text(\"More\");\n            } else {\n                $(\"#showablelink59\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink58\").click(function(e){\n            e.preventDefault();\n            $(\"#showable58\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ moduleinfo -v licence malt/0.1.0\n[[malt/0.1.0]]\n-----[licence]-----\n\nCustom Academic:\n\n1) You need to complete this form (which will send you an email):\n   http://www-ab2.informatik.uni-tuebingen.de/software/megan5/register/index.php\n\n2) Save the emailed licence details to a text file (suggested name:\n   '~/megan-license.txt') on the LIMS-HPC.  NOTE: you need to copy the \n   text from the email starting at line  User: ...  and ending with line\n    Signature: ... \n\n3) When running the malt-* commands you need to specify this file. (Even \n   for the --help option!!!).  e.g. malt-build -L ~/megan-license.txt ...  Answer : issuing the command  moduleinfo -v licence malt/0.1.0  will display details on how to obtain the special\nlicence for malt.     \n    $(document).ready(function(){\n        $(\"#showablelink60\").click(function(e){\n            e.preventDefault();\n            $(\"#showable60\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 2: Software Modules"
        }, 
        {
            "location": "/tutorials/hpc/#topic-3-job-submission", 
            "text": "Up to this point in the workshop (and the previous Unix workshop) we have only used the head-node of the HPC.  While this is ok for small jobs on small\nHPCs like LIMS-HPC, it's unworkable for most jobs.  In this topic we will start to learn how to make use of the rest of the HPCs immense compute power  Background  On conventional Unix computers (such as the HPC headnode) we enter the commands we want to run at the terminal and see the results directly output\nin front of us.  On an HPC this type of computation will only make use of one node, namely, the  Head Node .  To make use of the remaining ( compute ) nodes\nwe need to use the SLURM software package (called an HPC Scheduler).  The purpose of SLURM is to manage all user jobs and distribute the available resources\n(i.e. time on the compute nodes) to each job in a fair manner.  You can think of the SLURM software as like an electronic  calendar  and the user jobs like  meetings .  Users  say  to SLURM \"I want XX CPUS for YY hours\" and SLURM will look at its current bookings and find the next available time it can fit the job.  Terminology :   Node : a server grade computer which is part of an HPC  Batch Job : a group of one or more related Unix commands that need to be run (executed) for a user.  e.g. run fastqc on all my samples  Partition (or Queue) : a list of jobs that need to be run.  There is often more than one partition on an HPC which usually have specific requirements \nfor the jobs that can run be added to them.  e.g.  8hour  will accept jobs less than or equal to 8hours long  Runtime : the amount of time a job is expected (or actually) runs  Resources : computation resources that can be given to our jobs in order to run them.  e.g. CPU Cores, Memory, and Time.  Job Script : a special BASH script that SLURM uses to run a job on our behalf once resources become available.  Job scripts contain details of the \nresources that our commands need to run.  Output (or Results) file : When SLURM runs our batch job it will save the results that would normally be output on the terminal to a file; this file \nis called the output file.   Exercises  Useful Commands :  man, sinfo, cat, sbatch, squeue, cp, module, prime    3.1) Which nodes could a \u2018compute\u2019 job go on?      Hint   Try the  sinfo  command    more   Have a look at the PARTITION and NODELIST columns.  The  lims-hpc-[2-4]  is shorthand for  lims-hpc-2 lims-hpc-3 \nand lims-hpc-4  $ sinfo\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ncompute*     up 200-00:00:      3    mix lims-hpc-[2-4]\ncompute*     up 200-00:00:      2   idle lims-hpc-[1,5]\nbigmem       up 200-00:00:      1   idle lims-hpc-1\n8hour        up   08:00:00      3    mix lims-hpc-[2-4]\n8hour        up   08:00:00      3   idle lims-hpc-[1,5],lims-hpc-m     \n    $(document).ready(function(){\n        $(\"#showablelink63\").click(function(e){\n            e.preventDefault();\n            $(\"#showable63\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable63\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink63\").text(\"more\");\n            } else {\n                $(\"#showablelink63\").text(\"less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink62\").click(function(e){\n            e.preventDefault();\n            $(\"#showable62\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   The  sinfo  command will list the  partitions .  It summaries the nodes by their current status so there may be more \nthat one line with  compute  in the partition column.  It lists the nodes in shorthand i.e. lims-hpc-[1,3-5] means lims-hpc-1, \nlims-hpc-3, lims-hpc-4, lims-hpc-5.  Answer : lims-hpc-1, lims-hpc-2 lims-hpc-3, lims-hpc-4, lims-hpc-5     \n    $(document).ready(function(){\n        $(\"#showablelink64\").click(function(e){\n            e.preventDefault();\n            $(\"#showable64\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.2) What about an \u20188hour\u2019 job?      Hint   Use  sinfo  again but look at the 8hour rows     \n    $(document).ready(function(){\n        $(\"#showablelink66\").click(function(e){\n            e.preventDefault();\n            $(\"#showable66\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   Answer : lims-hpc-1, lims-hpc-2 lims-hpc-3, lims-hpc-4, lims-hpc-5, lims-hpc-m     \n    $(document).ready(function(){\n        $(\"#showablelink67\").click(function(e){\n            e.preventDefault();\n            $(\"#showable67\").toggleClass(\"showable-hidden\");\n        });\n    });\n       Use the  cat  command to view the contents of  task01 ,  task02  and  task03  job script    3.3) How many  cpu cores  will each ask for?      Hint   Lookup the man page for  sbatch  command.   sbatch 's options match up with the  #SBATCH  comments at the top of each job \nscript.  Some will be affected by more than one option    More   Non-exclusive (shared) jobs :  It is  --cpus-per-task x --ntasks  but if  --ntasks  is not present it defaults to 1 so its  --cpus-per-task x 1  Exclusive jobs :  The  --nodes  options tells us how many nodes we ask for and the  --exclusive  option says give us all it has.  This\none is a bit tricky as we don't really know until it runs.     \n    $(document).ready(function(){\n        $(\"#showablelink70\").click(function(e){\n            e.preventDefault();\n            $(\"#showable70\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable70\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink70\").text(\"More\");\n            } else {\n                $(\"#showablelink70\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink69\").click(function(e){\n            e.preventDefault();\n            $(\"#showable69\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   Answer :   task01:  1 cpu core  task02:  6 cpu cores  task03:  at least 1  as this has requested all cpu cores on the node its running on ( --exclusive ). \nHowever, since we know that all nodes on LIMS-HPC have 16, we know it will get 16.      \n    $(document).ready(function(){\n        $(\"#showablelink71\").click(function(e){\n            e.preventDefault();\n            $(\"#showable71\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.4) What about total memory?      Hint   Lookup the man page for  sbatch  command.   sbatch 's options match up with the  #SBATCH  comments at the top of each job \nscript.  Some will be affected by more than one option    More   The  --mem-per-cpu  OR  --mem  options are holding the answer to total memory.  For task01 and task02 the calculation is  --mem-per-cpu x --cpus-per-task x --ntasks  For task03, like with the cpus cores question, we get all the memory available on the node we get allocated     \n    $(document).ready(function(){\n        $(\"#showablelink74\").click(function(e){\n            e.preventDefault();\n            $(\"#showable74\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable74\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink74\").text(\"More\");\n            } else {\n                $(\"#showablelink74\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink73\").click(function(e){\n            e.preventDefault();\n            $(\"#showable73\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   The  --mem-per-cpu  OR  --mem  options are holding the answer to total memory.  For task01 and task02 the calculation is  --mem-per-cpu x --ntasks x --cpus-per-task  For task03, like with the cpus cores question, we get all the memory available on the node we get allocated  NOTE : it might be tempting to use the  --mem  option on non-exclusive (i.e.  --shared ) jobs \nhowever this will  NOT  work since the meaning of  --mem  is  \"go on a node with at least X MB of memory\" ; it does \nnot actually allocate any of it to you so your job will get terminated once it tries to use any memory.  Answer :   task01:  1024MB  (1GB) i.e. 1024 x 1 x 1  task02:  12288MB  (12GB) i.e. 2048 x 3 x 2  task03:  at least 1024MB  (1GB). The actual amount could be 128GB (nodes 2 to 5) or 256GB (node 1)      \n    $(document).ready(function(){\n        $(\"#showablelink75\").click(function(e){\n            e.preventDefault();\n            $(\"#showable75\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.5) How long can each run for?      Hint   Use the  man sbatch  command to look up the time specification.  If you search for  --time  it will describe the formats it uses (i.e. type  /--time  and press enter)     \n    $(document).ready(function(){\n        $(\"#showablelink77\").click(function(e){\n            e.preventDefault();\n            $(\"#showable77\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   The  --time  option is what tells slurm how long your job will run for.  Answer :   task01: requests  30:00 (30mins 0secs) , uses ~30secs  task02: requests  5:00 (5mins 0secs) , uses ~5secs  task03: requests  1:00 (1min 0secs) , uses ~30secs      \n    $(document).ready(function(){\n        $(\"#showablelink78\").click(function(e){\n            e.preventDefault();\n            $(\"#showable78\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.6) Is this maximum, minimum or both runtime?      Hint   Use the  man sbatch  command to look up the time specification.  If you search for  --time  it will describe the formats it uses (i.e. type  /--time  and press enter)     \n    $(document).ready(function(){\n        $(\"#showablelink80\").click(function(e){\n            e.preventDefault();\n            $(\"#showable80\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   This is a maximum time.  Your job may finish early, at which point it hands back the resources for the next job.  However if it \ntries to run longer the HPC will terminate the job. HINT : when selecting a time for your job its best to estimate your job runtime to be close to \nwhat it actually uses as it can help the HPC scheduler 'fit' your job in between other jobs though be careful to allow enough \ntime.  If you think your job may not complete in time you can ask the system administrator of your HPC to add more time.     \n    $(document).ready(function(){\n        $(\"#showablelink81\").click(function(e){\n            e.preventDefault();\n            $(\"#showable81\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.7) Calculate the  --time  specification for the following runtimes:    1h30m: --time=  1m20s: --time=  1.5days: --time=  30m: --time=      \n    $(document).ready(function(){\n        $(\"#showablelink82\").click(function(e){\n            e.preventDefault();\n            $(\"#showable82\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   Use the  man sbatch  command to look up the time specification.  If you search for  --time  it will describe the formats it uses (i.e. type  /--time  and press enter)     \n    $(document).ready(function(){\n        $(\"#showablelink83\").click(function(e){\n            e.preventDefault();\n            $(\"#showable83\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer    1h30m: --time=01:30:00 (alternatively: 0-01:30)  1m20s: --time=01:20  1.5days: --time=1-12  30m: --time=30      \n    $(document).ready(function(){\n        $(\"#showablelink84\").click(function(e){\n            e.preventDefault();\n            $(\"#showable84\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.8) What do the following --time specifications mean?    --time=12-00:20  --time=45  --time=00:30      \n    $(document).ready(function(){\n        $(\"#showablelink85\").click(function(e){\n            e.preventDefault();\n            $(\"#showable85\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   Use the  man sbatch  command to look up the time specification.  If you search for  --time  it will describe the formats it uses (i.e. type  /--time  and press enter)     \n    $(document).ready(function(){\n        $(\"#showablelink86\").click(function(e){\n            e.preventDefault();\n            $(\"#showable86\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer    --time=12-00:20 12 days and 20 minutes  --time=45 45 minutes  --time=00:30 30 seconds      \n    $(document).ready(function(){\n        $(\"#showablelink87\").click(function(e){\n            e.preventDefault();\n            $(\"#showable87\").toggleClass(\"showable-hidden\");\n        });\n    });\n       Now use sbatch to submit the  task01  job:     3.9) What job id was your job given?      Hint   Use the man page for the sbatch command.  The  Synopsis  at the top will give you an idea how to run it.     \n    $(document).ready(function(){\n        $(\"#showablelink89\").click(function(e){\n            e.preventDefault();\n            $(\"#showable89\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   $ sbatch task01 \nSubmitted batch job 9998  Answer : it's unique for each job; in the above example mine was  9998     \n    $(document).ready(function(){\n        $(\"#showablelink90\").click(function(e){\n            e.preventDefault();\n            $(\"#showable90\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.10) Which node did your job go on?      Hint   The  squeue  command shows you the currently running jobs.  If its been longer than 30 seconds since you submitted it you might have to resubmit it.     \n    $(document).ready(function(){\n        $(\"#showablelink92\").click(function(e){\n            e.preventDefault();\n            $(\"#showable92\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   Use the  squeue  command to show all jobs.  Search for your  jobid  and look in the  NODELIST  column.  NOTE : if there are lots of jobs you can use  squeue -u YOUR_USERNAME  to only show your jobs, where \nYOUR_USERNAME is replaced with your actual username.  $ sbatch task01\nSubmitted batch job 9999\n$ squeue -u training01\n JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n  9999   compute   task01 training  R       0:05      1 lims-hpc-2  Answer : it's dependent on node availability at time; in the above example mine was  lims-hpc-2     \n    $(document).ready(function(){\n        $(\"#showablelink93\").click(function(e){\n            e.preventDefault();\n            $(\"#showable93\").toggleClass(\"showable-hidden\");\n        });\n    });\n      Advanced    3.11) Make a copy of  task01  and call it  prime_numbers .  Make it load the training module and use the  prime  command calculate prime \nnumbers for 20 seconds.      Hint   You can find the  prime  command in the  training/1.0  module     \n    $(document).ready(function(){\n        $(\"#showablelink95\").click(function(e){\n            e.preventDefault();\n            $(\"#showable95\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   The key points to change in the task01 script are:   adding the  module load training/1.0  replacing the  sleep  (and  echo ) statements with a call to  prime 20 .   #!/bin/bash\n#SBATCH --ntasks=1\n#SBATCH --mem-per-cpu=1024\n#SBATCH --partition=training\n#SBATCH --time=30:00\n\nmodule load training/1.0\n\necho  Starting at: $(date) \nprime 20\necho  Finished at: $(date)   Repeatable Science : It's good scientific practice to include the version number of the module when loading it as this will \nensure that the same version is loaded next time you run this script which will mean you get the same results.  Date your work : It's also good practice to include the date command in the output so you have a permanent record \nof when this job was run.  If you have one before and after your main program you will get a record of how long it ran for as well.     \n    $(document).ready(function(){\n        $(\"#showablelink96\").click(function(e){\n            e.preventDefault();\n            $(\"#showable96\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.12) Submit the job.  What was the  largest  prime number it found in 20 seconds?      Hint   The output from the program will provide the results that we are after.  For HPC jobs this will be placed in the  SLURM output file ; this is called slurm-JOBID.out  where JOBID is replaced by the actual job id.     \n    $(document).ready(function(){\n        $(\"#showablelink98\").click(function(e){\n            e.preventDefault();\n            $(\"#showable98\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   You should get results similar to below however the actual numbers will vary as amount of computations performed will be affected by \nthe amount of other jobs running on the HPC  $ sbatch prime_numbers\nSubmitted batch job 9304\n$ cat slurm-9304.out \nStarting at: Fri May  8 16:11:07 AEST 2015\n\nPrimes:        710119\nLast trial:    10733927\nLargest prime: 10733873\nRuntime:       20 seconds\nFinished at: Fri May  8 16:11:27 AEST 2015     \n    $(document).ready(function(){\n        $(\"#showablelink99\").click(function(e){\n            e.preventDefault();\n            $(\"#showable99\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.13) Modify your prime_numbers script to notify you via email when it starts and ends.  Submit it again    Did it start immediately or have some delay?  How long did it actually run for?      \n    $(document).ready(function(){\n        $(\"#showablelink100\").click(function(e){\n            e.preventDefault();\n            $(\"#showable100\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   There are two options that you will need to set.  See sbatch manpage for details.    More   Both start with  --mail     \n    $(document).ready(function(){\n        $(\"#showablelink102\").click(function(e){\n            e.preventDefault();\n            $(\"#showable102\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable102\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink102\").text(\"More\");\n            } else {\n                $(\"#showablelink102\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink101\").click(function(e){\n            e.preventDefault();\n            $(\"#showable101\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   #!/bin/bash\n#SBATCH --ntasks=1\n#SBATCH --mem-per-cpu=1024\n#SBATCH --partition=training\n#SBATCH --time=30:00\n#SBATCH --mail-user=name@email.address\n#SBATCH --mail-type=ALL\n\nmodule load training/1.0\n\necho  Starting at: $(date) \nprime 20\necho  Finished at: $(date)   Answers :   Did it start immediately or have some delay?  The  Queued time  value in the subject of start email will tell you how long it waited.  How long did it actually run for?  The  Run time  value in the subject of the end email will tell you how long it ran for which should \nbe ~20 seconds.      \n    $(document).ready(function(){\n        $(\"#showablelink103\").click(function(e){\n            e.preventDefault();\n            $(\"#showable103\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 3: Job Submission"
        }, 
        {
            "location": "/tutorials/hpc/#topic-4-job-monitoring", 
            "text": "It is often difficult to predict how a software tool may utilise HPC System Resources (CPU/Memory) as it can vary quite widely based \non a number of factors (data set, number of CPU's, processing step etc.).  In this topic we will cover some of the tools that are available to you to  watch  what is happening so we can make better predictions\nin the future.  Exercises    4.1) What does the  top  command show?      Hint   When all else fails, try  man ; specifically, the description section     \n    $(document).ready(function(){\n        $(\"#showablelink105\").click(function(e){\n            e.preventDefault();\n            $(\"#showable105\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   $ man top\n...\nDESCRIPTION\n       The top program provides a dynamic real-time view of a running system.\n...  Answer : in lay-person terms  \"Continually updating CPU and Memory usage\"       \n    $(document).ready(function(){\n        $(\"#showablelink106\").click(function(e){\n            e.preventDefault();\n            $(\"#showable106\").toggleClass(\"showable-hidden\");\n        });\n    });\n       Run the  top  command.  Above the black line it shows some  system-wide statistics  and below are statistics specific to a single \nprocess (a.k.a, tasks OR software applications).    4.2) How much total memory does this HPC (head-node) have?      Hint   This would be a system-wide statistic.     \n    $(document).ready(function(){\n        $(\"#showablelink108\").click(function(e){\n            e.preventDefault();\n            $(\"#showable108\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   Answer : If you look at the first value on the  Mem  line (line 4) it will tell you the total memory on this computer (node).   LIMS-HPC : 132085396k or ~128 GigaBytes  MERRI : 49413840k or ~48 GigaBytes  BARCOO : 65942760k or ~64 GigaBytes   To transfer from kB to MB you divide by 1024 and MB to GB by 1024 again.     \n    $(document).ready(function(){\n        $(\"#showablelink109\").click(function(e){\n            e.preventDefault();\n            $(\"#showable109\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.3) What is the current total CPU usage?      Hint   This might be easier to work out what is not used and subtract it from 100%    More   Idle  is another term for not used (or  id  for short)     \n    $(document).ready(function(){\n        $(\"#showablelink112\").click(function(e){\n            e.preventDefault();\n            $(\"#showable112\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable112\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink112\").text(\"More\");\n            } else {\n                $(\"#showablelink112\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink111\").click(function(e){\n            e.preventDefault();\n            $(\"#showable111\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   Answer : If you subtract the  %id  value (4th value on Cpu(s) line) from 100% you will get the total CPU Usage     \n    $(document).ready(function(){\n        $(\"#showablelink113\").click(function(e){\n            e.preventDefault();\n            $(\"#showable113\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.4) What column does it appear to be sorting the processes by? Is this  low-to-high  OR  high-to-low ?      Hint   Its not PID but from time to time it might be ordered sequentially.     \n    $(document).ready(function(){\n        $(\"#showablelink115\").click(function(e){\n            e.preventDefault();\n            $(\"#showable115\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   Answer :  %CPU  which gives you an indication of how much CPU time each process uses     \n    $(document).ready(function(){\n        $(\"#showablelink116\").click(function(e){\n            e.preventDefault();\n            $(\"#showable116\").toggleClass(\"showable-hidden\");\n        });\n    });\n       Add up the top few CPU usages of processes and compare this to the system-wide CPU usage at that time.  NOTE: you may need to quit  top  (by pressing q) so you can compare before it updates.    4.5) Why might the numbers disagree?      Hint   It might have something to do with the total number of CPU Cores on the system.     \n    $(document).ready(function(){\n        $(\"#showablelink118\").click(function(e){\n            e.preventDefault();\n            $(\"#showable118\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   Answer :  %CPU  column gives you an indication of how much this process uses of 1 CPU Core, where as the system-wide values at the top \nare exactly that, how much the entire system is utilised.  i.e. if you could see all processes in  top  (excluding round errors) \nthey would add up 100% x the number of cpu cores available; on LIMS-HPC this would be 0-1600% in the individual processes and 0-100% \non the system-wide section.     \n    $(document).ready(function(){\n        $(\"#showablelink119\").click(function(e){\n            e.preventDefault();\n            $(\"#showable119\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.6) What command-line flag instructs  top  to sort results by  %MEM ?   Can you think of a reason that this might be useful?     \n    $(document).ready(function(){\n        $(\"#showablelink120\").click(function(e){\n            e.preventDefault();\n            $(\"#showable120\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   Use the  top  manpage.    More   \"m is for memory!\"     \n    $(document).ready(function(){\n        $(\"#showablelink122\").click(function(e){\n            e.preventDefault();\n            $(\"#showable122\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable122\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink122\").text(\"More\");\n            } else {\n                $(\"#showablelink122\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink121\").click(function(e){\n            e.preventDefault();\n            $(\"#showable121\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   Answer :  top -m  will cause  top  to sort the processes by memory usage.  Can you think of a reason that this might be useful?  Your program might be using a lot of memory and you want to know how much, by sorting by memory will cause your program to stay at the top.     \n    $(document).ready(function(){\n        $(\"#showablelink123\").click(function(e){\n            e.preventDefault();\n            $(\"#showable123\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.7) Run  \"top -c\" .  What does it do?  How might this be helpful?      Hint   Use the  top  manpage.    More   \"c is for complete!\"  \"c is also for command!\"  which is another name for program     \n    $(document).ready(function(){\n        $(\"#showablelink126\").click(function(e){\n            e.preventDefault();\n            $(\"#showable126\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable126\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink126\").text(\"More\");\n            } else {\n                $(\"#showablelink126\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink125\").click(function(e){\n            e.preventDefault();\n            $(\"#showable125\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   What does it do? \nIt changes the COMMAND column (right most) to show the complete command (or as much that fits) including the flags and options.  How might this be helpful? \nSometimes you might be running a lot of commands with the same name that only differ by the command-line options.  In this case it is hard \nto tell which ones are still running unless you use the  -c  flag to show the complete command.  NOTE : \nIf  top  is running you can press the  c  key to toggle show/hide complete command     \n    $(document).ready(function(){\n        $(\"#showablelink127\").click(function(e){\n            e.preventDefault();\n            $(\"#showable127\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.8) How can you get  top  to only show your processes?  Why might this be useful?      Hint   Use the  top  manpage.    More   \"u is for user[name]!\"     \n    $(document).ready(function(){\n        $(\"#showablelink130\").click(function(e){\n            e.preventDefault();\n            $(\"#showable130\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable130\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink130\").text(\"More\");\n            } else {\n                $(\"#showablelink130\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink129\").click(function(e){\n            e.preventDefault();\n            $(\"#showable129\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   How can you get  top  to only show your processes?  Answer 1 :  top -u YOURUSERNAME  Answer 2 : while running  top  press the  u  key, type YOURUSERNAME and press   key   Why might this be useful? \nWhen you are looking to see how much CPU or Memory you are using on a node that has other user jobs running it can be hard\nto quickly identify yours.     \n    $(document).ready(function(){\n        $(\"#showablelink131\").click(function(e){\n            e.preventDefault();\n            $(\"#showable131\").toggleClass(\"showable-hidden\");\n        });\n    });\n      LIMS-HPC Specific  LIMS-HPC has an extra monitoring and graphing tool called Munin.  Open the munin webpage and have a look at the graphs  Munin :  http://munin-lims.latrobe.edu.au/lims-hpc.html    4.9) What are the graphs showing?      Hint   Take a look at the title on the graphs.  Then the style of graphs.     \n    $(document).ready(function(){\n        $(\"#showablelink133\").click(function(e){\n            e.preventDefault();\n            $(\"#showable133\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   Answer : CPU usage (stacked by type of usage)     \n    $(document).ready(function(){\n        $(\"#showablelink134\").click(function(e){\n            e.preventDefault();\n            $(\"#showable134\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.10) How much is the Compute Node 5 being used currently?      Show  Answer   You can either:   estimate this off the right most position on the graph (everything except mid-yellow is the CPU doing something) or   look at the  cur  value for  idle  and subtract it from 1600 (the maximum value for a 16 core server)      \n    $(document).ready(function(){\n        $(\"#showablelink136\").click(function(e){\n            e.preventDefault();\n            $(\"#showable136\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.11) And at midday yesterday?      Hint   Its easiest to think in reverse (i.e. What is not being used?)     \n    $(document).ready(function(){\n        $(\"#showablelink138\").click(function(e){\n            e.preventDefault();\n            $(\"#showable138\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   You have to estimate system idle at the point on the graph indicating 12:00 (yesterday).     \n    $(document).ready(function(){\n        $(\"#showablelink139\").click(function(e){\n            e.preventDefault();\n            $(\"#showable139\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 4: Job Monitoring"
        }, 
        {
            "location": "/tutorials/hpc/#topic-5-all-together", 
            "text": "This topic will allow you to put all the skills that you learnt in this workshop to the test.  You might need to refer back to\nthe earlier topics if you have forgotten how to do these tasks.  Overview :   Write jobscript  Load/use software module  Submit job  Monitor job    NOTE (for later) : to complete this topic from your regular LIMS-HPC account you will need to:  first setup node logins.  This has already been done for your *training* account so no need to do this today LIMS-HPC Node Login Setup   use the *compute* partition instead of *training*    Task 1: Write a job script  Write a job script that requests the following resources:   Filename : monINITIALS.slurm  where INITIALS is replaced with your initials.  e.g. for me it would be monAR.slurm    Tasks : 1   CPUs : 1  Partition : training   Time : 5 mins   Memory : 1 GB (remember to specify it in MB)   Task 2: Load/use software module  Edit your job script so that it:    Loads the training module  Runs the  fakejob  command with your name as the first parameter    NOTE : remember good practice here and add the date commands to print the date/time in your output.  You can copy them from the *task01* script.  Task 3: Submit job   Use  sbatch  to submit the job to the HPC.  Note down the job id it was given (for later).  Use squeue (or qs) to check that is started ok.  When it starts check which compute node it is running on (for the next task).   Task 4: Monitor the job  Use the  top  command to check how much CPU and Memory the job is using.  Given that SLURM is running the job on your behalf on one of the compute \nnodes,  top  wont be able to see the job.  To be able to use top, you will first need to login to the compute node the is running your job.  To login:  $ ssh lims-hpc-X  Where X is the actual node number you were allocated (See task 3.4).  You are now connected from your computer to lims-hpc-m which is connected to lims-hpc-X.  +---------------+            +------------+            +------------+\n| YOUR COMPUTER | -- SSH --  | LIMS-HPC-M | -- SSH --  | LIMS-HPC-X |\n+---------------+            +------------+            +------------+  You can tell which node you are on by the text in the prompt  [10:00:06] USERNAME@lims-hpc-m ~ $ \n\nChanges to:\n\n[10:06:05] USERNAME@lims-hpc-1 ~ $  Once logged in to the relevent compute node you can run  top  to view you job.  Remember the  u  and  c  options we learnt earlier; they will be helpful \nhere when everyone is running the same jobs.     How does the CPU and Memory usage change over time?      Hint   It should vary (within the limits you set in the job script)     \n    $(document).ready(function(){\n        $(\"#showablelink141\").click(function(e){\n            e.preventDefault();\n            $(\"#showable141\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Show  Answer   The  fakejob  program should vary its CPU usage between 50 and 100% CPU and 500 and 1000MB of memory (on lims-hpc-[m,2-5] this will equate to 0.4 to 0.8%)     \n    $(document).ready(function(){\n        $(\"#showablelink142\").click(function(e){\n            e.preventDefault();\n            $(\"#showable142\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 5: All Together"
        }, 
        {
            "location": "/tutorials/hpc/#finished", 
            "text": "Well done, you learnt a lot over the last 5 topics and you should be proud of your achievement; it \nwas a lot to take in.  From here you should be confortable to begin submitting real jobs to the HPC (in your real account, \nnot the training one).  You will no-doubt forget a lot of what you learnt here so I encourage you to save a link to this \nWorkshop for later reference.  Thank you for your attendance, please don't forget to complete the VLSCI training survey and give it\nback to the Workshop facilitators.", 
            "title": "Finished"
        }, 
        {
            "location": "/tutorials/unix/", 
            "text": "em {font-style: normal; font-family: courier new;}\n\n\n\nIntroduction to Unix\n\n\nA hands-on-workshop covering the basics of the Unix/Linux command line interface\n\n\nHow to use this workshop\n\n\nThe workshop is broken up into a number of \nTopics\n each focusing on a particular aspect of Unix.  You should take a short break between \neach to refresh and relax before tackling the next.\n\n\nTopic\ns may start with some background followed by a number of \nexercises\n.  Each \nexercise\n begins with a \nquestion\n, then \nsometimes a \nhint\n (or two) and finishes with the suggested \nanswer\n.\n\n\nQuestion\n\n\nAn example question looks like:\n\n\n\n\n\n\nWhat is the Answer to Life?\n\n\n\n\n\n\n(function(w,d,u){w.readyQ=[];w.bindReadyQ=[];function p(x,y){if(x==\"ready\"){w.bindReadyQ.push(y);}else{w.readyQ.push(x);}};var a={ready:p,bind:p};w.$=w.jQuery=function(f){if(f===d||f===u){return a}else{p(f)}}})(window,document)\n\n\nHint\n\n\nDepending on how much of a challenge you like, you may choose to use hints.  Even if you work out the answer without hints, its a good \nidea to read the hints afterwards because they contain extra information that is good to know.\n\n\nNote: \nhint\ns may be staged, that is, there may be a \nmore\n section within a hint for further hints\n\n\n\n\n\n\nHint\n \n- click here to reveal hint\n\n\n\n\nWhat is the answer to everything?\n\n\nAs featured in \"The Hitchhiker's Guide to the Galaxy\"\n\n\n\n\n\n\nMore\n \n- and here to show more\n\n\n\n\nIt is probably a two digit number\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink2\").click(function(e){\n            e.preventDefault();\n            $(\"#showable2\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable2\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink2\").text(\"More\");\n            } else {\n                $(\"#showablelink2\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink1\").click(function(e){\n            e.preventDefault();\n            $(\"#showable1\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nAnswer\n\n\nOnce you have worked out the answer to the question expand the Answer section to check if you got it correct.\n\n\n\n\n\n\nAnswer\n \n- click here to reveal answer\n\n\n\n\nAnswer\n: 42\n\n\nRef: \nNumber 42 (Wikipedia)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink3\").click(function(e){\n            e.preventDefault();\n            $(\"#showable3\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nUsage Style\n\n\nThis workshop attempts to cater for two usage styles:\n\n\n\n\nProblem solver\n: for those who like a challenge and learn best be trying to solve the problems by-them-selves (hints optional):\n\n\nAttempt to answer the question by yourself.\n\n\nUse hints when you get stuck.\n\n\nOnce solved, reveal the answer and read through our suggested solution.\n\n\nIts a good idea to read the hints and answer description as they often contain extra useful information.\n\n\n\n\n\n\nBy example\n:  for those who learn by following examples:  \nExpand\n all sections\n\n\nExpand the Answer section at the start of each question and follow along with the commands that are shown and check you get the\n  same (or similar) answers.\n\n\nIts a good idea to read the hints and answer description as they often contain extra useful information.\n\n\n\n\n\n\n\n\nTopic 1: Remote log in\n\n\nIn this topic we will learn how to connect to a \nUnix\n computer via a method called \nSSH\n and run a few basic commands.\n\n\nConnecting to a Unix computer\n\n\nTo begin this workshop you will need to connect to an HPC.  Today we will use the LIMS-HPC.  The computer called \n\nlims-hpc-m\n (m is for master which is another name for head node) is the one that coordinates all the HPCs tasks.\n\n\nServer details\n:\n\n\n\n\nhost\n: lims-hpc-m.latrobe.edu.au\n\n\nport\n: 6022 \n\n\nusername\n: trainingXX (where XX is a two digit number, provided at workshop)\n\n\npassword\n: (provided at workshop) \n\n\n\n\n\n\n\n\nMac OS X / Linux\n\n\n\n\nBoth Mac OS X and Linux come with a version of ssh (called OpenSSH) that can be used from the command line.  To use OpenSSH you must \nfirst start a terminal program on your computer.  On OS X the standard terminal is called Terminal, and it is installed by default. \nOn Linux there are many popular terminal programs including: xterm, gnome-terminal, konsole (if you aren't sure, then xterm is a good \ndefault).  When you've started the terminal you should see a command prompt.  To log into LIMS-HPC, for example, type this command at \nthe prompt and press return (where the word username is replaced with your LIMS-HPC username):\n\n\nssh -p 6022 username@lims-hpc-m.latrobe.edu.au\n\n\n\n\nThe same procedure works for any other machine where you have an account except most other HPCs will not need the \n-p 6022\n \n(which is telling ssh to connect on a non-standard port number).\n\n\nYou may be presented with a message along the lines of:\n\n\nThe authenticity of host 'lims-hpc-m.latrobe.edu.au (131.172.36.150)' can't be  established.\n...\nAre you sure you want to continue connecting (yes/no)?\n\n\n\n\nAlthough you should never ignore a warning, this particular one is nothing to be concerned about; type \nyes\n and then \npress enter\n. \nIf all goes well you will be asked to enter your password.  Assuming you type the correct username and password the system should \nthen display a welcome message, and then present you with a Unix prompt.  If you get this far then you are ready to start entering \nUnix commands and thus begin using the remote computer.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink4\").click(function(e){\n            e.preventDefault();\n            $(\"#showable4\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nWindows\n\n\n\n\nOn Microsoft Windows (Vista, 7, 8) we recommend that you use the PuTTY ssh client.  PuTTY (putty.exe) can be downloaded \nfrom this web page:\n\n\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\n\n\nDocumentation for using PuTTY is here:\n\n\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/docs.html\n\n\nWhen you start PuTTY you should see a window which looks something like this:\n\n\n\n\nTo connect to LIMS-HPC you should enter its hostname into the box entitled \"Host Name (or IP address)\" and \n6022\n in the port, \nthen click on the Open button. All of the settings should remain the same as they were when PuTTY started (which should be the \nsame as they are in the picture above).\n\n\nIn some circumstances you will be presented with a window entitled PuTTY Security Alert. It will say something along the lines \nof \n\"The server's host key is not cached in the registry\"\n. This is nothing to worry about, and you should agree to continue (by \nclicking on Yes). You usually see this message the first time you try to connect to a particular remote computer.\n\n\nIf all goes well, a terminal window will open, showing a prompt with the text \n\"login as:\"\n. An example terminal window is shown \nbelow. You should type your LIMS-HPC username and press enter. After entering your username you will be prompted for your \npassword. Assuming you type the correct username and password the system should then display a welcome message, and then \npresent you with a Unix prompt. If you get this far then you are ready to start entering Unix commands and thus begin using \nthe remote computer.\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink5\").click(function(e){\n            e.preventDefault();\n            $(\"#showable5\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nNote\n: for security reasons ssh will not display any characters when you enter your password. This \ncan be confusing because it appears as if your typing is not recognised by the computer. Don\u2019t be \nalarmed; type your password in and press return at the end.\n\n\nLIMS-HPC is a high performance computer for La Trobe Users.  Logging in connects your local computer \n(e.g. laptop) to LIMS-HPC, and allows you to type commands into the Unix prompt which are run on \nthe HPC, and have the results displayed on your local screen.\n\n\nYou will be allocated a training account on LIMS-HPC for the duration of the workshop. Your \nusername and password will be supplied at the start of the workshop.\n\n\nLog out of LIMS-HPC, and log back in again (to make sure you can repeat the process).\n\n\nAll the remaining parts assume that you are logged into LIMS-HPC over ssh.\n\n\nExercises\n\n\n\n\n\n\n1.1) When you\u2019ve logged into LIMS-HPC run the following commands and see what they do:\n\n\n\n\nwho\nwhoami\ndate\ncal\nhostname\n/home/group/common/training/Intro_to_Unix/hi\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink6\").click(function(e){\n            e.preventDefault();\n            $(\"#showable6\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nwho\n: displays a list of the users who are currently using this Unix computer.\n\n\nwhoami\n: displays your username (i.e. they person currently logged in).\n\n\ndate\n: displays the current date and time.\n\n\ncal\n: displays a calendar on the terminal.  It can be configured to display more than just \nthe current month.\n\n\nhostname\n: displays the name of the computer we are logged in to.\n\n\n/home/group/common/training/Intro_to_Unix/hi\n: displays the text \"Hello World\"\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink7\").click(function(e){\n            e.preventDefault();\n            $(\"#showable7\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 2: Exploring your home directory\n\n\nIn this topic we will learn how to \"look\" at the filesystem and further expand our repertoire of Unix commands. \n\n\nDuration\n: 20 minutes. \n\n\nRelevant commands\n: \nls\n, \npwd\n, \necho\n, \nman\n\n\nYour home directory contains your own private working space.  Your \ncurrent working directory\n is automatically set \nto your \nhome\n directory when you log into a Unix computer.\n\n\n\n\n\n\n2.1) Use the \nls\n command to list the files in your \nhome\n directory.  How many files are there?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nLiterally, type \nls\n and press the \nENTER\n key.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink9\").click(function(e){\n            e.preventDefault();\n            $(\"#showable9\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ ls\nexp01  file01  muscle.fq\n\n\n\n\nWhen running the \nls\n command with no options it will list files in your current working directory.  The place \nwhere you start when you first login is your \nHOME\n directory.\n\n\nAnswer\n: 3 (exp01, file01 and muscle.fq)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink10\").click(function(e){\n            e.preventDefault();\n            $(\"#showable10\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nThe above answer is not quite correct.  There are a number of \nhidden\n files in your home directory as well.\n\n\n\n\n\n\n2.2) What \nflag\n might you use to display \nall\n files with the \nls\n command?  How many files are really there?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTake the \nall\n quite literally.\n\n\n\n\n\n\nMore\n\n\n\n\nType \nls --all\n and press the \nENTER\n key.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink13\").click(function(e){\n            e.preventDefault();\n            $(\"#showable13\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable13\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink13\").text(\"More\");\n            } else {\n                $(\"#showablelink13\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink12\").click(function(e){\n            e.preventDefault();\n            $(\"#showable12\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer 1\n: \n--all\n (or \n-a\n) flag\n\n\nNow you should see several files in your home directory whose names all begin with a dot. All these files are \ncreated automatically for your user account. They are mostly configuration options for various programs including \nthe shell. It is safe to ignore them for the moment.\n\n\n$ ls --all\n.              .bash_logout    exp01    .lesshst\n..             .bash_profile   file01   muscle.fq\n.bash_history  .bashrc         .kshrc   .viminfo\n\n\n\n\nThere are two trick files here; namely \n.\n and \n..\n which are not real files but instead, shortcuts.  \n.\n is a shortcut\nfor the current directory and \n..\n a shortcut for the directory above the current one.\n\n\nAnswer 2\n: 10 files (don't count \n.\n and \n..\n)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink14\").click(function(e){\n            e.preventDefault();\n            $(\"#showable14\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.3) What is the full path name of your \nhome\n directory?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember your \nCurrent Working Directory\n start's in your \nhome\n directory (and the hint from the slides).\n\n\n\n\n\n\nMore\n\n\n\n\nTry a shortened version of \nprint working directory\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink17\").click(function(e){\n            e.preventDefault();\n            $(\"#showable17\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable17\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink17\").text(\"More\");\n            } else {\n                $(\"#showablelink17\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink16\").click(function(e){\n            e.preventDefault();\n            $(\"#showable16\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou can find out the full path name of the current working directory with the \npwd\n command. Your home directory \nwill look something like this:\n\n\n$ pwd\n/home/trainingXY\n\n\n\n\nAnswer\n: \n/home/trainingXY\n\n\nwhere \nXY\n is replaced by some 2 digit sequence.\n\n\nAlternate method\n:\nYou can also find out the name of your home directory by printing the value of the \n$HOME\n shell variable:\n\n\necho $HOME\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink18\").click(function(e){\n            e.preventDefault();\n            $(\"#showable18\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.4) Run \nls\n using the long flag (\n-l\n), how did the output change?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRun \nls -l\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink20\").click(function(e){\n            e.preventDefault();\n            $(\"#showable20\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: it changed the output to place 1 file/directory per line.  It also added some extra information\nabout each.\n\n\n$ ls -l\ntotal 32\ndrwxr-x--- 2 training01 training 2048 Jun 14 11:28 exp01\n-rw-r----- 1 training01 training   97 Jun 14 11:28 file01\n-rw-r----- 1 training01 training 2461 Jun 14 11:28 muscle.fq\n\n\n\n\nDetails\n:\n\n\ndrwxr-x--- 2 training01 training 2048 Jun 14 11:28 exp01\n\\--------/ ^ \\--------/ \\------/ \\--/ \\----------/ \\---/\npermission |  username   group   size    date       name\n       /---^---\\\n       linkcount\n\n\n\n\nWhere:\n\n\n\n\npermissions\n: 4 parts, file type, user perms, group perms and other perms\n\n\nfiletype\n: 1 character, \nd\n = directory and \n-\n regular file\n\n\nuser\n permissions: 3 characters, \nr\n = read, \nw\n = write, \nx\n = execute and \n-\n no permission\n\n\ngroup\n permissions: same as user except for users within the owner group\n\n\nother\n permissions: same as user except for users that are not in either user \nor\n \ngroup\n\n\n\n\n\n\nusername\n: the user who \nowns\n this file/directory\n\n\ngroup\n: the group name who \nowns\n this file/directory\n\n\nsize\n: the number of bytes this file/directory takes to store on disk\n\n\ndate\n: the date and time when this file/directory was \nlast edited\n\n\nname\n: name of the file\n\n\nlinkcount\n: technical detail which represents the number of links this file has in the file system (safe to ignore)\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink21\").click(function(e){\n            e.preventDefault();\n            $(\"#showable21\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.5) What type of file is \nexp01\n and \nmuscle.fq\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheck the output from the \nls -l\n.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink23\").click(function(e){\n            e.preventDefault();\n            $(\"#showable23\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n:\n\n\n\n\nexp01\n: Directory (given the 'd' as the first letter of its permissions)\n\n\nmuscle.fq\n: Regular File (given the '-')\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink24\").click(function(e){\n            e.preventDefault();\n            $(\"#showable24\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.6) Who has permission to \nread\n, \nwrite\n and \nexecute\n your \nhome\n directory?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nYou can also give \nls\n a filename as the first option.\n\n\n\n\n\n\nMore\n\n\n\n\nls -l\n will show you the contents of the \nCWD\n; how might you see the contents of the \nparent\n directory? (remember\nthe slides)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink27\").click(function(e){\n            e.preventDefault();\n            $(\"#showable27\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable27\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink27\").text(\"More\");\n            } else {\n                $(\"#showablelink27\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink26\").click(function(e){\n            e.preventDefault();\n            $(\"#showable26\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nIf you pass the \n-l\n flag to ls it will display a \"long\" listing of file information including file permissions.\n\n\nThere are various ways you could find out the permissions on your home directory.\n\n\nMethod 1\n: given we know the \nCWD\n is our home directory.\n\n\n$ ls -l ..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...\n\n\n\n\nThe \n..\n refers to the parent directory.\n\n\nMethod 2\n: using $HOME.  This works no matter what our \nCWD\n is set to. \n\n\nYou could list the permissions of all files and directories in the parent directory of your home:\n\n\n$ ls -l $HOME/..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...\n\n\n\n\nIn this case we use the shell variable to refer to our home directory.\n\n\nMethod 3\n: using \n~\n (tilde) shortcut\n\n\nYou may also refer to your home directory using the \n~\n (tilde) character:\n\n\n$ ls -l ~/..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...\n\n\n\n\nAll 3 of the methods above mean the same thing.\n\n\nYou will see a list of files and directories in the parent directory of your home directory. One of them will \nbe the name of your home directory, something like \ntrainingXY\n.  Where \nXY\n is replaced by a two digit string\n\n\nAltername\n: using the \n-a\n flag and looking at the \n.\n (dot) special file.\n\n\n$ ls -la\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 .\n...\n\n\n\n\nAnswer\n: \ndrwxr-x---\n\n\n\n\nYou\n: read (see filenames), write (add, delete files), execute (change your CWD to this directory).\n\n\nTraining users\n: read, execute\n\n\nEveryone else\n: No access\n\n\n\n\nDiscussion on Permissions\n:\n\n\nThe permission string is \n\"drwxr-x---\"\n. The \nd\n means it is a directory. The \nrwx\n means that the owner of the directory \n(your user account) can \nread\n, \nwrite\n and \nexecute\n the directory. Execute permissions on a directory means that you \ncan \ncd\n into the directory. The \nr-x\n means that anyone in the same user group as \ntraining\n can read or execute the \ndirectory. The \n---\n means that nobody else (other users on the system) can do anything with the directory.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink28\").click(function(e){\n            e.preventDefault();\n            $(\"#showable28\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nman\n is for manual\n: and it will be your best friend!\n\n\nManual pages include a lot of detail about a command and its available flags/options.  It should be your first (or second) \nport of call when you are trying to work out what a command or option does.\n\n\nYou can scroll \nup\n and \ndown\n in the man page using the \narrow\n keys.\n\n\nYou can search in the man page using the forward \nslash followed by the search text followed by the \nENTER\n key. e.g. \ntype \n/hello\n and press \nENTER\n to search for the word \nhello\n.  Press \nn\n key to find next \noccurance of \nhello\n etc.\n\n\nYou can \nquit\n the man page by pressing \nq\n.\n\n\n\n\n\n\n\n\n\n\n\n2.7) Use the \nman\n command to find out what the \n-h\n flag does for \nls\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nGive \nls\n as an option to \nman\n command.\n\n\n\n\n\n\nMore\n\n\n\n\nman ls\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink31\").click(function(e){\n            e.preventDefault();\n            $(\"#showable31\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable31\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink31\").text(\"More\");\n            } else {\n                $(\"#showablelink31\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink30\").click(function(e){\n            e.preventDefault();\n            $(\"#showable30\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the following command to view the \nman\n page for \nls\n:\n\n\n$ man ls\n\n\n\n\nAnswer\n: You should discover that the \n-h\n option prints file sizes in human readable format\n\n\n-h, --human-readable\n              with -l, print sizes in human readable format (e.g., 1K 234M 2G)\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink32\").click(function(e){\n            e.preventDefault();\n            $(\"#showable32\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.8) Use the \n-h\n, how did the output change of \nmuscle.fq\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nDon't forget the \n-l\n option too.\n\n\n\n\n\n\nMore\n\n\n\n\nRun \nls -lh\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink35\").click(function(e){\n            e.preventDefault();\n            $(\"#showable35\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable35\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink35\").text(\"More\");\n            } else {\n                $(\"#showablelink35\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink34\").click(function(e){\n            e.preventDefault();\n            $(\"#showable34\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ ls -lh\n...\n-rw-r----- 1 training01 training 2.5K Jun 14 11:28 muscle.fq\n\n\n\n\nAnswer\n: it changed the output so the \nfilesize\n of \nmuscle.fq\n is now \n2.5K\n instead of \n2461\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink36\").click(function(e){\n            e.preventDefault();\n            $(\"#showable36\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 3: Exploring the file system\n\n\nIn this topic we will learn how to move around the filesystem and see what is there.\n\n\nDuration\n: 30 minutes. \n\n\nRelevant commands\n: \npwd\n, \ncd\n, \nls\n, \nfile\n\n\n\n\n\n\n3.1) Print the value of your current working directory.\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \npwd\n command prints the value of your current working directory.\n\n\n$ pwd\n/home/training01\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink38\").click(function(e){\n            e.preventDefault();\n            $(\"#showable38\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.2) List the contents of the root directory, called '\n/\n' (forward \nslash).\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nls\n expects a single option which is the directory to change too.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink40\").click(function(e){\n            e.preventDefault();\n            $(\"#showable40\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ ls /\napplications-merged  etc         media    root     tmp\nbin                  home        mnt      sbin     usr\nboot                 lib         oldhome  selinux  var\ndata                 lib64       opt      srv\ndev                  lost+found  proc     sys\n\n\n\n\nHere we see that \nls\n can take a filepath as its argument, which allows you to list the contents of directories \nother than your current working directory.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink41\").click(function(e){\n            e.preventDefault();\n            $(\"#showable41\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.3) Use the \ncd\n command to change your working directory to the root directory.  Did your prompt \nchange?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\ncd\n expects a single option which is the directory to change to\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink43\").click(function(e){\n            e.preventDefault();\n            $(\"#showable43\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \ncd\n command changes the value of your current working directory. To change to the root directory use the \nfollowing command:\n\n\n$ cd /\n\n\n\n\nAnswer\n: Yes, it now says the CWD is \n/\n instead of \n~\n.\n\n\nSome people imagine that changing the working directory is akin to moving your focus within the file system. \nSo people often say \"move to\", \"go to\" or \"charge directory to\" when they want to change the working directory.\n\n\nThe root directory is special in Unix. It is the topmost directory in the whole file system.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink44\").click(function(e){\n            e.preventDefault();\n            $(\"#showable44\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nOutput on ERROR only\n: Many Unix commands will not produce any output if everything went well; \ncd\n is one\nsuch command.  However, it will get grumpy if something went wrong by way of an error message on-screen.\n\n\n\n\n\n\n\n\n\n\n3.4) List the contents of the CWD and verify it matches the list in 3.2\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nls\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink46\").click(function(e){\n            e.preventDefault();\n            $(\"#showable46\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAssuming you have changed to the root directory then this can be achieved with \nls\n, or \nls -a\n (for all files) or \n\nls -la\n for a long listing of all files.\n\n\nIf you are not currently in the root directory then you can list its contents by passing it as an argument to ls:\n\n\n$ ls\napplications-merged  etc         media    root     tmp\nbin                  home        mnt      sbin     usr\nboot                 lib         oldhome  selinux  var\ndata                 lib64       opt      srv\ndev                  lost+found  proc     sys\n\n\n\n\nAnswer\n: Yes, we got the same output as exercise 3.2\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink47\").click(function(e){\n            e.preventDefault();\n            $(\"#showable47\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.5) Change your current working directory back to your home directory. What is the simplest Unix command that \nwill get you back to your home directory from anywhere else in the file system?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe answer to exercise 2.6 might give some hints on how to get back to the home directory\n\n\n\n\n\n\nMore\n\n\n\n\n$HOME\n, \n~\n, \n/home/trainingXY\n are all methods to name your home directory.  Yet there is a simpler method; the answer\nis buried in \nman cd\n however \ncd\n doesn't its own manpage so you will need to search for it.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink50\").click(function(e){\n            e.preventDefault();\n            $(\"#showable50\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable50\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink50\").text(\"More\");\n            } else {\n                $(\"#showablelink50\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink49\").click(function(e){\n            e.preventDefault();\n            $(\"#showable49\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \ncd\n command to change your working directory to your home directory. There are a number of ways to refer \nto your home directory:\n\n\ncd $HOME\n\n\n\n\nis equivalent to:\n\n\ncd ~\n\n\n\n\nThe simplest way to change your current working directory to your home directory is to run the \ncd\n command with \nno arguments:\n\n\nAnswer\n: the simplest for is cd with NO options.\n\n\ncd\n\n\n\n\nThis is a special-case behaviour which is built into \ncd\n for convenience.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink51\").click(function(e){\n            e.preventDefault();\n            $(\"#showable51\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.6) Change your working directory to \n/home/group/common/training/Intro_to_Unix/\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\ncd /home/group/common/training/Intro_to_Unix/\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink53\").click(function(e){\n            e.preventDefault();\n            $(\"#showable53\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.7) List the contents of that directory. How many files does it contain?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nls\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink55\").click(function(e){\n            e.preventDefault();\n            $(\"#showable55\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou can do this with \nls\n\n\n$ ls\nexpectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy\n\n\n\n\nAnswer\n: 7 files (expectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink56\").click(function(e){\n            e.preventDefault();\n            $(\"#showable56\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.8) What kind of \nfile\n is \n/home/group/common/training/Intro_to_Unix/sleepy\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTake the word \nfile\n quite literally.\n\n\n\n\n\n\nMore\n\n\n\n\nfile sleepy\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink59\").click(function(e){\n            e.preventDefault();\n            $(\"#showable59\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable59\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink59\").text(\"More\");\n            } else {\n                $(\"#showablelink59\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink58\").click(function(e){\n            e.preventDefault();\n            $(\"#showable58\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nfile\n command to get extra information about the contents of a file:\n\n\nAssuming your current working directory is \n/home/group/common/training/Intro_to_Unix/\n\n\n$ file sleepy\nBourne-Again shell script text executable\n\n\n\n\nOtherwise specify the full path of sleepy:\n\n\n$ file /home/group/common/training/Intro_to_Unix/sleepy\nBourne-Again shell script text executable\n\n\n\n\nAnswer\n: Bourne-Again shell script text executable\n\n\nThe \"Bourne-Again shell\" is more commonly known as BASH. The \nfile\n command is telling us that sleepy \nis (probably) a shell script written in the language of BASH.\n\n\nThe file command uses various heuristics to guess the \"type\" of a file. If you want to know how it works \nthen read the Unix manual page like so:\n\n\nman file\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink60\").click(function(e){\n            e.preventDefault();\n            $(\"#showable60\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.9) What kind of \nfile\n is \n/home/group/common/training/Intro_to_Unix/hi\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTake the word \nfile\n quite literally.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink62\").click(function(e){\n            e.preventDefault();\n            $(\"#showable62\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the file command again. If you are in the same directory as \nhi\n then:\n\n\n$ file hi\nELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux \n2.6.9, not stripped\n\n\n\n\nAnswer\n: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux \n\n\nThis rather complicated output is roughly saying that the file called \nhi\n contains a binary executable \nprogram (raw instructions that the computer can execute directly).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink63\").click(function(e){\n            e.preventDefault();\n            $(\"#showable63\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.10) What are the file permissions of \n/home/group/common/training/Intro_to_Unix/sleepy\n? \nWhat do they mean?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember the \nls\n command, and don't forget the \n-l\n flag\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink65\").click(function(e){\n            e.preventDefault();\n            $(\"#showable65\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou can find the permissions of \nsleepy\n using the \nls\n command with the \n-l\n flag. If you are in the same \ndirectory as \nsleepy\n then:\n\n\n$ ls -l sleepy\n-rw-r--r-- 1 arobinson common 183 Feb  9 16:36 sleepy\n\n\n\n\nAnswer\n: We can see that this particular instance of sleepy is owned by the user arobinson, and is part of the common \nuser group. It is 183 bytes in size, and was last modified on the 9th of February at 4:36pm. The file is \nreadable to everyone, and writeable only to training01.  The digit '1' between the file permission string and \nthe owner indicates that there is one link to the file. The Unix file system allows files to be referred to \nby multiple \"links\". When you create a file it is referred to by one link, but you may add others later. For \nfuture reference: links are created with the \nln\n command.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink66\").click(function(e){\n            e.preventDefault();\n            $(\"#showable66\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.11) Change your working directory back to your home directory ready for the next topic.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\ncd\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink68\").click(function(e){\n            e.preventDefault();\n            $(\"#showable68\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou should know how to do this with the cd command:\n\n\ncd\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink69\").click(function(e){\n            e.preventDefault();\n            $(\"#showable69\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 4: Working with files and directories\n\n\nIn this topic we will start to read, create, edit and delete files and directories.\n\n\nDuration\n: 50 minutes.  \n\n\nRelevant commands\n: \nmkdir\n, \ncp\n, \nls\n, \ndiff\n, \nwc\n, \nnano\n, \nmv\n, \nrm\n, \nrmdir\n, \nhead\n, \ntail\n, \ngrep\n, \ngzip\n, \ngunzip\n\n\n\n\nHint\n: Look at the commands above; you will need them roughly in order for this topic.  Use the \nman\n\ncommand find out what they do, in particular the NAME, SYNOPSIS and DESCRIPTION sections.\n\n\n\n\n\n\n\n\n\n\n4.1) In your home directory make a sub-directory called test.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nYou are trying to \nmake a directory\n, which of the above commands looks like a shortened version of this?\n\n\n\n\n\n\nMore\n\n\n\n\nmkdir\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink72\").click(function(e){\n            e.preventDefault();\n            $(\"#showable72\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable72\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink72\").text(\"More\");\n            } else {\n                $(\"#showablelink72\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink71\").click(function(e){\n            e.preventDefault();\n            $(\"#showable71\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nMake sure you are in your home directory first. If not \ncd\n to your home directory.\n\n\nUse the \nmkdir\n command to make new directories:\n\n\n$ mkdir test\n\n\n\n\nUse the \nls\n command to check that the new directory was created.\n\n\n$ ls\nexp01  file01  muscle.fq  test\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink73\").click(function(e){\n            e.preventDefault();\n            $(\"#showable73\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.2) Copy all the files from \n/home/group/common/training/Intro_to_Unix/\n into the newly created \ntest directory.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nYou are trying to \ncopy\n, which of the above commands looks like a shortened version of this?\n\n\n\n\n\n\nMore\n\n\n\n\n$ man cp\n...\nSYNOPSIS\n       cp [OPTION]... [-T] SOURCE DEST\n...\nDESCRIPTION\n       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.\n\n\n\n\nwhich means \ncp\n expects zero or more flags, a SOURCE file followed by a DEST file or directory \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink76\").click(function(e){\n            e.preventDefault();\n            $(\"#showable76\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable76\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink76\").text(\"More\");\n            } else {\n                $(\"#showablelink76\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink75\").click(function(e){\n            e.preventDefault();\n            $(\"#showable75\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \ncp\n command to copy files. \n\n\nWildcards\n: You could copy them one-by-one, but that would be tedious, so use \nthe \n*\n wildcard to specify that you want to copy all the files.\n\n\n\n\nThere are a number of ways you could do this depending on how you specify the source and destination \npaths to \ncp\n. You only need to perform one of these ways, but we show multiple ones for your reference.\n\n\nAnswer 1\n: From your home directory:\n\n\n$ cp /home/group/common/training/Intro_to_Unix/* test\n\n\n\n\nAnswer 2\n: Change to the test directory and then copy (assuming you started in your home directory):\n\n\n$ cd test\n$ cp /home/group/common/training/Intro_to_Unix/* .\n\n\n\n\nIn the example above the '\n.\n' (dot) character refers to the current working directory. It should be \nthe test subdirectory of your home directory.\n\n\nAnswer 3\n: Change to the /home/group/common/training/Intro_to_Unix/ directory and then copy:\n\n\ncd /home/group/common/training/Intro_to_Unix/\ncp * ~/test\n\n\n\n\nRemember that ~ is a shortcut reference to your home directory.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink77\").click(function(e){\n            e.preventDefault();\n            $(\"#showable77\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nNote\n: This exercise assumes that the copy command from the previous exercise was successful. \n\n\n\n\n\n\n4.3) Check that the file size of \nexpectations.txt\n is the same in both the directory that you copied \nit from and the directory that you copied it to.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember \nls\n can show you the file size (with one of its flags)\n\n\n\n\n\n\nMore\n\n\n\n\nls -l\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink80\").click(function(e){\n            e.preventDefault();\n            $(\"#showable80\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable80\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink80\").text(\"More\");\n            } else {\n                $(\"#showablelink80\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink79\").click(function(e){\n            e.preventDefault();\n            $(\"#showable79\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse \nls -l\n to check the size of files.\n\n\nYou could do this in many ways depending on the value of your working directory. We just show one possible \nway for each file:\n\n\n$ ls -l /home/group/common/training/Intro_to_Unix/expectations.txt\n\n$ ls -l ~/test/expectations.txt\n\n\n\n\nFrom the output of the above commands you should be able to see the size of each file and check that they \nare the same. \n\n\nAnswer\n: They should each be \n1033773\n bytes\n\n\nAlternate\n: Sometimes it is useful to get file sizes reported in more \"human friendly\" units than bytes. If this is \ntrue then try the \n-h\n option for ls:\n\n\n$ ls -lh /home/group/common/training/Intro_to_Unix/expectations.txt\n-rw-r--r-- 1 arobinson common 1010K Mar 26  2012 /home/group/common/training/Intro_to_Unix/expectations.txt\n\n\n\n\nIn this case the size is reported in kilobytes as \n1010K\n. Larger files are reported in megabytes, gigabytes \netcetera.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink81\").click(function(e){\n            e.preventDefault();\n            $(\"#showable81\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nNote\n: this exercise assumes your working directory is \n~/test\n; if not run \ncd ~/test\n\n\n\n\n\n\n4.4) Check that the contents of expectations.txt are the same in both the directory that you copied \nit from and the directory that you copied it to.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWhat is the opposite of \nsame\n?\n\n\n\n\n\n\nMore\n\n\n\n\ndiff\nerence\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink84\").click(function(e){\n            e.preventDefault();\n            $(\"#showable84\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable84\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink84\").text(\"More\");\n            } else {\n                $(\"#showablelink84\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink83\").click(function(e){\n            e.preventDefault();\n            $(\"#showable83\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \ndiff\n command to compare the contents of two files.\n\n\n$ diff /home/group/common/training/Intro_to_Unix/expectations.txt expectations.txt\n\n\n\n\nIf the two files are identical the \ndiff\n command will NOT produce any output)\n\n\nAnswer\n: Yes, they are the same since no output was given.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink85\").click(function(e){\n            e.preventDefault();\n            $(\"#showable85\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.5) How many lines, words and characters are in expectations.txt?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nInitialisms are key\n\n\n\n\n\n\nMore\n\n\n\n\nw\nord \nc\nount\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink88\").click(function(e){\n            e.preventDefault();\n            $(\"#showable88\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable88\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink88\").text(\"More\");\n            } else {\n                $(\"#showablelink88\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink87\").click(function(e){\n            e.preventDefault();\n            $(\"#showable87\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nwc\n (for \"word count\") to count the number of characters, lines and words in a file:\n\n\n$ wc expectations.txt\n  20415  187465 1033773 expectations.txt\n\n\n\n\nAnswer\n: There are \n20415\n lines, \n187465\n words and \n1033773\n characters in expectations.txt.\n\n\nTo get just the line, word or character count:\n\n\n$ wc -l expectations.txt\n20415 expectations.txt\n$ wc -w expectations.txt\n187465 expectations.txt\n$ wc -c expectations.txt\n1033773 expectations.txt\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink89\").click(function(e){\n            e.preventDefault();\n            $(\"#showable89\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.6) Open \n~/test/expectations.txt\n in the \nnano\n text editor, delete the first line of text, and \nsave your changes to the file. Exit \nnano\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nnano FILENAME\n\n\nOnce \nnano\n is open it displays some command hints along the bottom of the screen.\n\n\n\n\n\n\nMore\n\n\n\n\n^O\n means hold the \nControl\n (or CTRL) key while pressing the \no\n.  Dispite what it displays, you need to type \nthe lower-case letter that follows the \n^\n character.\n\n\nWriteOut is another name for Save.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink92\").click(function(e){\n            e.preventDefault();\n            $(\"#showable92\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable92\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink92\").text(\"More\");\n            } else {\n                $(\"#showablelink92\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink91\").click(function(e){\n            e.preventDefault();\n            $(\"#showable91\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nTake some time to play around with the \nnano\n text editor.\n\n\nNano\n is a very simple text editor which is easy to use but limited in features. More powerful \neditors exist such as \nvim\n and \nemacs\n, however they take a substantial amount of time to learn.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink93\").click(function(e){\n            e.preventDefault();\n            $(\"#showable93\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.7) Did the changes you made to \n~/test/expectations.txt\n have any effect on \n\n/home/group/common/training/Intro_to_Unix/expectations.txt\n? How can you tell if two files are the \nsame or different in their contents?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember exercise 4.4\n\n\n\n\n\n\nMore\n\n\n\n\nUse \ndiff\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink96\").click(function(e){\n            e.preventDefault();\n            $(\"#showable96\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable96\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink96\").text(\"More\");\n            } else {\n                $(\"#showablelink96\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink95\").click(function(e){\n            e.preventDefault();\n            $(\"#showable95\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse \ndiff\n to check that the two files are different after you have made the change to the copy of \n\nexpectations.txt\n in your \n~/test\n directory.\n\n\ndiff ~/test/expectations.txt \\\n/home/group/common/training/Intro_to_Unix/expectations.txt\n\n\n\n\nYou could also use \nls\n to check that the files have different sizes.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink97\").click(function(e){\n            e.preventDefault();\n            $(\"#showable97\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.8) In your \ntest\n subdirectory, rename \nexpectations.txt\n to \nfoo.txt\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nAnother way to think of it is \nmoving\n it from \nexpectations.txt\n to \nfoo.txt\n\n\n\n\n\n\nMore\n\n\n\n\nmv\n\n\nUse \nman mv\n if you need to work out how to use it.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink100\").click(function(e){\n            e.preventDefault();\n            $(\"#showable100\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable100\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink100\").text(\"More\");\n            } else {\n                $(\"#showablelink100\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink99\").click(function(e){\n            e.preventDefault();\n            $(\"#showable99\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nmv\n command to rename the file:\n\n\n$ mv expectations.txt foo.txt\n$ ls\nfoo.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink101\").click(function(e){\n            e.preventDefault();\n            $(\"#showable101\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.9) Rename foo.txt back to expectations.txt.\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nmv\n command to rename the file:\n\n\n$ mv foo.txt expectations.txt\n$ ls\nexpectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy\n\n\n\n\nUse \nls\n to check that the file is in fact renamed.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink103\").click(function(e){\n            e.preventDefault();\n            $(\"#showable103\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.10) Remove the file \nexpectations.txt\n from your \ntest\n directory.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWe are trying to \nremove\n a file, check the commands at the top of this topic.\n\n\n\n\n\n\nMore\n\n\n\n\nrm\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink106\").click(function(e){\n            e.preventDefault();\n            $(\"#showable106\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable106\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink106\").text(\"More\");\n            } else {\n                $(\"#showablelink106\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink105\").click(function(e){\n            e.preventDefault();\n            $(\"#showable105\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nrm\n command to remove files (carefully):\n\n\n$ rm expectations.txt\n$ ls\nhello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink107\").click(function(e){\n            e.preventDefault();\n            $(\"#showable107\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.11) Remove the entire \ntest\n directory and all the files within it.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWe are trying to \nremove a directory\n.\n\n\n\n\n\n\nMore\n\n\n\n\nYou could use \nrmdir\n but there is an easier way using just \nrm\n and a flag.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink110\").click(function(e){\n            e.preventDefault();\n            $(\"#showable110\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable110\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink110\").text(\"More\");\n            } else {\n                $(\"#showablelink110\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink109\").click(function(e){\n            e.preventDefault();\n            $(\"#showable109\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou could use the \nrm\n command to remove each file individually, and then use the \nrmdir\n command \nto remove the directory. Note that \nrmdir\n will only remove directories that are empty (i.e. do not \ncontain files or subdirectories).\n\n\nA faster way is to pass the \n-r\n (for recursive) flag to \nrm\n to remove all the files and the \ndirectory in one go:\n\n\nLogical Answer\n:\n\n\ncd ~\nrm test/*\nrmdir test\n\n\n\n\nEasier Answer\n:\n\n\ncd ~\nrm -r test\n\n\n\n\nWarning\n: Be very careful with \nrm -r\n, it will remove all files \nand all subdirectories underneath the specified directory. This could be catastrophic if you do it \nin the wrong location! Now is a good moment to pause and think about file backup strategies.\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink111\").click(function(e){\n            e.preventDefault();\n            $(\"#showable111\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.12) Recreate the test directory in your home directory and copy all the files from \n\n/home/group/common/training/Intro_to_Unix/\n back into the test directory.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nSee exercises 4.1 and 4.2\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink113\").click(function(e){\n            e.preventDefault();\n            $(\"#showable113\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nRepeat exercises 4.1 and 4.2.\n\n\n$ cd ~\n$ mkdir test\n$ cp /home/group/common/training/Intro_to_Unix/* test\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink114\").click(function(e){\n            e.preventDefault();\n            $(\"#showable114\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.13) Change directories to \n~/test\n and use the \ncat\n command to display the entire contents \nof the file \nhello.c\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse \nman\n if you can't guess how it might work.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink116\").click(function(e){\n            e.preventDefault();\n            $(\"#showable116\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ cd ~/test\n$ cat hello.c\n#include \nstdio.h\n\nint main(void) {\n    printf (\nHello World\\n\n);\n    return 0;\n}\n\n\n\n\nhello.c\n contains the source code of a C program. The compiled executable version of this code \nis in the file called \nhi\n, which you can run like so:\n\n\n$ ./hi\nHello World\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink117\").click(function(e){\n            e.preventDefault();\n            $(\"#showable117\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.14) Use the \nhead\n command to view the first \n20\n lines of the file \nsample_1.fastq\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember your \nbest\n friend!\n\n\n\n\n\n\nMore\n\n\n\n\nUse \nman\n to find out what option you need to add to display a given number of \nlines\n.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink120\").click(function(e){\n            e.preventDefault();\n            $(\"#showable120\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable120\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink120\").text(\"More\");\n            } else {\n                $(\"#showablelink120\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink119\").click(function(e){\n            e.preventDefault();\n            $(\"#showable119\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ head -20 sample_1.fastq\n@IRIS:7:1:17:394#0/1\nGTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n+IRIS:7:1:17:394#0/1\naaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n@IRIS:7:1:17:800#0/1\nGGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n+IRIS:7:1:17:800#0/1\nababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n@IRIS:7:1:17:1757#0/1\nTTTTCTCGACGATTTCCACTCCTGGTCNACGAATCC\n+IRIS:7:1:17:1757#0/1\naaaaaa``aaa`aaaa_^a```]][Z[DY^XYV^_Y\n@IRIS:7:1:17:1479#0/1\nCATATTGTAGGGTGGATCTCGAAAGATATGAAAGAT\n+IRIS:7:1:17:1479#0/1\nabaaaaa`a```^aaaaa`_]aaa`aaa__a_X]``\n@IRIS:7:1:17:150#0/1\nTGATGTACTATGCATATGAACTTGTATGCAAAGTGG\n+IRIS:7:1:17:150#0/1\nabaabaa`aaaaaaa^ba_]]aaa^aaaaa_^][aa\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink121\").click(function(e){\n            e.preventDefault();\n            $(\"#showable121\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.15) Use the \ntail\n command to view the last \n8\n lines of the file \nsample_1.fastq\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIts very much like \nhead\n.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink123\").click(function(e){\n            e.preventDefault();\n            $(\"#showable123\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\ntail -8 sample_1.fastq\n@IRIS:7:32:731:717#0/1\nTAATAATTGGAGCCAAATCATGAATCAAAGGACATA\n+IRIS:7:32:731:717#0/1\nababbababbab]abbaa`babaaabbb`bbbabbb\n@IRIS:7:32:731:1228#0/1\nCTGATGCCGAGGCACGCCGTTAGGCGCGTGCTGCAG\n+IRIS:7:32:731:1228#0/1\n`aaaaa``aaa`a``a`^a`a`a_[a_a`a`aa`__\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink124\").click(function(e){\n            e.preventDefault();\n            $(\"#showable124\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.16) Use the \ngrep\n command to find out all the lines in \nmoby.txt\n that contain the word \n\"Ahab\"\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nOne might say we are 'looking for the \npattern\n \"Ahab\"'\n\n\n\n\n\n\nMore\n\n\n\n\n$ man grep\n...\nSYNOPSIS\n       grep [OPTIONS] PATTERN [FILE...]\n...\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink127\").click(function(e){\n            e.preventDefault();\n            $(\"#showable127\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable127\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink127\").text(\"More\");\n            } else {\n                $(\"#showablelink127\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink126\").click(function(e){\n            e.preventDefault();\n            $(\"#showable126\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ grep Ahab moby.txt\n\nWant to see what whaling is, eh? Have ye clapped eye on Captain Ahab?\n\n\nWho is Captain Ahab, sir?\n\n\nAye, aye, I thought so. Captain Ahab is the Captain of this ship.\n\n... AND MUCH MUCH MORE ...\n\n\n\n\nIf you want to know how many lines are in the output of the above command you can \"pipe\" it \ninto the \nwc -l\n command:\n\n\n$ grep Ahab moby.txt | wc -l\n491\n\n\n\n\nwhich shows that there are \n491\n lines in \nmoby.txt\n that contain the word Ahab.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink128\").click(function(e){\n            e.preventDefault();\n            $(\"#showable128\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.17) Use the \ngrep\n command to find out all the lines in \nexpectations.txt\n that contain the \nword \"the\" with a case insensitive search (it should count \"the\" \"The\" \"THE\" \"tHe\" etcetera)\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nOne might say we are \nignoring case\n.\n\n\n\n\n\n\nMore\n\n\n\n\n$ man grep\n...\n       -i, --ignore-case\n              Ignore case distinctions in both the PATTERN and the input files.  (-i is specified by POSIX.)\n...\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink131\").click(function(e){\n            e.preventDefault();\n            $(\"#showable131\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable131\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink131\").text(\"More\");\n            } else {\n                $(\"#showablelink131\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink130\").click(function(e){\n            e.preventDefault();\n            $(\"#showable130\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \n-i\n flag to \ngrep\n to make it perform case insensitive search:\n\n\n$ grep -i the expectations.txt\nThe Project Gutenberg EBook of Great Expectations, by Charles Dickens\nThis eBook is for the use of anyone anywhere at no cost and with\nre-use it under the terms of the Project Gutenberg License included\n[Project Gutenberg Editor's Note: There is also another version of\n... AND MUCH MUCH MORE ...\n\n\n\n\nAgain, \"pipe\" the output to \nwc -l\n to count the number of lines:\n\n\n$ grep -i the expectations.txt  | wc -l\n8165\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink132\").click(function(e){\n            e.preventDefault();\n            $(\"#showable132\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.18) Use the \ngzip\n command to compress the file \nsample_1.fastq\n. Use \ngunzip\n to decompress it \nback to the original contents.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the above commands along with \nman\n and \nls\n to see what happens to the file.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink134\").click(function(e){\n            e.preventDefault();\n            $(\"#showable134\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nCheck the file size of sample_1.fastq before compressing it:\n\n\n# check filesize\n$ ls -l sample_1.fastq\n-rw-r--r-- 1 training01 training 90849644 Jun 14 20:03 sample_1.fastq\n\n# compress it (takes a few seconds)\n$ gzip sample_1.fastq\n\n# check filesize (Note: its name changed)\n$ ls -l sample_1.fastq.gz\n-rw-r--r-- 1 training01 training 26997595 Jun 14 20:03 sample_1.fastq.gz\n\n# decompress it\n$ gunzip sample_1.fastq.gz\n\n$ ls -l sample_1.fastq\n-rw-r--r-- 1 training01 training 90849644 Jun 14 20:03 sample_1.fastq\n\n\n\n\nYou will see that when it was compressed it is \n26997595\n bytes in size, making it about \n0.3\n times the size of the \noriginal file.\n\n\nNote\n: in the above section the lines starting with \n#\n are comments so don't need to be copied but if you\ndo then they wont do anything.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink135\").click(function(e){\n            e.preventDefault();\n            $(\"#showable135\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 5: Pipes, output redirection and shell scripts\n\n\nIn this section we will cover a lot of the more advanced Unix concepts; it is here where you will start to see\nthe power of Unix.  I say \nstart\n because this is only the \"tip of the iceberg\".\n\n\nDuration\n: 50 minutes. \n\n\nRelevant commands\n: \nwc\n, \npaste\n, \ngrep\n, \nsort\n, \nuniq\n, \nnano\n, \ncut\n\n\n\n\n\n\n5.1) How many \nreads\n are contained in the file \nsample_1.fastq\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nExamine some of the file to work out how many lines each \nread\n takes up.\n\n\n\n\n\n\nMore\n\n\n\n\nCount the number of lines\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink138\").click(function(e){\n            e.preventDefault();\n            $(\"#showable138\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable138\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink138\").text(\"More\");\n            } else {\n                $(\"#showablelink138\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink137\").click(function(e){\n            e.preventDefault();\n            $(\"#showable137\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nWe can answer this question by counting the number of lines in the file and dividing by 4:\n\n\n$ wc -l sample_1.fastq\n3000000\n\n\n\n\nAnswer\n: There are \n3000000\n lines in the file representing \n750000\n reads.\n\n\nIf you want to do simple arithmetic at the command line then you can use the \"basic calculator\" \ncalled \nbc\n:\n\n\n$ echo \n3000000 / 4\n | bc\n750000\n\n\n\n\nNote\n: that the vertical bar character \"|\" is the Unix pipe (and is often \ncalled the \"pipe symbol\"). It is used for connecting the output of one command into the input of \nanother command. We'll see more examples soon.\n\n\n\nbc\n is suitable for small calculations, but it becomes cumbersome for more complex examples. If \nyou want to do more sophisticated calculations then we recommend to use a more general purpose \nprogramming language (such as Python etcetera).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink139\").click(function(e){\n            e.preventDefault();\n            $(\"#showable139\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.2) How many reads in \nsample_1.fastq\n contain the sequence \nGATTACA\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheck out exercise 4.16\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink141\").click(function(e){\n            e.preventDefault();\n            $(\"#showable141\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse \ngrep\n to find all the lines that contain \nGATTACA\n and \"pipe\" the output to \nwc -l\n to count them:\n\n\n$ grep GATTACA sample_1.fastq | wc -l\n1119\n\n\n\n\nAnswer\n: \n1119\n\n\nIf you are unsure about the possibility of upper and lower case characters then consider using \nthe \n-i\n (ignore case option for grep).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink142\").click(function(e){\n            e.preventDefault();\n            $(\"#showable142\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.3) On what line numbers do the sequences containing \nGATTACA\n occur?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWe are looking for the \nline numbers\n.\n\n\n\n\n\n\nMore\n\n\n\n\nCheck out the manpage for \ngrep\n and/or \nnl\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink145\").click(function(e){\n            e.preventDefault();\n            $(\"#showable145\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable145\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink145\").text(\"More\");\n            } else {\n                $(\"#showablelink145\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink144\").click(function(e){\n            e.preventDefault();\n            $(\"#showable144\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou can use the \n-n\n flag to grep to make it prefix each line with a line number:\n\n\nAnswer 1\n: \n\n\n$ grep -n GATTACA sample_1.fastq\n5078:AGGAAGATTACAACTCCAAGACACCAAACAAATTCC\n7170:AACTACAAAGGTCAGGATTACAAGCTCTTGCCCTTC\n8238:ATAGTTTTTTCGATTACATGGATTATATCTGTTTGC\n... AND MUCH MUCH MORE ...\n\n\n\n\nAnswer 2\n: Or you can use the \nnl\n command to number each line of sample_1.fastq and then search for \nGATTACA\n \nin the numbered lines:\n\n\n$ nl sample_1.fastq | grep GATTACA\n  5078  AGGAAGATTACAACTCCAAGACACCAAACAAATTCC\n  7170  AACTACAAAGGTCAGGATTACAAGCTCTTGCCCTTC\n  8238  ATAGTTTTTTCGATTACATGGATTATATCTGTTTGC\n... AND MUCH MUCH MORE ...\n\n\n\n\nJust the line numbers\n:\n\n\nIf you just want to see the line numbers then you can \"pipe\" the output of the above command into \n\ncut -f 1\n:\n\n\n$ nl sample_1.fastq | grep GATTACA | cut -f 1\n  5078\n  7170\n  8238\n... AND MUCH MUCH MORE ...\n\n\n\n\ncut\n will remove certain columns from the input; in this case it will remove all except column 1\n(a.k.a. field 1, hence the \n-f 1\n option)\n\n\n$ grep -n GATTACA sample_1.fastq | cut -d: -f 1\n5078\n7170\n8238\n... AND MUCH MUCH MORE ...\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink146\").click(function(e){\n            e.preventDefault();\n            $(\"#showable146\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.4) Use the \nnl\n command to print each line of \nsample_1.fastq\n with its corresponding line \nnumber at the beginning.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheck answer to 5.3.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink148\").click(function(e){\n            e.preventDefault();\n            $(\"#showable148\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ nl sample_1.fastq\n     1  @IRIS:7:1:17:394#0/1\n     2  GTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n     3  +IRIS:7:1:17:394#0/1\n     4  aaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n     5  @IRIS:7:1:17:800#0/1\n     6  GGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n     7  +IRIS:7:1:17:800#0/1\n     8  ababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n... AND MUCH MUCH MORE ...\n\n\n\n\nThere are a lot of lines in that file so this command might take a while to print all its output. \nIf you get tired of looking at the output you can kill the command with \ncontrol-c\n (hold the \n\ncontrol\n key down and simultaneously press the \"\nc\n\" character).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink149\").click(function(e){\n            e.preventDefault();\n            $(\"#showable149\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.5) Redirect the output of the previous command to a file called \nsample_1.fastq.nl\n. Check \nthe first \n20\n lines of \nsample_1.fastq.nl\n with the \nhead\n command. Use the \nless\n command to \ninteractively view the contents of \nsample_1.fastq.nl\n (use the arrow keys to navigate up and down, \n\nq\n to quit and '\n/\n' to search). Use the search facility in less to find occurrences of \n\nGATTACA\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nOk that one was tough, \n FILENAME\n is how you do it if you didn't break out an internet search for \n\"redirect the output in Unix\"\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink151\").click(function(e){\n            e.preventDefault();\n            $(\"#showable151\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ nl sample_1.fastq \n sample_1.fastq.nl\n\n\n\n\nThe greater-than sign \"\n\" is the file redirection operator. It causes the standard output of the \ncommand on the left-hand-side to be written to the file on the right-hand-side.\n\n\nYou should notice that the above command is much faster than printing the output to the screen. \nThis is because writing to disk can be performed much more quickly than rendering the output on \na terminal.\n\n\nTo check that the first 20 lines of the file look reasonable you can use the \nhead\n command like so:\n\n\n$ head -20 sample_1.fastq.nl\n     1  @IRIS:7:1:17:394#0/1\n     2  GTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n     3  +IRIS:7:1:17:394#0/1\n     4  aaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n     5  @IRIS:7:1:17:800#0/1\n     6  GGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n     7  +IRIS:7:1:17:800#0/1\n     8  ababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n...\n\n\n\n\nThe \nless\n command allows you to interactively view a file. The arrow keys move the page up and \ndown. You can search using the '\n/\n' followed by the search term. You can quit by pressing \"\nq\n\". Note \nthat the \nless\n command is used by default to display man pages.\n\n\n$ less sample_1.fastq.nl\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink152\").click(function(e){\n            e.preventDefault();\n            $(\"#showable152\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.6) The four-lines-per-read format of FASTQ is cumbersome to deal with. Often it would be \npreferable if we could convert it to tab-separated-value (TSV) format, such that each read appears \non a single line with each of its fields separated by tabs. Use the following command to convert \nsample_1.fastq.nl into TSV format:\n\n\n\n\n$ cat sample_1.fastq | paste - - - - \n sample_1.tsv\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink153\").click(function(e){\n            e.preventDefault();\n            $(\"#showable153\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \n'-'\n (dash) character has a special meaning when used in place of a file; it means use the standard\ninput instead of a real file.  Note: while it is fairly common in most Unix programs, not all wil support it.\n\n\nThe \npaste\n command is useful for merging multiple files together line-by-line, such that the \nNth\n \nline from each file is joined together into one line in the output, separated by default with a \n\ntab\n character. In the above example we give paste 4 copies of the contents of \nsample_1.fastq\n, \nwhich causes it to join consecutive groups of 4 lines from the file into one line of output.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink154\").click(function(e){\n            e.preventDefault();\n            $(\"#showable154\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.7) Do you expect the output of the following command to produce the same output as above? and why?\n\n\n\n\n$ paste sample_1.fastq sample_1.fastq sample_1.fastq sample_1.fastq \n sample_1b.tsv\n\n\n\n\nTry it, see what ends up in sample_1b.tsv (maybe use \nless\n)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink155\").click(function(e){\n            e.preventDefault();\n            $(\"#showable155\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nUse \nless\n to examine it.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink156\").click(function(e){\n            e.preventDefault();\n            $(\"#showable156\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: No, in the second instance we get 4 copies of each line.\n\n\nWhy\n: In the first command \npaste\n will use the input file (standard input) 4 times since the \ncat\n \ncommand will only give one copy of the file to \npaste\n, where as, in the second command \npaste\n will open \nthe file 4 times.  Note: this is quite confusing and is not necessory to remember; its just an interesting\nside point.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink157\").click(function(e){\n            e.preventDefault();\n            $(\"#showable157\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.8) Check that \nsample_1.tsv\n has the correct number of lines. Use the \nhead\n command to view \nthe first \n20\n lines of the file.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember the \nwc\n command.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink159\").click(function(e){\n            e.preventDefault();\n            $(\"#showable159\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nWe can count the number of lines in \nsample_1.tsv\n using \nwc\n:\n\n\n$ wc -l sample_1.tsv\n\n\n\n\nThe output should be \n750000\n as expected (1/4 of the number of lines in sample_1.fastq).\n\n\nTo view the first \n20\n lines of \nsample_1.tsv\n use the \nhead\n command:\n\n\n$ head -20 sample_1.tsv\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink160\").click(function(e){\n            e.preventDefault();\n            $(\"#showable160\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.9) Use the \ncut\n command to print out the second column of \nsample_1.tsv\n. Redirect the \noutput to a file called \nsample_1.dna.txt\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nSee exercise 5.3 (for cut) and 5.5 (redirection)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink162\").click(function(e){\n            e.preventDefault();\n            $(\"#showable162\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe file sample_1.tsv is in column format. The cut command can be used to select certain columns \nfrom the file. The DNA sequences appear in column 2, we select that column using the -f 2 flag \n(the f stands for \"field\").\n\n\ncut -f 2 sample_1.tsv \n sample_1.dna.txt\n\n\n\n\nCheck that the output file looks reasonable using \nhead\n or \nless\n.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink163\").click(function(e){\n            e.preventDefault();\n            $(\"#showable163\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.10) Use the \nsort\n command to sort the lines of \nsample_1.dna.txt\n and redirect the output to \n\nsample_1.dna.sorted.txt\n. Use \nhead\n to look at the first few lines of the output file. You should \nsee a lot of repeated sequences of As.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse \nman\n (sort) and see exercise 5.5 (redirection)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink165\").click(function(e){\n            e.preventDefault();\n            $(\"#showable165\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ sort sample_1.dna.txt \n sample_1.dna.sorted.txt\n\n\n\n\nRunning \nhead\n on the output file reveals that there are duplicate DNA sequences in the input FASTQ \nfile.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink166\").click(function(e){\n            e.preventDefault();\n            $(\"#showable166\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.11) Use the \nuniq\n command to remove duplicate consecutive lines from \nsample_1.dna.sorted.txt\n, \nredirect the result to \nsample_1.dna.uniq.txt\n. Compare the number of lines in sample1_dna.txt to \nthe number of lines in \nsample_1.dna.uniq.txt\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nI am pretty sure you have already used \nman\n (or just guessed how to use \nuniq\n).  You're also a gun at \nredirection now.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink168\").click(function(e){\n            e.preventDefault();\n            $(\"#showable168\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ uniq sample_1.dna.sorted.txt \n sample_1.dna.uniq.txt\n\n\n\n\nCompare the outputs of:\n\n\n$ wc -l sample_1.dna.sorted.txt\n750000\n$ wc -l sample_1.dna.uniq.txt\n614490\n\n\n\n\nView the contents of \nsample_1.dna.uniq.txt\n to check that the duplicate DNA sequences have been \nremoved.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink169\").click(function(e){\n            e.preventDefault();\n            $(\"#showable169\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.12) Can you modify the command from above to produce \nonly\n those sequences of DNA which were \nduplicated in \nsample_1.dna.sorted.txt\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheckout the \nuniq\n manpage\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink171\").click(function(e){\n            e.preventDefault();\n            $(\"#showable171\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nLook at the man page for uniq.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink172\").click(function(e){\n            e.preventDefault();\n            $(\"#showable172\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \n-d\n flag to \nuniq\n to print out only the duplicated lines from the file:\n\n\n$ uniq -d sample_1.dna.sorted.txt \n sample_1.dna.dup.txt\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink173\").click(function(e){\n            e.preventDefault();\n            $(\"#showable173\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.13) Write a \nshell pipeline\n which will print the number of duplicated DNA sequences in \nsample_1.fastq.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThat is, \npiping\n most of the commands you used above instead of redirecting to file\n\n\n\n\n\n\nMore\n\n\n\n\nI.e. 6 commands (\ncat\n, \npaste\n, \ncut\n, \nsort\n, \nuniq\n, \nwc\n)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink176\").click(function(e){\n            e.preventDefault();\n            $(\"#showable176\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable176\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink176\").text(\"More\");\n            } else {\n                $(\"#showablelink176\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink175\").click(function(e){\n            e.preventDefault();\n            $(\"#showable175\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nFinally we can 'pipe' all the pieces together into a sophisticated pipeline which starts with a \nFASTQ file and ends with a list of duplicated DNA sequences:\n\n\nAnswer\n:\n\n\n$ cat sample_1.fastq | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\n56079\n\n\n\n\nThe output file should have \n56079\n lines.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink177\").click(function(e){\n            e.preventDefault();\n            $(\"#showable177\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.14) (Advanced) Write a shell script which will print the number of duplicated DNA sequences \nin sample_1.fastq.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheck out the \nsleepy\n file (with \ncat\n or \nnano\n); there is a bit of magic on the first line that you will need. \n\n\nYou also need to tell bash that this file can be executed (check out \nchmod\n command).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink179\").click(function(e){\n            e.preventDefault();\n            $(\"#showable179\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nPut the answer to \n5.13\n into a file called \nsample_1_dups.sh\n (or whatever you want). Use \nnano\n to \ncreate the file. \n\n\nAnswer\n: the contents of the file will look like this:\n\n\n#!/bin/bash\n\ncat sample_1.fastq | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\n\n\n\n\nNote\n: the first line has special meaning.  If it starts with '\n#!\n' (Hash \nthen exclamation mark) then it tells bash this file is a script that can be interpreted.  The command \n(including full path) used to intepret the script is placed right after the magic code.\n\n\n\nGive everyone execute permissions on the file with chmod:\n\n\n$ chmod +x sample_1_dups.sh \n\n\n\n\nYou can run the script like so:\n\n\n$ ./sample_1_dups.sh\n\n\n\n\nIf all goes well the script should behave in exactly the same way as the answer to 5.13.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink180\").click(function(e){\n            e.preventDefault();\n            $(\"#showable180\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.15) (Advanced) Modify your shell script so that it accepts the name of the input FASTQ file \nas a command line parameter.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nShell scripts can refer to command line arguments by their position using special variables called \n\n$0\n, \n$1\n, \n$2\n and so on. \n\n\n\n\n\n\nMore\n\n\n\n\n$0\n refers to the name of the script as it was called on the command line. \n\n$1\n refers to the first command line argument, and so on.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink183\").click(function(e){\n            e.preventDefault();\n            $(\"#showable183\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable183\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink183\").text(\"More\");\n            } else {\n                $(\"#showablelink183\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink182\").click(function(e){\n            e.preventDefault();\n            $(\"#showable182\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nCopy the shell script from \n5.14\n into a new file:\n\n\n$ cp sample_1_dups.sh fastq_dups.sh\n\n\n\n\nEdit the new shell script file and change it to use the command line parameters:\n\n\n#!/bin/bash\n\ncat $1 | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\n\n\n\n\nYou can run the new script like so:\n\n\n$ ./fastq_dups.sh sample_1.fastq\n\n\n\n\nIn the above example the script takes \nsample_1.fastq\n as input and prints the number of duplicated \nsequences as output.\n\n\nA better Answer\n:\n\n\nIdeally we would write our shell script to be more robust. At the moment it just assumes there \nwill be at least one command line argument. However, it would be better to check and produce an \nerror message if insufficient arguments were given:\n\n\n#!/bin/bash\nif [ $# -eq 1 ]; then\n    cat $1 | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\nelse\n    echo \nUsage: $0 \nfastq_filename\n\n    exit 1\nfi\n\n\n\n\nThe '\nif ...; then\n' line means: do the following line(s) ONLY if the \n...\n (called condition) bit is true.\n\n\nThe '\nelse\n' line means: otherwise do the following line(s) instead.  Note: it is optional.\n\n\nThe '\nfi\n' line means: this marks the end of the current \nif\n or \nelse\n section.\n\n\nThe '\n[ $# -eq 1 ]\n' part is the condition:\n\n\n\n\n$#\n: is a special shell variable that indicates how many command line arguments were given. \n\n\n-eq\n: checks if the numbers on either side if it are equal.\n\n\n1\n: is a number one\n\n\n\n\nSpaces in conditions\n:\nBash is VERY picky about the spaces within the conditions; if you get it wrong it will just behave strangely \n(without warning).  You MUST put a space near the share brackets and between each part of the condition!\n\n\n\nSo in words our script is saying \"if user provided 1 filename, then count the duplicates, otherwise print an error\".\n\n\nExit-status\n:\nIt is a Unix standard that when the user provides incorrect commandline arguments we print a usage message \nand return a *non-zero* exit status.  The *exit status* is a standard way for other programs to know if\nour program ran correctly; 0 means everything went as expected, any other number is an error.  If you don't\nprovide an *exit ..* line then it automatically returns a 0 for you.\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink184\").click(function(e){\n            e.preventDefault();\n            $(\"#showable184\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.16) (Advanced) Modify your shell script so that it accepts zero or more FASTQ files on the \ncommand line argument and outputs the number of duplicated DNA sequences in each file.\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\nWe can add a loop to our script to accept multiple input FASTQ files:\n\n\n#!/bin/bash\nfor file in $@; do\n    dups=$(cat $file | paste - - - - | cut -f 2 | sort | uniq -d | wc -l)\n    echo \n$file $dups\n\ndone\n\n\n\n\nThere's a lot going on in this script.\n\n\nThe \n$@\n is a sequence of all command line arguments.\n\n\nThe '\nfor ...; do\n' (a.k.a. for loop) iterates over that sequence one argument at a time, assigning the current argument in \nthe sequence to the variable called \nfile\n.\n\n\nThe \n$(...)\n allow us to capture the output of another command (in-place of the \n...\n).  In this \ncase we capture the output of the pipeline and save it to the variable called \ndups\n.\n\n\nIf you had multiple FASTQ files available you could run the script like so:\n\n\n./fastq_dups.sh sample_1.fastq sample_2.fastq sample_3.fastq\n\n\n\n\nAnd it would produce output like:\n\n\nsample_1.fastq 56079\nsample_2.fastq XXXXX\nsample_3.fastq YYYYY\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink186\").click(function(e){\n            e.preventDefault();\n            $(\"#showable186\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nFinished\n\n\nWell done, you learnt a lot over the last 5 topics and you should be proud of your achievement; it \nwas a lot to take in.\n\n\nFrom here you should be confortable around the Unix command line and ready to take on the HPC \nWorkshop.\n\n\nYou will no-doubt forget a lot of what you learnt here so I encourage you to save a link to this \nWorkshop for later reference.\n\n\nThank you for your attendance, please don't forget to complete the VLSCI training survey and give it\nback to the Workshop facilitators.", 
            "title": "Introduction to Unix"
        }, 
        {
            "location": "/tutorials/unix/#introduction-to-unix", 
            "text": "A hands-on-workshop covering the basics of the Unix/Linux command line interface", 
            "title": "Introduction to Unix"
        }, 
        {
            "location": "/tutorials/unix/#how-to-use-this-workshop", 
            "text": "The workshop is broken up into a number of  Topics  each focusing on a particular aspect of Unix.  You should take a short break between \neach to refresh and relax before tackling the next.  Topic s may start with some background followed by a number of  exercises .  Each  exercise  begins with a  question , then \nsometimes a  hint  (or two) and finishes with the suggested  answer .  Question  An example question looks like:    What is the Answer to Life?    (function(w,d,u){w.readyQ=[];w.bindReadyQ=[];function p(x,y){if(x==\"ready\"){w.bindReadyQ.push(y);}else{w.readyQ.push(x);}};var a={ready:p,bind:p};w.$=w.jQuery=function(f){if(f===d||f===u){return a}else{p(f)}}})(window,document)  Hint  Depending on how much of a challenge you like, you may choose to use hints.  Even if you work out the answer without hints, its a good \nidea to read the hints afterwards because they contain extra information that is good to know.  Note:  hint s may be staged, that is, there may be a  more  section within a hint for further hints    Hint   - click here to reveal hint   What is the answer to everything?  As featured in \"The Hitchhiker's Guide to the Galaxy\"    More   - and here to show more   It is probably a two digit number     \n    $(document).ready(function(){\n        $(\"#showablelink2\").click(function(e){\n            e.preventDefault();\n            $(\"#showable2\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable2\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink2\").text(\"More\");\n            } else {\n                $(\"#showablelink2\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink1\").click(function(e){\n            e.preventDefault();\n            $(\"#showable1\").toggleClass(\"showable-hidden\");\n        });\n    });\n      Answer  Once you have worked out the answer to the question expand the Answer section to check if you got it correct.    Answer   - click here to reveal answer   Answer : 42  Ref:  Number 42 (Wikipedia)     \n    $(document).ready(function(){\n        $(\"#showablelink3\").click(function(e){\n            e.preventDefault();\n            $(\"#showable3\").toggleClass(\"showable-hidden\");\n        });\n    });\n      Usage Style  This workshop attempts to cater for two usage styles:   Problem solver : for those who like a challenge and learn best be trying to solve the problems by-them-selves (hints optional):  Attempt to answer the question by yourself.  Use hints when you get stuck.  Once solved, reveal the answer and read through our suggested solution.  Its a good idea to read the hints and answer description as they often contain extra useful information.    By example :  for those who learn by following examples:   Expand  all sections  Expand the Answer section at the start of each question and follow along with the commands that are shown and check you get the\n  same (or similar) answers.  Its a good idea to read the hints and answer description as they often contain extra useful information.", 
            "title": "How to use this workshop"
        }, 
        {
            "location": "/tutorials/unix/#topic-1-remote-log-in", 
            "text": "In this topic we will learn how to connect to a  Unix  computer via a method called  SSH  and run a few basic commands.  Connecting to a Unix computer  To begin this workshop you will need to connect to an HPC.  Today we will use the LIMS-HPC.  The computer called  lims-hpc-m  (m is for master which is another name for head node) is the one that coordinates all the HPCs tasks.  Server details :   host : lims-hpc-m.latrobe.edu.au  port : 6022   username : trainingXX (where XX is a two digit number, provided at workshop)  password : (provided at workshop)      Mac OS X / Linux   Both Mac OS X and Linux come with a version of ssh (called OpenSSH) that can be used from the command line.  To use OpenSSH you must \nfirst start a terminal program on your computer.  On OS X the standard terminal is called Terminal, and it is installed by default. \nOn Linux there are many popular terminal programs including: xterm, gnome-terminal, konsole (if you aren't sure, then xterm is a good \ndefault).  When you've started the terminal you should see a command prompt.  To log into LIMS-HPC, for example, type this command at \nthe prompt and press return (where the word username is replaced with your LIMS-HPC username):  ssh -p 6022 username@lims-hpc-m.latrobe.edu.au  The same procedure works for any other machine where you have an account except most other HPCs will not need the  -p 6022  \n(which is telling ssh to connect on a non-standard port number).  You may be presented with a message along the lines of:  The authenticity of host 'lims-hpc-m.latrobe.edu.au (131.172.36.150)' can't be  established.\n...\nAre you sure you want to continue connecting (yes/no)?  Although you should never ignore a warning, this particular one is nothing to be concerned about; type  yes  and then  press enter . \nIf all goes well you will be asked to enter your password.  Assuming you type the correct username and password the system should \nthen display a welcome message, and then present you with a Unix prompt.  If you get this far then you are ready to start entering \nUnix commands and thus begin using the remote computer.     \n    $(document).ready(function(){\n        $(\"#showablelink4\").click(function(e){\n            e.preventDefault();\n            $(\"#showable4\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Windows   On Microsoft Windows (Vista, 7, 8) we recommend that you use the PuTTY ssh client.  PuTTY (putty.exe) can be downloaded \nfrom this web page:  http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html  Documentation for using PuTTY is here:  http://www.chiark.greenend.org.uk/~sgtatham/putty/docs.html  When you start PuTTY you should see a window which looks something like this:   To connect to LIMS-HPC you should enter its hostname into the box entitled \"Host Name (or IP address)\" and  6022  in the port, \nthen click on the Open button. All of the settings should remain the same as they were when PuTTY started (which should be the \nsame as they are in the picture above).  In some circumstances you will be presented with a window entitled PuTTY Security Alert. It will say something along the lines \nof  \"The server's host key is not cached in the registry\" . This is nothing to worry about, and you should agree to continue (by \nclicking on Yes). You usually see this message the first time you try to connect to a particular remote computer.  If all goes well, a terminal window will open, showing a prompt with the text  \"login as:\" . An example terminal window is shown \nbelow. You should type your LIMS-HPC username and press enter. After entering your username you will be prompted for your \npassword. Assuming you type the correct username and password the system should then display a welcome message, and then \npresent you with a Unix prompt. If you get this far then you are ready to start entering Unix commands and thus begin using \nthe remote computer.      \n    $(document).ready(function(){\n        $(\"#showablelink5\").click(function(e){\n            e.preventDefault();\n            $(\"#showable5\").toggleClass(\"showable-hidden\");\n        });\n    });\n      Note : for security reasons ssh will not display any characters when you enter your password. This \ncan be confusing because it appears as if your typing is not recognised by the computer. Don\u2019t be \nalarmed; type your password in and press return at the end.  LIMS-HPC is a high performance computer for La Trobe Users.  Logging in connects your local computer \n(e.g. laptop) to LIMS-HPC, and allows you to type commands into the Unix prompt which are run on \nthe HPC, and have the results displayed on your local screen.  You will be allocated a training account on LIMS-HPC for the duration of the workshop. Your \nusername and password will be supplied at the start of the workshop.  Log out of LIMS-HPC, and log back in again (to make sure you can repeat the process).  All the remaining parts assume that you are logged into LIMS-HPC over ssh.  Exercises    1.1) When you\u2019ve logged into LIMS-HPC run the following commands and see what they do:   who\nwhoami\ndate\ncal\nhostname\n/home/group/common/training/Intro_to_Unix/hi     \n    $(document).ready(function(){\n        $(\"#showablelink6\").click(function(e){\n            e.preventDefault();\n            $(\"#showable6\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer    who : displays a list of the users who are currently using this Unix computer.  whoami : displays your username (i.e. they person currently logged in).  date : displays the current date and time.  cal : displays a calendar on the terminal.  It can be configured to display more than just \nthe current month.  hostname : displays the name of the computer we are logged in to.  /home/group/common/training/Intro_to_Unix/hi : displays the text \"Hello World\"      \n    $(document).ready(function(){\n        $(\"#showablelink7\").click(function(e){\n            e.preventDefault();\n            $(\"#showable7\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 1: Remote log in"
        }, 
        {
            "location": "/tutorials/unix/#topic-2-exploring-your-home-directory", 
            "text": "In this topic we will learn how to \"look\" at the filesystem and further expand our repertoire of Unix commands.   Duration : 20 minutes.   Relevant commands :  ls ,  pwd ,  echo ,  man  Your home directory contains your own private working space.  Your  current working directory  is automatically set \nto your  home  directory when you log into a Unix computer.    2.1) Use the  ls  command to list the files in your  home  directory.  How many files are there?      Hint   Literally, type  ls  and press the  ENTER  key.     \n    $(document).ready(function(){\n        $(\"#showablelink9\").click(function(e){\n            e.preventDefault();\n            $(\"#showable9\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ ls\nexp01  file01  muscle.fq  When running the  ls  command with no options it will list files in your current working directory.  The place \nwhere you start when you first login is your  HOME  directory.  Answer : 3 (exp01, file01 and muscle.fq)     \n    $(document).ready(function(){\n        $(\"#showablelink10\").click(function(e){\n            e.preventDefault();\n            $(\"#showable10\").toggleClass(\"showable-hidden\");\n        });\n    });\n       The above answer is not quite correct.  There are a number of  hidden  files in your home directory as well.    2.2) What  flag  might you use to display  all  files with the  ls  command?  How many files are really there?      Hint   Take the  all  quite literally.    More   Type  ls --all  and press the  ENTER  key.     \n    $(document).ready(function(){\n        $(\"#showablelink13\").click(function(e){\n            e.preventDefault();\n            $(\"#showable13\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable13\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink13\").text(\"More\");\n            } else {\n                $(\"#showablelink13\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink12\").click(function(e){\n            e.preventDefault();\n            $(\"#showable12\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer 1 :  --all  (or  -a ) flag  Now you should see several files in your home directory whose names all begin with a dot. All these files are \ncreated automatically for your user account. They are mostly configuration options for various programs including \nthe shell. It is safe to ignore them for the moment.  $ ls --all\n.              .bash_logout    exp01    .lesshst\n..             .bash_profile   file01   muscle.fq\n.bash_history  .bashrc         .kshrc   .viminfo  There are two trick files here; namely  .  and  ..  which are not real files but instead, shortcuts.   .  is a shortcut\nfor the current directory and  ..  a shortcut for the directory above the current one.  Answer 2 : 10 files (don't count  .  and  .. )     \n    $(document).ready(function(){\n        $(\"#showablelink14\").click(function(e){\n            e.preventDefault();\n            $(\"#showable14\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.3) What is the full path name of your  home  directory?      Hint   Remember your  Current Working Directory  start's in your  home  directory (and the hint from the slides).    More   Try a shortened version of  print working directory     \n    $(document).ready(function(){\n        $(\"#showablelink17\").click(function(e){\n            e.preventDefault();\n            $(\"#showable17\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable17\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink17\").text(\"More\");\n            } else {\n                $(\"#showablelink17\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink16\").click(function(e){\n            e.preventDefault();\n            $(\"#showable16\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You can find out the full path name of the current working directory with the  pwd  command. Your home directory \nwill look something like this:  $ pwd\n/home/trainingXY  Answer :  /home/trainingXY  where  XY  is replaced by some 2 digit sequence.  Alternate method :\nYou can also find out the name of your home directory by printing the value of the  $HOME  shell variable:  echo $HOME     \n    $(document).ready(function(){\n        $(\"#showablelink18\").click(function(e){\n            e.preventDefault();\n            $(\"#showable18\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.4) Run  ls  using the long flag ( -l ), how did the output change?      Hint   Run  ls -l     \n    $(document).ready(function(){\n        $(\"#showablelink20\").click(function(e){\n            e.preventDefault();\n            $(\"#showable20\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer : it changed the output to place 1 file/directory per line.  It also added some extra information\nabout each.  $ ls -l\ntotal 32\ndrwxr-x--- 2 training01 training 2048 Jun 14 11:28 exp01\n-rw-r----- 1 training01 training   97 Jun 14 11:28 file01\n-rw-r----- 1 training01 training 2461 Jun 14 11:28 muscle.fq  Details :  drwxr-x--- 2 training01 training 2048 Jun 14 11:28 exp01\n\\--------/ ^ \\--------/ \\------/ \\--/ \\----------/ \\---/\npermission |  username   group   size    date       name\n       /---^---\\\n       linkcount  Where:   permissions : 4 parts, file type, user perms, group perms and other perms  filetype : 1 character,  d  = directory and  -  regular file  user  permissions: 3 characters,  r  = read,  w  = write,  x  = execute and  -  no permission  group  permissions: same as user except for users within the owner group  other  permissions: same as user except for users that are not in either user  or   group    username : the user who  owns  this file/directory  group : the group name who  owns  this file/directory  size : the number of bytes this file/directory takes to store on disk  date : the date and time when this file/directory was  last edited  name : name of the file  linkcount : technical detail which represents the number of links this file has in the file system (safe to ignore)      \n    $(document).ready(function(){\n        $(\"#showablelink21\").click(function(e){\n            e.preventDefault();\n            $(\"#showable21\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.5) What type of file is  exp01  and  muscle.fq ?      Hint   Check the output from the  ls -l .     \n    $(document).ready(function(){\n        $(\"#showablelink23\").click(function(e){\n            e.preventDefault();\n            $(\"#showable23\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer :   exp01 : Directory (given the 'd' as the first letter of its permissions)  muscle.fq : Regular File (given the '-')      \n    $(document).ready(function(){\n        $(\"#showablelink24\").click(function(e){\n            e.preventDefault();\n            $(\"#showable24\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.6) Who has permission to  read ,  write  and  execute  your  home  directory?      Hint   You can also give  ls  a filename as the first option.    More   ls -l  will show you the contents of the  CWD ; how might you see the contents of the  parent  directory? (remember\nthe slides)     \n    $(document).ready(function(){\n        $(\"#showablelink27\").click(function(e){\n            e.preventDefault();\n            $(\"#showable27\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable27\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink27\").text(\"More\");\n            } else {\n                $(\"#showablelink27\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink26\").click(function(e){\n            e.preventDefault();\n            $(\"#showable26\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   If you pass the  -l  flag to ls it will display a \"long\" listing of file information including file permissions.  There are various ways you could find out the permissions on your home directory.  Method 1 : given we know the  CWD  is our home directory.  $ ls -l ..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...  The  ..  refers to the parent directory.  Method 2 : using $HOME.  This works no matter what our  CWD  is set to.   You could list the permissions of all files and directories in the parent directory of your home:  $ ls -l $HOME/..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...  In this case we use the shell variable to refer to our home directory.  Method 3 : using  ~  (tilde) shortcut  You may also refer to your home directory using the  ~  (tilde) character:  $ ls -l ~/..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...  All 3 of the methods above mean the same thing.  You will see a list of files and directories in the parent directory of your home directory. One of them will \nbe the name of your home directory, something like  trainingXY .  Where  XY  is replaced by a two digit string  Altername : using the  -a  flag and looking at the  .  (dot) special file.  $ ls -la\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 .\n...  Answer :  drwxr-x---   You : read (see filenames), write (add, delete files), execute (change your CWD to this directory).  Training users : read, execute  Everyone else : No access   Discussion on Permissions :  The permission string is  \"drwxr-x---\" . The  d  means it is a directory. The  rwx  means that the owner of the directory \n(your user account) can  read ,  write  and  execute  the directory. Execute permissions on a directory means that you \ncan  cd  into the directory. The  r-x  means that anyone in the same user group as  training  can read or execute the \ndirectory. The  ---  means that nobody else (other users on the system) can do anything with the directory.     \n    $(document).ready(function(){\n        $(\"#showablelink28\").click(function(e){\n            e.preventDefault();\n            $(\"#showable28\").toggleClass(\"showable-hidden\");\n        });\n    });\n        man  is for manual : and it will be your best friend!  Manual pages include a lot of detail about a command and its available flags/options.  It should be your first (or second) \nport of call when you are trying to work out what a command or option does.  You can scroll  up  and  down  in the man page using the  arrow  keys.  You can search in the man page using the forward \nslash followed by the search text followed by the  ENTER  key. e.g. \ntype  /hello  and press  ENTER  to search for the word  hello .  Press  n  key to find next \noccurance of  hello  etc.  You can  quit  the man page by pressing  q .      2.7) Use the  man  command to find out what the  -h  flag does for  ls      Hint   Give  ls  as an option to  man  command.    More   man ls     \n    $(document).ready(function(){\n        $(\"#showablelink31\").click(function(e){\n            e.preventDefault();\n            $(\"#showable31\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable31\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink31\").text(\"More\");\n            } else {\n                $(\"#showablelink31\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink30\").click(function(e){\n            e.preventDefault();\n            $(\"#showable30\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the following command to view the  man  page for  ls :  $ man ls  Answer : You should discover that the  -h  option prints file sizes in human readable format  -h, --human-readable\n              with -l, print sizes in human readable format (e.g., 1K 234M 2G)     \n    $(document).ready(function(){\n        $(\"#showablelink32\").click(function(e){\n            e.preventDefault();\n            $(\"#showable32\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.8) Use the  -h , how did the output change of  muscle.fq ?      Hint   Don't forget the  -l  option too.    More   Run  ls -lh     \n    $(document).ready(function(){\n        $(\"#showablelink35\").click(function(e){\n            e.preventDefault();\n            $(\"#showable35\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable35\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink35\").text(\"More\");\n            } else {\n                $(\"#showablelink35\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink34\").click(function(e){\n            e.preventDefault();\n            $(\"#showable34\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ ls -lh\n...\n-rw-r----- 1 training01 training 2.5K Jun 14 11:28 muscle.fq  Answer : it changed the output so the  filesize  of  muscle.fq  is now  2.5K  instead of  2461     \n    $(document).ready(function(){\n        $(\"#showablelink36\").click(function(e){\n            e.preventDefault();\n            $(\"#showable36\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 2: Exploring your home directory"
        }, 
        {
            "location": "/tutorials/unix/#topic-3-exploring-the-file-system", 
            "text": "In this topic we will learn how to move around the filesystem and see what is there.  Duration : 30 minutes.   Relevant commands :  pwd ,  cd ,  ls ,  file    3.1) Print the value of your current working directory.      Answer   The  pwd  command prints the value of your current working directory.  $ pwd\n/home/training01     \n    $(document).ready(function(){\n        $(\"#showablelink38\").click(function(e){\n            e.preventDefault();\n            $(\"#showable38\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.2) List the contents of the root directory, called ' / ' (forward \nslash).      Hint   ls  expects a single option which is the directory to change too.     \n    $(document).ready(function(){\n        $(\"#showablelink40\").click(function(e){\n            e.preventDefault();\n            $(\"#showable40\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ ls /\napplications-merged  etc         media    root     tmp\nbin                  home        mnt      sbin     usr\nboot                 lib         oldhome  selinux  var\ndata                 lib64       opt      srv\ndev                  lost+found  proc     sys  Here we see that  ls  can take a filepath as its argument, which allows you to list the contents of directories \nother than your current working directory.     \n    $(document).ready(function(){\n        $(\"#showablelink41\").click(function(e){\n            e.preventDefault();\n            $(\"#showable41\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.3) Use the  cd  command to change your working directory to the root directory.  Did your prompt \nchange?      Hint   cd  expects a single option which is the directory to change to     \n    $(document).ready(function(){\n        $(\"#showablelink43\").click(function(e){\n            e.preventDefault();\n            $(\"#showable43\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The  cd  command changes the value of your current working directory. To change to the root directory use the \nfollowing command:  $ cd /  Answer : Yes, it now says the CWD is  /  instead of  ~ .  Some people imagine that changing the working directory is akin to moving your focus within the file system. \nSo people often say \"move to\", \"go to\" or \"charge directory to\" when they want to change the working directory.  The root directory is special in Unix. It is the topmost directory in the whole file system.     \n    $(document).ready(function(){\n        $(\"#showablelink44\").click(function(e){\n            e.preventDefault();\n            $(\"#showable44\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Output on ERROR only : Many Unix commands will not produce any output if everything went well;  cd  is one\nsuch command.  However, it will get grumpy if something went wrong by way of an error message on-screen.     3.4) List the contents of the CWD and verify it matches the list in 3.2      Hint   ls     \n    $(document).ready(function(){\n        $(\"#showablelink46\").click(function(e){\n            e.preventDefault();\n            $(\"#showable46\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Assuming you have changed to the root directory then this can be achieved with  ls , or  ls -a  (for all files) or  ls -la  for a long listing of all files.  If you are not currently in the root directory then you can list its contents by passing it as an argument to ls:  $ ls\napplications-merged  etc         media    root     tmp\nbin                  home        mnt      sbin     usr\nboot                 lib         oldhome  selinux  var\ndata                 lib64       opt      srv\ndev                  lost+found  proc     sys  Answer : Yes, we got the same output as exercise 3.2     \n    $(document).ready(function(){\n        $(\"#showablelink47\").click(function(e){\n            e.preventDefault();\n            $(\"#showable47\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.5) Change your current working directory back to your home directory. What is the simplest Unix command that \nwill get you back to your home directory from anywhere else in the file system?      Hint   The answer to exercise 2.6 might give some hints on how to get back to the home directory    More   $HOME ,  ~ ,  /home/trainingXY  are all methods to name your home directory.  Yet there is a simpler method; the answer\nis buried in  man cd  however  cd  doesn't its own manpage so you will need to search for it.     \n    $(document).ready(function(){\n        $(\"#showablelink50\").click(function(e){\n            e.preventDefault();\n            $(\"#showable50\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable50\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink50\").text(\"More\");\n            } else {\n                $(\"#showablelink50\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink49\").click(function(e){\n            e.preventDefault();\n            $(\"#showable49\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  cd  command to change your working directory to your home directory. There are a number of ways to refer \nto your home directory:  cd $HOME  is equivalent to:  cd ~  The simplest way to change your current working directory to your home directory is to run the  cd  command with \nno arguments:  Answer : the simplest for is cd with NO options.  cd  This is a special-case behaviour which is built into  cd  for convenience.     \n    $(document).ready(function(){\n        $(\"#showablelink51\").click(function(e){\n            e.preventDefault();\n            $(\"#showable51\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.6) Change your working directory to  /home/group/common/training/Intro_to_Unix/      Answer   cd /home/group/common/training/Intro_to_Unix/     \n    $(document).ready(function(){\n        $(\"#showablelink53\").click(function(e){\n            e.preventDefault();\n            $(\"#showable53\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.7) List the contents of that directory. How many files does it contain?      Hint   ls     \n    $(document).ready(function(){\n        $(\"#showablelink55\").click(function(e){\n            e.preventDefault();\n            $(\"#showable55\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You can do this with  ls  $ ls\nexpectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy  Answer : 7 files (expectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy)     \n    $(document).ready(function(){\n        $(\"#showablelink56\").click(function(e){\n            e.preventDefault();\n            $(\"#showable56\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.8) What kind of  file  is  /home/group/common/training/Intro_to_Unix/sleepy ?      Hint   Take the word  file  quite literally.    More   file sleepy     \n    $(document).ready(function(){\n        $(\"#showablelink59\").click(function(e){\n            e.preventDefault();\n            $(\"#showable59\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable59\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink59\").text(\"More\");\n            } else {\n                $(\"#showablelink59\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink58\").click(function(e){\n            e.preventDefault();\n            $(\"#showable58\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  file  command to get extra information about the contents of a file:  Assuming your current working directory is  /home/group/common/training/Intro_to_Unix/  $ file sleepy\nBourne-Again shell script text executable  Otherwise specify the full path of sleepy:  $ file /home/group/common/training/Intro_to_Unix/sleepy\nBourne-Again shell script text executable  Answer : Bourne-Again shell script text executable  The \"Bourne-Again shell\" is more commonly known as BASH. The  file  command is telling us that sleepy \nis (probably) a shell script written in the language of BASH.  The file command uses various heuristics to guess the \"type\" of a file. If you want to know how it works \nthen read the Unix manual page like so:  man file     \n    $(document).ready(function(){\n        $(\"#showablelink60\").click(function(e){\n            e.preventDefault();\n            $(\"#showable60\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.9) What kind of  file  is  /home/group/common/training/Intro_to_Unix/hi ?      Hint   Take the word  file  quite literally.     \n    $(document).ready(function(){\n        $(\"#showablelink62\").click(function(e){\n            e.preventDefault();\n            $(\"#showable62\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the file command again. If you are in the same directory as  hi  then:  $ file hi\nELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux \n2.6.9, not stripped  Answer : ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux   This rather complicated output is roughly saying that the file called  hi  contains a binary executable \nprogram (raw instructions that the computer can execute directly).     \n    $(document).ready(function(){\n        $(\"#showablelink63\").click(function(e){\n            e.preventDefault();\n            $(\"#showable63\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.10) What are the file permissions of  /home/group/common/training/Intro_to_Unix/sleepy ? \nWhat do they mean?      Hint   Remember the  ls  command, and don't forget the  -l  flag     \n    $(document).ready(function(){\n        $(\"#showablelink65\").click(function(e){\n            e.preventDefault();\n            $(\"#showable65\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You can find the permissions of  sleepy  using the  ls  command with the  -l  flag. If you are in the same \ndirectory as  sleepy  then:  $ ls -l sleepy\n-rw-r--r-- 1 arobinson common 183 Feb  9 16:36 sleepy  Answer : We can see that this particular instance of sleepy is owned by the user arobinson, and is part of the common \nuser group. It is 183 bytes in size, and was last modified on the 9th of February at 4:36pm. The file is \nreadable to everyone, and writeable only to training01.  The digit '1' between the file permission string and \nthe owner indicates that there is one link to the file. The Unix file system allows files to be referred to \nby multiple \"links\". When you create a file it is referred to by one link, but you may add others later. For \nfuture reference: links are created with the  ln  command.     \n    $(document).ready(function(){\n        $(\"#showablelink66\").click(function(e){\n            e.preventDefault();\n            $(\"#showable66\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.11) Change your working directory back to your home directory ready for the next topic.      Hint   cd     \n    $(document).ready(function(){\n        $(\"#showablelink68\").click(function(e){\n            e.preventDefault();\n            $(\"#showable68\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You should know how to do this with the cd command:  cd     \n    $(document).ready(function(){\n        $(\"#showablelink69\").click(function(e){\n            e.preventDefault();\n            $(\"#showable69\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 3: Exploring the file system"
        }, 
        {
            "location": "/tutorials/unix/#topic-4-working-with-files-and-directories", 
            "text": "In this topic we will start to read, create, edit and delete files and directories.  Duration : 50 minutes.    Relevant commands :  mkdir ,  cp ,  ls ,  diff ,  wc ,  nano ,  mv ,  rm ,  rmdir ,  head ,  tail ,  grep ,  gzip ,  gunzip   Hint : Look at the commands above; you will need them roughly in order for this topic.  Use the  man \ncommand find out what they do, in particular the NAME, SYNOPSIS and DESCRIPTION sections.     4.1) In your home directory make a sub-directory called test.      Hint   You are trying to  make a directory , which of the above commands looks like a shortened version of this?    More   mkdir     \n    $(document).ready(function(){\n        $(\"#showablelink72\").click(function(e){\n            e.preventDefault();\n            $(\"#showable72\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable72\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink72\").text(\"More\");\n            } else {\n                $(\"#showablelink72\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink71\").click(function(e){\n            e.preventDefault();\n            $(\"#showable71\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Make sure you are in your home directory first. If not  cd  to your home directory.  Use the  mkdir  command to make new directories:  $ mkdir test  Use the  ls  command to check that the new directory was created.  $ ls\nexp01  file01  muscle.fq  test     \n    $(document).ready(function(){\n        $(\"#showablelink73\").click(function(e){\n            e.preventDefault();\n            $(\"#showable73\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.2) Copy all the files from  /home/group/common/training/Intro_to_Unix/  into the newly created \ntest directory.      Hint   You are trying to  copy , which of the above commands looks like a shortened version of this?    More   $ man cp\n...\nSYNOPSIS\n       cp [OPTION]... [-T] SOURCE DEST\n...\nDESCRIPTION\n       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.  which means  cp  expects zero or more flags, a SOURCE file followed by a DEST file or directory      \n    $(document).ready(function(){\n        $(\"#showablelink76\").click(function(e){\n            e.preventDefault();\n            $(\"#showable76\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable76\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink76\").text(\"More\");\n            } else {\n                $(\"#showablelink76\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink75\").click(function(e){\n            e.preventDefault();\n            $(\"#showable75\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  cp  command to copy files.   Wildcards : You could copy them one-by-one, but that would be tedious, so use \nthe  *  wildcard to specify that you want to copy all the files.  There are a number of ways you could do this depending on how you specify the source and destination \npaths to  cp . You only need to perform one of these ways, but we show multiple ones for your reference.  Answer 1 : From your home directory:  $ cp /home/group/common/training/Intro_to_Unix/* test  Answer 2 : Change to the test directory and then copy (assuming you started in your home directory):  $ cd test\n$ cp /home/group/common/training/Intro_to_Unix/* .  In the example above the ' . ' (dot) character refers to the current working directory. It should be \nthe test subdirectory of your home directory.  Answer 3 : Change to the /home/group/common/training/Intro_to_Unix/ directory and then copy:  cd /home/group/common/training/Intro_to_Unix/\ncp * ~/test  Remember that ~ is a shortcut reference to your home directory.     \n    $(document).ready(function(){\n        $(\"#showablelink77\").click(function(e){\n            e.preventDefault();\n            $(\"#showable77\").toggleClass(\"showable-hidden\");\n        });\n    });\n       Note : This exercise assumes that the copy command from the previous exercise was successful.     4.3) Check that the file size of  expectations.txt  is the same in both the directory that you copied \nit from and the directory that you copied it to.      Hint   Remember  ls  can show you the file size (with one of its flags)    More   ls -l     \n    $(document).ready(function(){\n        $(\"#showablelink80\").click(function(e){\n            e.preventDefault();\n            $(\"#showable80\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable80\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink80\").text(\"More\");\n            } else {\n                $(\"#showablelink80\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink79\").click(function(e){\n            e.preventDefault();\n            $(\"#showable79\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use  ls -l  to check the size of files.  You could do this in many ways depending on the value of your working directory. We just show one possible \nway for each file:  $ ls -l /home/group/common/training/Intro_to_Unix/expectations.txt\n\n$ ls -l ~/test/expectations.txt  From the output of the above commands you should be able to see the size of each file and check that they \nare the same.   Answer : They should each be  1033773  bytes  Alternate : Sometimes it is useful to get file sizes reported in more \"human friendly\" units than bytes. If this is \ntrue then try the  -h  option for ls:  $ ls -lh /home/group/common/training/Intro_to_Unix/expectations.txt\n-rw-r--r-- 1 arobinson common 1010K Mar 26  2012 /home/group/common/training/Intro_to_Unix/expectations.txt  In this case the size is reported in kilobytes as  1010K . Larger files are reported in megabytes, gigabytes \netcetera.     \n    $(document).ready(function(){\n        $(\"#showablelink81\").click(function(e){\n            e.preventDefault();\n            $(\"#showable81\").toggleClass(\"showable-hidden\");\n        });\n    });\n       Note : this exercise assumes your working directory is  ~/test ; if not run  cd ~/test    4.4) Check that the contents of expectations.txt are the same in both the directory that you copied \nit from and the directory that you copied it to.      Hint   What is the opposite of  same ?    More   diff erence     \n    $(document).ready(function(){\n        $(\"#showablelink84\").click(function(e){\n            e.preventDefault();\n            $(\"#showable84\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable84\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink84\").text(\"More\");\n            } else {\n                $(\"#showablelink84\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink83\").click(function(e){\n            e.preventDefault();\n            $(\"#showable83\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  diff  command to compare the contents of two files.  $ diff /home/group/common/training/Intro_to_Unix/expectations.txt expectations.txt  If the two files are identical the  diff  command will NOT produce any output)  Answer : Yes, they are the same since no output was given.     \n    $(document).ready(function(){\n        $(\"#showablelink85\").click(function(e){\n            e.preventDefault();\n            $(\"#showable85\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.5) How many lines, words and characters are in expectations.txt?      Hint   Initialisms are key    More   w ord  c ount     \n    $(document).ready(function(){\n        $(\"#showablelink88\").click(function(e){\n            e.preventDefault();\n            $(\"#showable88\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable88\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink88\").text(\"More\");\n            } else {\n                $(\"#showablelink88\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink87\").click(function(e){\n            e.preventDefault();\n            $(\"#showable87\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  wc  (for \"word count\") to count the number of characters, lines and words in a file:  $ wc expectations.txt\n  20415  187465 1033773 expectations.txt  Answer : There are  20415  lines,  187465  words and  1033773  characters in expectations.txt.  To get just the line, word or character count:  $ wc -l expectations.txt\n20415 expectations.txt\n$ wc -w expectations.txt\n187465 expectations.txt\n$ wc -c expectations.txt\n1033773 expectations.txt     \n    $(document).ready(function(){\n        $(\"#showablelink89\").click(function(e){\n            e.preventDefault();\n            $(\"#showable89\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.6) Open  ~/test/expectations.txt  in the  nano  text editor, delete the first line of text, and \nsave your changes to the file. Exit  nano .      Hint   nano FILENAME  Once  nano  is open it displays some command hints along the bottom of the screen.    More   ^O  means hold the  Control  (or CTRL) key while pressing the  o .  Dispite what it displays, you need to type \nthe lower-case letter that follows the  ^  character.  WriteOut is another name for Save.     \n    $(document).ready(function(){\n        $(\"#showablelink92\").click(function(e){\n            e.preventDefault();\n            $(\"#showable92\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable92\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink92\").text(\"More\");\n            } else {\n                $(\"#showablelink92\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink91\").click(function(e){\n            e.preventDefault();\n            $(\"#showable91\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Take some time to play around with the  nano  text editor.  Nano  is a very simple text editor which is easy to use but limited in features. More powerful \neditors exist such as  vim  and  emacs , however they take a substantial amount of time to learn.     \n    $(document).ready(function(){\n        $(\"#showablelink93\").click(function(e){\n            e.preventDefault();\n            $(\"#showable93\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.7) Did the changes you made to  ~/test/expectations.txt  have any effect on  /home/group/common/training/Intro_to_Unix/expectations.txt ? How can you tell if two files are the \nsame or different in their contents?      Hint   Remember exercise 4.4    More   Use  diff     \n    $(document).ready(function(){\n        $(\"#showablelink96\").click(function(e){\n            e.preventDefault();\n            $(\"#showable96\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable96\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink96\").text(\"More\");\n            } else {\n                $(\"#showablelink96\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink95\").click(function(e){\n            e.preventDefault();\n            $(\"#showable95\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use  diff  to check that the two files are different after you have made the change to the copy of  expectations.txt  in your  ~/test  directory.  diff ~/test/expectations.txt \\\n/home/group/common/training/Intro_to_Unix/expectations.txt  You could also use  ls  to check that the files have different sizes.     \n    $(document).ready(function(){\n        $(\"#showablelink97\").click(function(e){\n            e.preventDefault();\n            $(\"#showable97\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.8) In your  test  subdirectory, rename  expectations.txt  to  foo.txt .      Hint   Another way to think of it is  moving  it from  expectations.txt  to  foo.txt    More   mv  Use  man mv  if you need to work out how to use it.     \n    $(document).ready(function(){\n        $(\"#showablelink100\").click(function(e){\n            e.preventDefault();\n            $(\"#showable100\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable100\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink100\").text(\"More\");\n            } else {\n                $(\"#showablelink100\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink99\").click(function(e){\n            e.preventDefault();\n            $(\"#showable99\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  mv  command to rename the file:  $ mv expectations.txt foo.txt\n$ ls\nfoo.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy     \n    $(document).ready(function(){\n        $(\"#showablelink101\").click(function(e){\n            e.preventDefault();\n            $(\"#showable101\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.9) Rename foo.txt back to expectations.txt.      Answer   Use the  mv  command to rename the file:  $ mv foo.txt expectations.txt\n$ ls\nexpectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy  Use  ls  to check that the file is in fact renamed.     \n    $(document).ready(function(){\n        $(\"#showablelink103\").click(function(e){\n            e.preventDefault();\n            $(\"#showable103\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.10) Remove the file  expectations.txt  from your  test  directory.      Hint   We are trying to  remove  a file, check the commands at the top of this topic.    More   rm     \n    $(document).ready(function(){\n        $(\"#showablelink106\").click(function(e){\n            e.preventDefault();\n            $(\"#showable106\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable106\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink106\").text(\"More\");\n            } else {\n                $(\"#showablelink106\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink105\").click(function(e){\n            e.preventDefault();\n            $(\"#showable105\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  rm  command to remove files (carefully):  $ rm expectations.txt\n$ ls\nhello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy     \n    $(document).ready(function(){\n        $(\"#showablelink107\").click(function(e){\n            e.preventDefault();\n            $(\"#showable107\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.11) Remove the entire  test  directory and all the files within it.      Hint   We are trying to  remove a directory .    More   You could use  rmdir  but there is an easier way using just  rm  and a flag.     \n    $(document).ready(function(){\n        $(\"#showablelink110\").click(function(e){\n            e.preventDefault();\n            $(\"#showable110\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable110\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink110\").text(\"More\");\n            } else {\n                $(\"#showablelink110\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink109\").click(function(e){\n            e.preventDefault();\n            $(\"#showable109\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You could use the  rm  command to remove each file individually, and then use the  rmdir  command \nto remove the directory. Note that  rmdir  will only remove directories that are empty (i.e. do not \ncontain files or subdirectories).  A faster way is to pass the  -r  (for recursive) flag to  rm  to remove all the files and the \ndirectory in one go:  Logical Answer :  cd ~\nrm test/*\nrmdir test  Easier Answer :  cd ~\nrm -r test  Warning : Be very careful with  rm -r , it will remove all files \nand all subdirectories underneath the specified directory. This could be catastrophic if you do it \nin the wrong location! Now is a good moment to pause and think about file backup strategies.     \n    $(document).ready(function(){\n        $(\"#showablelink111\").click(function(e){\n            e.preventDefault();\n            $(\"#showable111\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.12) Recreate the test directory in your home directory and copy all the files from  /home/group/common/training/Intro_to_Unix/  back into the test directory.      Hint   See exercises 4.1 and 4.2     \n    $(document).ready(function(){\n        $(\"#showablelink113\").click(function(e){\n            e.preventDefault();\n            $(\"#showable113\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Repeat exercises 4.1 and 4.2.  $ cd ~\n$ mkdir test\n$ cp /home/group/common/training/Intro_to_Unix/* test     \n    $(document).ready(function(){\n        $(\"#showablelink114\").click(function(e){\n            e.preventDefault();\n            $(\"#showable114\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.13) Change directories to  ~/test  and use the  cat  command to display the entire contents \nof the file  hello.c      Hint   Use  man  if you can't guess how it might work.     \n    $(document).ready(function(){\n        $(\"#showablelink116\").click(function(e){\n            e.preventDefault();\n            $(\"#showable116\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ cd ~/test\n$ cat hello.c\n#include  stdio.h \nint main(void) {\n    printf ( Hello World\\n );\n    return 0;\n}  hello.c  contains the source code of a C program. The compiled executable version of this code \nis in the file called  hi , which you can run like so:  $ ./hi\nHello World     \n    $(document).ready(function(){\n        $(\"#showablelink117\").click(function(e){\n            e.preventDefault();\n            $(\"#showable117\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.14) Use the  head  command to view the first  20  lines of the file  sample_1.fastq      Hint   Remember your  best  friend!    More   Use  man  to find out what option you need to add to display a given number of  lines .     \n    $(document).ready(function(){\n        $(\"#showablelink120\").click(function(e){\n            e.preventDefault();\n            $(\"#showable120\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable120\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink120\").text(\"More\");\n            } else {\n                $(\"#showablelink120\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink119\").click(function(e){\n            e.preventDefault();\n            $(\"#showable119\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ head -20 sample_1.fastq\n@IRIS:7:1:17:394#0/1\nGTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n+IRIS:7:1:17:394#0/1\naaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n@IRIS:7:1:17:800#0/1\nGGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n+IRIS:7:1:17:800#0/1\nababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n@IRIS:7:1:17:1757#0/1\nTTTTCTCGACGATTTCCACTCCTGGTCNACGAATCC\n+IRIS:7:1:17:1757#0/1\naaaaaa``aaa`aaaa_^a```]][Z[DY^XYV^_Y\n@IRIS:7:1:17:1479#0/1\nCATATTGTAGGGTGGATCTCGAAAGATATGAAAGAT\n+IRIS:7:1:17:1479#0/1\nabaaaaa`a```^aaaaa`_]aaa`aaa__a_X]``\n@IRIS:7:1:17:150#0/1\nTGATGTACTATGCATATGAACTTGTATGCAAAGTGG\n+IRIS:7:1:17:150#0/1\nabaabaa`aaaaaaa^ba_]]aaa^aaaaa_^][aa     \n    $(document).ready(function(){\n        $(\"#showablelink121\").click(function(e){\n            e.preventDefault();\n            $(\"#showable121\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.15) Use the  tail  command to view the last  8  lines of the file  sample_1.fastq      Hint   Its very much like  head .     \n    $(document).ready(function(){\n        $(\"#showablelink123\").click(function(e){\n            e.preventDefault();\n            $(\"#showable123\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   tail -8 sample_1.fastq\n@IRIS:7:32:731:717#0/1\nTAATAATTGGAGCCAAATCATGAATCAAAGGACATA\n+IRIS:7:32:731:717#0/1\nababbababbab]abbaa`babaaabbb`bbbabbb\n@IRIS:7:32:731:1228#0/1\nCTGATGCCGAGGCACGCCGTTAGGCGCGTGCTGCAG\n+IRIS:7:32:731:1228#0/1\n`aaaaa``aaa`a``a`^a`a`a_[a_a`a`aa`__     \n    $(document).ready(function(){\n        $(\"#showablelink124\").click(function(e){\n            e.preventDefault();\n            $(\"#showable124\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.16) Use the  grep  command to find out all the lines in  moby.txt  that contain the word \n\"Ahab\"      Hint   One might say we are 'looking for the  pattern  \"Ahab\"'    More   $ man grep\n...\nSYNOPSIS\n       grep [OPTIONS] PATTERN [FILE...]\n...     \n    $(document).ready(function(){\n        $(\"#showablelink127\").click(function(e){\n            e.preventDefault();\n            $(\"#showable127\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable127\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink127\").text(\"More\");\n            } else {\n                $(\"#showablelink127\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink126\").click(function(e){\n            e.preventDefault();\n            $(\"#showable126\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ grep Ahab moby.txt Want to see what whaling is, eh? Have ye clapped eye on Captain Ahab?  Who is Captain Ahab, sir?  Aye, aye, I thought so. Captain Ahab is the Captain of this ship. \n... AND MUCH MUCH MORE ...  If you want to know how many lines are in the output of the above command you can \"pipe\" it \ninto the  wc -l  command:  $ grep Ahab moby.txt | wc -l\n491  which shows that there are  491  lines in  moby.txt  that contain the word Ahab.     \n    $(document).ready(function(){\n        $(\"#showablelink128\").click(function(e){\n            e.preventDefault();\n            $(\"#showable128\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.17) Use the  grep  command to find out all the lines in  expectations.txt  that contain the \nword \"the\" with a case insensitive search (it should count \"the\" \"The\" \"THE\" \"tHe\" etcetera)\n.      Hint   One might say we are  ignoring case .    More   $ man grep\n...\n       -i, --ignore-case\n              Ignore case distinctions in both the PATTERN and the input files.  (-i is specified by POSIX.)\n...     \n    $(document).ready(function(){\n        $(\"#showablelink131\").click(function(e){\n            e.preventDefault();\n            $(\"#showable131\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable131\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink131\").text(\"More\");\n            } else {\n                $(\"#showablelink131\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink130\").click(function(e){\n            e.preventDefault();\n            $(\"#showable130\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  -i  flag to  grep  to make it perform case insensitive search:  $ grep -i the expectations.txt\nThe Project Gutenberg EBook of Great Expectations, by Charles Dickens\nThis eBook is for the use of anyone anywhere at no cost and with\nre-use it under the terms of the Project Gutenberg License included\n[Project Gutenberg Editor's Note: There is also another version of\n... AND MUCH MUCH MORE ...  Again, \"pipe\" the output to  wc -l  to count the number of lines:  $ grep -i the expectations.txt  | wc -l\n8165     \n    $(document).ready(function(){\n        $(\"#showablelink132\").click(function(e){\n            e.preventDefault();\n            $(\"#showable132\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.18) Use the  gzip  command to compress the file  sample_1.fastq . Use  gunzip  to decompress it \nback to the original contents.      Hint   Use the above commands along with  man  and  ls  to see what happens to the file.     \n    $(document).ready(function(){\n        $(\"#showablelink134\").click(function(e){\n            e.preventDefault();\n            $(\"#showable134\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Check the file size of sample_1.fastq before compressing it:  # check filesize\n$ ls -l sample_1.fastq\n-rw-r--r-- 1 training01 training 90849644 Jun 14 20:03 sample_1.fastq\n\n# compress it (takes a few seconds)\n$ gzip sample_1.fastq\n\n# check filesize (Note: its name changed)\n$ ls -l sample_1.fastq.gz\n-rw-r--r-- 1 training01 training 26997595 Jun 14 20:03 sample_1.fastq.gz\n\n# decompress it\n$ gunzip sample_1.fastq.gz\n\n$ ls -l sample_1.fastq\n-rw-r--r-- 1 training01 training 90849644 Jun 14 20:03 sample_1.fastq  You will see that when it was compressed it is  26997595  bytes in size, making it about  0.3  times the size of the \noriginal file.  Note : in the above section the lines starting with  #  are comments so don't need to be copied but if you\ndo then they wont do anything.     \n    $(document).ready(function(){\n        $(\"#showablelink135\").click(function(e){\n            e.preventDefault();\n            $(\"#showable135\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 4: Working with files and directories"
        }, 
        {
            "location": "/tutorials/unix/#topic-5-pipes-output-redirection-and-shell-scripts", 
            "text": "In this section we will cover a lot of the more advanced Unix concepts; it is here where you will start to see\nthe power of Unix.  I say  start  because this is only the \"tip of the iceberg\".  Duration : 50 minutes.   Relevant commands :  wc ,  paste ,  grep ,  sort ,  uniq ,  nano ,  cut    5.1) How many  reads  are contained in the file  sample_1.fastq ?      Hint   Examine some of the file to work out how many lines each  read  takes up.    More   Count the number of lines     \n    $(document).ready(function(){\n        $(\"#showablelink138\").click(function(e){\n            e.preventDefault();\n            $(\"#showable138\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable138\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink138\").text(\"More\");\n            } else {\n                $(\"#showablelink138\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink137\").click(function(e){\n            e.preventDefault();\n            $(\"#showable137\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   We can answer this question by counting the number of lines in the file and dividing by 4:  $ wc -l sample_1.fastq\n3000000  Answer : There are  3000000  lines in the file representing  750000  reads.  If you want to do simple arithmetic at the command line then you can use the \"basic calculator\" \ncalled  bc :  $ echo  3000000 / 4  | bc\n750000  Note : that the vertical bar character \"|\" is the Unix pipe (and is often \ncalled the \"pipe symbol\"). It is used for connecting the output of one command into the input of \nanother command. We'll see more examples soon.  bc  is suitable for small calculations, but it becomes cumbersome for more complex examples. If \nyou want to do more sophisticated calculations then we recommend to use a more general purpose \nprogramming language (such as Python etcetera).     \n    $(document).ready(function(){\n        $(\"#showablelink139\").click(function(e){\n            e.preventDefault();\n            $(\"#showable139\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.2) How many reads in  sample_1.fastq  contain the sequence  GATTACA ?      Hint   Check out exercise 4.16     \n    $(document).ready(function(){\n        $(\"#showablelink141\").click(function(e){\n            e.preventDefault();\n            $(\"#showable141\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use  grep  to find all the lines that contain  GATTACA  and \"pipe\" the output to  wc -l  to count them:  $ grep GATTACA sample_1.fastq | wc -l\n1119  Answer :  1119  If you are unsure about the possibility of upper and lower case characters then consider using \nthe  -i  (ignore case option for grep).     \n    $(document).ready(function(){\n        $(\"#showablelink142\").click(function(e){\n            e.preventDefault();\n            $(\"#showable142\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.3) On what line numbers do the sequences containing  GATTACA  occur?      Hint   We are looking for the  line numbers .    More   Check out the manpage for  grep  and/or  nl     \n    $(document).ready(function(){\n        $(\"#showablelink145\").click(function(e){\n            e.preventDefault();\n            $(\"#showable145\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable145\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink145\").text(\"More\");\n            } else {\n                $(\"#showablelink145\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink144\").click(function(e){\n            e.preventDefault();\n            $(\"#showable144\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You can use the  -n  flag to grep to make it prefix each line with a line number:  Answer 1 :   $ grep -n GATTACA sample_1.fastq\n5078:AGGAAGATTACAACTCCAAGACACCAAACAAATTCC\n7170:AACTACAAAGGTCAGGATTACAAGCTCTTGCCCTTC\n8238:ATAGTTTTTTCGATTACATGGATTATATCTGTTTGC\n... AND MUCH MUCH MORE ...  Answer 2 : Or you can use the  nl  command to number each line of sample_1.fastq and then search for  GATTACA  \nin the numbered lines:  $ nl sample_1.fastq | grep GATTACA\n  5078  AGGAAGATTACAACTCCAAGACACCAAACAAATTCC\n  7170  AACTACAAAGGTCAGGATTACAAGCTCTTGCCCTTC\n  8238  ATAGTTTTTTCGATTACATGGATTATATCTGTTTGC\n... AND MUCH MUCH MORE ...  Just the line numbers :  If you just want to see the line numbers then you can \"pipe\" the output of the above command into  cut -f 1 :  $ nl sample_1.fastq | grep GATTACA | cut -f 1\n  5078\n  7170\n  8238\n... AND MUCH MUCH MORE ...  cut  will remove certain columns from the input; in this case it will remove all except column 1\n(a.k.a. field 1, hence the  -f 1  option)  $ grep -n GATTACA sample_1.fastq | cut -d: -f 1\n5078\n7170\n8238\n... AND MUCH MUCH MORE ...     \n    $(document).ready(function(){\n        $(\"#showablelink146\").click(function(e){\n            e.preventDefault();\n            $(\"#showable146\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.4) Use the  nl  command to print each line of  sample_1.fastq  with its corresponding line \nnumber at the beginning.      Hint   Check answer to 5.3.     \n    $(document).ready(function(){\n        $(\"#showablelink148\").click(function(e){\n            e.preventDefault();\n            $(\"#showable148\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ nl sample_1.fastq\n     1  @IRIS:7:1:17:394#0/1\n     2  GTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n     3  +IRIS:7:1:17:394#0/1\n     4  aaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n     5  @IRIS:7:1:17:800#0/1\n     6  GGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n     7  +IRIS:7:1:17:800#0/1\n     8  ababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n... AND MUCH MUCH MORE ...  There are a lot of lines in that file so this command might take a while to print all its output. \nIf you get tired of looking at the output you can kill the command with  control-c  (hold the  control  key down and simultaneously press the \" c \" character).     \n    $(document).ready(function(){\n        $(\"#showablelink149\").click(function(e){\n            e.preventDefault();\n            $(\"#showable149\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.5) Redirect the output of the previous command to a file called  sample_1.fastq.nl . Check \nthe first  20  lines of  sample_1.fastq.nl  with the  head  command. Use the  less  command to \ninteractively view the contents of  sample_1.fastq.nl  (use the arrow keys to navigate up and down,  q  to quit and ' / ' to search). Use the search facility in less to find occurrences of  GATTACA .      Hint   Ok that one was tough,   FILENAME  is how you do it if you didn't break out an internet search for \n\"redirect the output in Unix\"     \n    $(document).ready(function(){\n        $(\"#showablelink151\").click(function(e){\n            e.preventDefault();\n            $(\"#showable151\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ nl sample_1.fastq   sample_1.fastq.nl  The greater-than sign \" \" is the file redirection operator. It causes the standard output of the \ncommand on the left-hand-side to be written to the file on the right-hand-side.  You should notice that the above command is much faster than printing the output to the screen. \nThis is because writing to disk can be performed much more quickly than rendering the output on \na terminal.  To check that the first 20 lines of the file look reasonable you can use the  head  command like so:  $ head -20 sample_1.fastq.nl\n     1  @IRIS:7:1:17:394#0/1\n     2  GTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n     3  +IRIS:7:1:17:394#0/1\n     4  aaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n     5  @IRIS:7:1:17:800#0/1\n     6  GGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n     7  +IRIS:7:1:17:800#0/1\n     8  ababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n...  The  less  command allows you to interactively view a file. The arrow keys move the page up and \ndown. You can search using the ' / ' followed by the search term. You can quit by pressing \" q \". Note \nthat the  less  command is used by default to display man pages.  $ less sample_1.fastq.nl     \n    $(document).ready(function(){\n        $(\"#showablelink152\").click(function(e){\n            e.preventDefault();\n            $(\"#showable152\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.6) The four-lines-per-read format of FASTQ is cumbersome to deal with. Often it would be \npreferable if we could convert it to tab-separated-value (TSV) format, such that each read appears \non a single line with each of its fields separated by tabs. Use the following command to convert \nsample_1.fastq.nl into TSV format:   $ cat sample_1.fastq | paste - - - -   sample_1.tsv     \n    $(document).ready(function(){\n        $(\"#showablelink153\").click(function(e){\n            e.preventDefault();\n            $(\"#showable153\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The  '-'  (dash) character has a special meaning when used in place of a file; it means use the standard\ninput instead of a real file.  Note: while it is fairly common in most Unix programs, not all wil support it.  The  paste  command is useful for merging multiple files together line-by-line, such that the  Nth  \nline from each file is joined together into one line in the output, separated by default with a  tab  character. In the above example we give paste 4 copies of the contents of  sample_1.fastq , \nwhich causes it to join consecutive groups of 4 lines from the file into one line of output.     \n    $(document).ready(function(){\n        $(\"#showablelink154\").click(function(e){\n            e.preventDefault();\n            $(\"#showable154\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.7) Do you expect the output of the following command to produce the same output as above? and why?   $ paste sample_1.fastq sample_1.fastq sample_1.fastq sample_1.fastq   sample_1b.tsv  Try it, see what ends up in sample_1b.tsv (maybe use  less )     \n    $(document).ready(function(){\n        $(\"#showablelink155\").click(function(e){\n            e.preventDefault();\n            $(\"#showable155\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   Use  less  to examine it.     \n    $(document).ready(function(){\n        $(\"#showablelink156\").click(function(e){\n            e.preventDefault();\n            $(\"#showable156\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer : No, in the second instance we get 4 copies of each line.  Why : In the first command  paste  will use the input file (standard input) 4 times since the  cat  \ncommand will only give one copy of the file to  paste , where as, in the second command  paste  will open \nthe file 4 times.  Note: this is quite confusing and is not necessory to remember; its just an interesting\nside point.     \n    $(document).ready(function(){\n        $(\"#showablelink157\").click(function(e){\n            e.preventDefault();\n            $(\"#showable157\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.8) Check that  sample_1.tsv  has the correct number of lines. Use the  head  command to view \nthe first  20  lines of the file.      Hint   Remember the  wc  command.     \n    $(document).ready(function(){\n        $(\"#showablelink159\").click(function(e){\n            e.preventDefault();\n            $(\"#showable159\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   We can count the number of lines in  sample_1.tsv  using  wc :  $ wc -l sample_1.tsv  The output should be  750000  as expected (1/4 of the number of lines in sample_1.fastq).  To view the first  20  lines of  sample_1.tsv  use the  head  command:  $ head -20 sample_1.tsv     \n    $(document).ready(function(){\n        $(\"#showablelink160\").click(function(e){\n            e.preventDefault();\n            $(\"#showable160\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.9) Use the  cut  command to print out the second column of  sample_1.tsv . Redirect the \noutput to a file called  sample_1.dna.txt .      Hint   See exercise 5.3 (for cut) and 5.5 (redirection)     \n    $(document).ready(function(){\n        $(\"#showablelink162\").click(function(e){\n            e.preventDefault();\n            $(\"#showable162\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The file sample_1.tsv is in column format. The cut command can be used to select certain columns \nfrom the file. The DNA sequences appear in column 2, we select that column using the -f 2 flag \n(the f stands for \"field\").  cut -f 2 sample_1.tsv   sample_1.dna.txt  Check that the output file looks reasonable using  head  or  less .     \n    $(document).ready(function(){\n        $(\"#showablelink163\").click(function(e){\n            e.preventDefault();\n            $(\"#showable163\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.10) Use the  sort  command to sort the lines of  sample_1.dna.txt  and redirect the output to  sample_1.dna.sorted.txt . Use  head  to look at the first few lines of the output file. You should \nsee a lot of repeated sequences of As.      Hint   Use  man  (sort) and see exercise 5.5 (redirection)     \n    $(document).ready(function(){\n        $(\"#showablelink165\").click(function(e){\n            e.preventDefault();\n            $(\"#showable165\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ sort sample_1.dna.txt   sample_1.dna.sorted.txt  Running  head  on the output file reveals that there are duplicate DNA sequences in the input FASTQ \nfile.     \n    $(document).ready(function(){\n        $(\"#showablelink166\").click(function(e){\n            e.preventDefault();\n            $(\"#showable166\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.11) Use the  uniq  command to remove duplicate consecutive lines from  sample_1.dna.sorted.txt , \nredirect the result to  sample_1.dna.uniq.txt . Compare the number of lines in sample1_dna.txt to \nthe number of lines in  sample_1.dna.uniq.txt .      Hint   I am pretty sure you have already used  man  (or just guessed how to use  uniq ).  You're also a gun at \nredirection now.     \n    $(document).ready(function(){\n        $(\"#showablelink168\").click(function(e){\n            e.preventDefault();\n            $(\"#showable168\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ uniq sample_1.dna.sorted.txt   sample_1.dna.uniq.txt  Compare the outputs of:  $ wc -l sample_1.dna.sorted.txt\n750000\n$ wc -l sample_1.dna.uniq.txt\n614490  View the contents of  sample_1.dna.uniq.txt  to check that the duplicate DNA sequences have been \nremoved.     \n    $(document).ready(function(){\n        $(\"#showablelink169\").click(function(e){\n            e.preventDefault();\n            $(\"#showable169\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.12) Can you modify the command from above to produce  only  those sequences of DNA which were \nduplicated in  sample_1.dna.sorted.txt ?      Hint   Checkout the  uniq  manpage     \n    $(document).ready(function(){\n        $(\"#showablelink171\").click(function(e){\n            e.preventDefault();\n            $(\"#showable171\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   Look at the man page for uniq.     \n    $(document).ready(function(){\n        $(\"#showablelink172\").click(function(e){\n            e.preventDefault();\n            $(\"#showable172\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  -d  flag to  uniq  to print out only the duplicated lines from the file:  $ uniq -d sample_1.dna.sorted.txt   sample_1.dna.dup.txt     \n    $(document).ready(function(){\n        $(\"#showablelink173\").click(function(e){\n            e.preventDefault();\n            $(\"#showable173\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.13) Write a  shell pipeline  which will print the number of duplicated DNA sequences in \nsample_1.fastq.      Hint   That is,  piping  most of the commands you used above instead of redirecting to file    More   I.e. 6 commands ( cat ,  paste ,  cut ,  sort ,  uniq ,  wc )     \n    $(document).ready(function(){\n        $(\"#showablelink176\").click(function(e){\n            e.preventDefault();\n            $(\"#showable176\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable176\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink176\").text(\"More\");\n            } else {\n                $(\"#showablelink176\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink175\").click(function(e){\n            e.preventDefault();\n            $(\"#showable175\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Finally we can 'pipe' all the pieces together into a sophisticated pipeline which starts with a \nFASTQ file and ends with a list of duplicated DNA sequences:  Answer :  $ cat sample_1.fastq | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\n56079  The output file should have  56079  lines.     \n    $(document).ready(function(){\n        $(\"#showablelink177\").click(function(e){\n            e.preventDefault();\n            $(\"#showable177\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.14) (Advanced) Write a shell script which will print the number of duplicated DNA sequences \nin sample_1.fastq.      Hint   Check out the  sleepy  file (with  cat  or  nano ); there is a bit of magic on the first line that you will need.   You also need to tell bash that this file can be executed (check out  chmod  command).     \n    $(document).ready(function(){\n        $(\"#showablelink179\").click(function(e){\n            e.preventDefault();\n            $(\"#showable179\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Put the answer to  5.13  into a file called  sample_1_dups.sh  (or whatever you want). Use  nano  to \ncreate the file.   Answer : the contents of the file will look like this:  #!/bin/bash\n\ncat sample_1.fastq | paste - - - - | cut -f 2 | sort | uniq -d | wc -l  Note : the first line has special meaning.  If it starts with ' #! ' (Hash \nthen exclamation mark) then it tells bash this file is a script that can be interpreted.  The command \n(including full path) used to intepret the script is placed right after the magic code.  Give everyone execute permissions on the file with chmod:  $ chmod +x sample_1_dups.sh   You can run the script like so:  $ ./sample_1_dups.sh  If all goes well the script should behave in exactly the same way as the answer to 5.13.     \n    $(document).ready(function(){\n        $(\"#showablelink180\").click(function(e){\n            e.preventDefault();\n            $(\"#showable180\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.15) (Advanced) Modify your shell script so that it accepts the name of the input FASTQ file \nas a command line parameter.      Hint   Shell scripts can refer to command line arguments by their position using special variables called  $0 ,  $1 ,  $2  and so on.     More   $0  refers to the name of the script as it was called on the command line.  $1  refers to the first command line argument, and so on.     \n    $(document).ready(function(){\n        $(\"#showablelink183\").click(function(e){\n            e.preventDefault();\n            $(\"#showable183\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable183\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink183\").text(\"More\");\n            } else {\n                $(\"#showablelink183\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink182\").click(function(e){\n            e.preventDefault();\n            $(\"#showable182\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Copy the shell script from  5.14  into a new file:  $ cp sample_1_dups.sh fastq_dups.sh  Edit the new shell script file and change it to use the command line parameters:  #!/bin/bash\n\ncat $1 | paste - - - - | cut -f 2 | sort | uniq -d | wc -l  You can run the new script like so:  $ ./fastq_dups.sh sample_1.fastq  In the above example the script takes  sample_1.fastq  as input and prints the number of duplicated \nsequences as output.  A better Answer :  Ideally we would write our shell script to be more robust. At the moment it just assumes there \nwill be at least one command line argument. However, it would be better to check and produce an \nerror message if insufficient arguments were given:  #!/bin/bash\nif [ $# -eq 1 ]; then\n    cat $1 | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\nelse\n    echo  Usage: $0  fastq_filename \n    exit 1\nfi  The ' if ...; then ' line means: do the following line(s) ONLY if the  ...  (called condition) bit is true.  The ' else ' line means: otherwise do the following line(s) instead.  Note: it is optional.  The ' fi ' line means: this marks the end of the current  if  or  else  section.  The ' [ $# -eq 1 ] ' part is the condition:   $# : is a special shell variable that indicates how many command line arguments were given.   -eq : checks if the numbers on either side if it are equal.  1 : is a number one   Spaces in conditions :\nBash is VERY picky about the spaces within the conditions; if you get it wrong it will just behave strangely \n(without warning).  You MUST put a space near the share brackets and between each part of the condition!  So in words our script is saying \"if user provided 1 filename, then count the duplicates, otherwise print an error\".  Exit-status :\nIt is a Unix standard that when the user provides incorrect commandline arguments we print a usage message \nand return a *non-zero* exit status.  The *exit status* is a standard way for other programs to know if\nour program ran correctly; 0 means everything went as expected, any other number is an error.  If you don't\nprovide an *exit ..* line then it automatically returns a 0 for you.     \n    $(document).ready(function(){\n        $(\"#showablelink184\").click(function(e){\n            e.preventDefault();\n            $(\"#showable184\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.16) (Advanced) Modify your shell script so that it accepts zero or more FASTQ files on the \ncommand line argument and outputs the number of duplicated DNA sequences in each file.      Answer   We can add a loop to our script to accept multiple input FASTQ files:  #!/bin/bash\nfor file in $@; do\n    dups=$(cat $file | paste - - - - | cut -f 2 | sort | uniq -d | wc -l)\n    echo  $file $dups \ndone  There's a lot going on in this script.  The  $@  is a sequence of all command line arguments.  The ' for ...; do ' (a.k.a. for loop) iterates over that sequence one argument at a time, assigning the current argument in \nthe sequence to the variable called  file .  The  $(...)  allow us to capture the output of another command (in-place of the  ... ).  In this \ncase we capture the output of the pipeline and save it to the variable called  dups .  If you had multiple FASTQ files available you could run the script like so:  ./fastq_dups.sh sample_1.fastq sample_2.fastq sample_3.fastq  And it would produce output like:  sample_1.fastq 56079\nsample_2.fastq XXXXX\nsample_3.fastq YYYYY     \n    $(document).ready(function(){\n        $(\"#showablelink186\").click(function(e){\n            e.preventDefault();\n            $(\"#showable186\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 5: Pipes, output redirection and shell scripts"
        }, 
        {
            "location": "/tutorials/unix/#finished", 
            "text": "Well done, you learnt a lot over the last 5 topics and you should be proud of your achievement; it \nwas a lot to take in.  From here you should be confortable around the Unix command line and ready to take on the HPC \nWorkshop.  You will no-doubt forget a lot of what you learnt here so I encourage you to save a link to this \nWorkshop for later reference.  Thank you for your attendance, please don't forget to complete the VLSCI training survey and give it\nback to the Workshop facilitators.", 
            "title": "Finished"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/", 
            "text": "Authors:\n\n\n\n\n\n\nBernie Pope, VLSCI\n\n\n\n\n\n\nCatherine de Burgh-Day, Dept. of Physics, The University of Melbourne\n\n\n\n\n\n\nGeneral information\n\n\n\n\n\n\nPython modules are stored in files containing a \".py\" suffix (e.g solver.py).\n\n\n\n\n\n\nThe main implementation of Python is called CPython (it is written in C). It is byte-code interpreted.\n\n\n\n\n\n\nPython can be used in two modes: interactive and scripted. In interactive mode you enter a program fragment and Python evaluates\n  it immediately and then prints the result before prompting for a\n  new input. The interactive prompt is usually rendered as the\n  \nchevron\n \n. In scripted mode your program is stored in one\n  or more files which are executed as one monolithic entity. Such\n  programs behave like ordinary applications.\n\n\n\n\n\n\nPython has automatic memory management (via garbage collection). Memory is allocated automatically as needed and freed\n  automatically when no longer used.\n\n\n\n\n\n\nPython 2 versus Python 3\n\n\nCurrently there are two distinct flavours of Python available:\n\n\n\n\n\n\nPython 2 (2.7.10 at the time of writing)\n\n\n\n\n\n\nPython 3 (3.4.3 at the time of writing)\n\n\n\n\n\n\nPython 3 is the new and improved version of the language. Python 3 is\nnot entirely backwards compatible, but the two versions share much in\ncommon. Version 2 is now in maintenance mode; new features will only be\nadded to version 3. The public transition from 2 to 3 has been slower\nthan some people would like. You are encouraged to use version 3 where\npossible. These notes are generally compatible with both versions, but\nwe will point out key differences where necessary.\n\n\nIndentation for grouping code blocks\n\n\n\n\n\n\nPython uses indentation to group code blocks. Most other languages use some kind of brackets for grouping.\n\n\n\n\n\n\nThe recommended style is to use 4 space characters for a single indent (thus 8 spaces for two indents and so forth).\n\n\n\n\n\n\nYou are encouraged \nnot\n to use tabs for indentation because there is no standard width for a tab.\n\n\n\n\n\n\nMost good text editors can be configured so that that tab key is rendered as 4 space characters when editing Python code.\n\n\n\n\n\n\nStyle Guide\n\n\nA popular style guide for Python is known as \nPEP 0008\n, there is a\ncorresponding tool called \npep8\n which will check your code against\nthe guide and report any transgressions.\n\n\nExample, Python compared to C:\n\n\nPython program for computing factorial:\n\n\n# Compute factorial of n,\n# assuming n \n= 0\n\ndef factorial(n):\n  result = 1\n  while n \n 0:\n      result *= n\n      n -= 1\n  return result\n\nprint(factorial(10))\n\n\n\n\nC program for computing factorial:\n\n\n#include \nstdio.h\n\n\n/* Compute factorial of n,\n  assuming n \n= 0 */\n\nint factorial(int n) {\n   int result = 1;\n\n   while (n \n 0) {\n      result *= n;\n      n -= 1;\n   }\n   return result;\n}\n\nint main(void) {\n   printf(\n%d\\n\n, factorial(10));\n}\n\n\n\n\nThings to note:\n\n\n\n\n\n\nThe difference in commenting style.\n\n\n\n\n\n\nC programs are statically typed, and you must declare the type of functions and variables. Python is dynamically typed.\n\n\n\n\n\n\nCode blocks in C are grouped by braces { }; Python uses indentation for grouping.\n\n\n\n\n\n\nThe C program must have a main function. Python does not require a\n    main function, it just executes the top-level statements of the\n    module.\n\n\n\n\n\n\nThe result returned by the C function is limited to the size of a\n    machine integer (say 32 bits). However, the result returned by the\n    Python function is unlimited in its size - it can compute\n    arbitrarily large factorials (up to the limit of the available\n    memory in your computer).\n\n\n\n\n\n\nComments\n\n\nProgram comments start with a hash character \"#\" and continue until the\nend of the line. There are no multi-line comment markers, but that can\nsometimes be faked with multi-line string literals.\n\n\nExamples:\n\n\n# This is a comment.\n# This is another comment.\nx = 5 # This is a comment that follows some code.\n'''This is\na multi-line\nstring literal\nwhich can sometimes act like\na\ncomment.\n'''\n\n\n\n\nRunning a Python program\n\n\nThere are many ways to run Python code:\n\n\n\n\n\n\nYou can run the interpreter in interactive mode. On Unix (Linux, OS\n    X) you can run the python command at the command line.\n\n\n\n\n\n\nIf you have Python code stores in a file, say example.py, you can\n    run it from the command line like so: python example.py\n\n\n\n\n\n\nYou can use one of several integrated programming environments.\n    Python ships with a fairly minimal one called \nIDLE\n, though\n    many scientists prefer the more comprehensive \nIPython\n.\n\n\n\n\n\n\nIf your Python code was installed as a package (see below), then it\n    may be executed like an ordinary application without the user\n    being aware of how the program was implemented.\n\n\n\n\n\n\nObjects and types\n\n\n\n\n\n\nEvery value in Python is an \nobject\n (including functions!).\n\n\n\n\n\n\nObjects can have attributes and methods, which are accessed via the\n    dot \".\" operator.\n\n\n\n\n\n\nAll objects have a type.\n\n\n\n\n\n\nTypes are also objects!\n\n\n\n\n\n\nPython is dynamically typed: you may get type errors at runtime but\n    never at compile time.\n\n\n\n\n\n\ntype(x)\n returns the type of x.\n\n\n\n\n\n\nPython variables may be assigned to values of different types at\n    different points in the program.\n\n\n\n\n\n\nInteractive examples (Python 3):\n\n\n # Create a list, assign to the variable x\n\n x = [3, 1, 2, 3]\n\n # Ask for the type of the value assigned to x\n\n type(x)\n\nclass 'list'\n\n\n # Ask for the type of the first item in the list (an integer)\n\n type(x[0])\n\nclass 'int'\n\n\n # Count the number of times 3 appears in the list\n\n # by calling the count method\n\n x.count(3)\n2\n\n # Sort the contents of the list in-place.\n\n # Note that this mutates the list object!\n\n # Also note that Python does not print the result in this case.\n\n x.sort()\n\n # Ask Python to show the value of the list\n\n # assigned to the variable x (note it is now sorted)\n\n x\n[1, 2, 3, 3]\n\n # Assign x to an object of a different type (a float)\n\n x = 3.142\n\n type(x)\n\nclass 'float'\n\n\n\n\n\nBooleans\n\n\n\n\nRepresent truth values\n\n\nValues: \nTrue\n, \nFalse\n\n\nType: \nbool\n\n\nOperators: \nand\n, \nor\n, \nnot\n\n\nbool(x)\n will convert x to a boolean. The heuristic is that empty things and zero-ish things are \nFalse\n, everything else is \nTrue\n (but the user can override for their own types).\n\n\nFalse\n values:\n\n\nFalse\n\n\n0\n (zero integer)\n\n\n0.0\n (zero float)\n\n\n{}\n (empty dictionary)\n\n\n()\n (empty tuple)\n\n\n[]\n (empty list)\n\n\n''\n (empty string)\n\n\nNone\n\n\n\n\n\n\nTrue\n values:\n\n\neverything else\n\n\n\n\n\n\n\n\n\n\nIn numerical contexts \nTrue\n is considered equal to the integer \n1\n and\n    \nFalse\n is considered equal to the integer \n0\n. However, these\n    conversions are a common cause of bugs and should be avoided.\n\n\nPython will automatically test the \ntruthiness\n of a value if it\n    appears in a boolean context.\n\n\n\n\nInteractive examples:\n\n\n not True\nFalse\n\n not False\nTrue\n\n not ()\nTrue\n\n not [1,2,3]\nFalse\n\n True and False\nFalse\n\n True and ()\n()\n\n\n\n\nConditional Statements\n\n\n\n\nConditional statements use the keywords: \nif\n, \nelif\n, \nelse\n. The syntax\n    for a conditional statement is:\n\n\n\n\nif expression:\n    statement-block\nelif expression:\n    statement-block\n...\nelse:\n    statement-block\n\n\n\n\n\n\n\n\nA conditional statement must have exactly one \nif\n part. It may have\n    zero or more \nelif\n parts, and a single optional \nelse\n part at the\n    end.\n\n\n\n\n\n\nThe \nif\n and \nelif\n parts test the value of their boolean expressions.\n    If the expression evaluates to something which is \nTrue\n or can be\n    converted to \nTrue\n (see the rules for Booleans above) then the\n    statement block immediately beneath that part is executed.\n    Otherwise the following condition (if any) is tried. The \nelse\n\n    part, if it exists, is always and only executed if no preceding\n    condition was \nTrue\n.\n\n\n\n\n\n\nInteractive examples:\n\n\n if []:\n...     print(\nWas considered True\n)\n... else:\n...     print(\nWas considered False\n)\n...\nWas considered False\n\n\n\n\nNumbers and basic mathematics\n\n\nIntegers\n\n\n\n\n\n\nRepresent whole negative and positive numbers (and zero).\n\n\n\n\n\n\nThe range of integer values is unbounded (up to some limit defined\n    by how much memory you have on your computer).\n\n\n\n\n\n\nPython 2 distinguishes between two integer types \nint\n and \nlong\n, and\n    automatically promotes \nint\n to long where necessary, whereas Python\n    3 considers them all one type called \nint\n.\n\n\n\n\n\n\nBase ten is the default literal notation: \n42\n (means \n(4 * 10) + 2\n)\n\n\n\n\n\n\nHexadecimal literals start with \n0x\n, octal literals start with \n0o\n,\n    binary literals start with \n0b\n.\n\n\n\n\n\n\nint(x)\n will try to convert x to an integer, x can be another numeric\n    type (including booleans) or a string. You may specify an optional\n    base for the conversion.\n\n\n\n\n\n\nInteractive examples (in Python 3):\n\n\n 2 ** 200\n1606938044258990275541962092341162602522202993782792835301376\n\n 0x10\n16\n\n 0b10\n2\n\n -0 == 0\nTrue\n\n int(\n123\n)\n123\n\n int(\n3.142\n)\nTraceback (most recent call last):\nFile \nstdin\n, line 1, in \nmodule\n\n    ValueError: invalid literal for int() with base 10: '3.142'\n\n\n\n\nFloating Point Numbers\n\n\n\n\n\n\nRepresent a finite approximation to the real numbers.\n\n\n\n\n\n\nType: \nfloat\n.\n\n\n\n\n\n\n(On most platforms) Python uses IEEE-754 double precision floating\n    point numbers which provide 53 bits of precision.\n\n\n\n\n\n\nsys.float_info\n contains details about max, min, epsilon etcetera.\n\n\n\n\n\n\nLiterals can be in ordinary notation or in exponential notation:\n\n\n\n\nOrdinary: \n3.142\n\n\nExponential: \n314.2e-2\n\n\n\n\n\n\n\n\nOrdinary notation requires a point \n.\n, but digits following the\n    point are optional.\n\n\n\n\n\n\nExponential notation does not require a point unless you have a\n    fractional component.\n\n\n\n\n\n\nfloat(x)\n will try to convert x to a floating point number, x can be\n    another numeric type (including booleans) or a string.\n\n\n\n\n\n\nNumeric operators will automatically convert integer arguments to\n    floating point in mixed-type expressions.\n\n\n\n\n\n\nIn Python 3 the division operator \n/\n computes a floating point result\n    for integer arguments. However, in Python 2 it computes an integer\n    result for integer arguments.\n\n\n\n\n\n\nInteractive examples:\n\n\n type(3.142)\n\nclass 'float'\n\n\n type(12)\n\nclass 'int'\n\n\n 3.142 + 12\n15.142\n\n 3.142 == 314.2e-2\nTrue\n\n 3. == 3.0\nTrue\n\n 1/0\nTraceback (most recent call last):\nFile \nstdin\n, line 1, in \nmodule\n\nZeroDivisionError: division by zero\n\n # Integer divided by integer yields a float in Python 3\n\n 10 / 3\n3.3333333333333335\n\n float(\n123\n)\n123.0\n\n float(\n3.142\n)\n3.142\n\n\n\n\nComplex Numbers\n\n\n\n\n\n\nRepresent a finite approximation to the complex numbers.\n\n\n\n\n\n\nType: \ncomplex\n\n\n\n\n\n\nA pair of floating point numbers: real +/- imaginary.\n\n\n\n\n\n\nThe real part is optional (defaults to 0). The imaginary part is\n    followed immediately by the character \nj\n.\n\n\n\n\n\n\nInteractive Examples:\n\n\n 5j + 3j\n8j\n\n 2-5j\n(2-5j)\n\n 2-5j + 3j\n(2-2j)\n\n\n\n\nNumeric Operators\n\n\n\n\n\n\n\n\nName\n\n\nOperation\n\n\nPrecedence\n\n\nAssociativity\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n+\n\n\nadd\n\n\nlow\n\n\nleft\n\n\nCan also be used to concatenate strings together.\n\n\n\n\n\n\n*\n\n\nmultiply\n\n\nmedium\n\n\nleft\n\n\n\n\n\n\n\n\n-\n\n\nsubtract\n\n\nlow\n\n\nleft\n\n\n\n\n\n\n\n\n/\n\n\ndivide\n\n\nmedium\n\n\nleft\n\n\nIn Python 3 the result is always a floating point number. In Python 2 the result is an integer if both operands are integers.\n\n\n\n\n\n\n//\n\n\nfloor-divide\n\n\nmedium\n\n\nleft\n\n\ndivide then floor, result is an integer\n\n\n\n\n\n\n**\n\n\nexponent\n\n\nhigh\n\n\nright\n\n\n\n\n\n\n\n\n%\n\n\nmodulus\n\n\nmedium\n\n\nleft\n\n\nremainder after division\n\n\n\n\n\n\n\n\nInteractive Examples (Python 3):\n\n\n 3 + 4 * 5\n23\n\n (3 + 4) * 5\n35\n\n 10 / 3\n3.3333333333333335\n\n 10 // 3\n3\n\n 10 % 3\n1\n\n 2 ** 3 ** 4\n2417851639229258349412352\n\n (2 ** 3) ** 4\n4096\n\n\n\n\nStrings\n\n\n\n\n\n\nRepresent text\n\n\n\n\n\n\nType: \nstr\n\n\n\n\n\n\nIn Python 3, the str type contains Unicode characters.\n\n\n\n\n\n\nIn Python 2, the str type contains ASCII characters (sometimes\n    called byte strings). Python 2 has a separate type for unicode\n    strings, the type is called unicode; literals of this type are\n    prefixed by the letter \nu\n.\n\n\n\n\n\n\nString literals must be quoted. There are 3 quoting styles:\n\n\n\n\n\n\nsingle quote characters: \n'hello'\n\n\n\n\n\n\ndouble quote characters: \n\"hello\"\n\n\n\n\n\n\ntriple quote characters: \n'''hello'''\n (three single quotes in a\n    row) or \n\"\"\"hello\"\"\"\n (three double quote characters in a row)\n\n\n\n\n\n\n\n\n\n\nThe single quote and double quote versions of strings have the same\n    value. The purpose of the different quotation styles is to make it\n    convenient to have literal quotation marks inside strings\n    (avoiding the need to escape the quote character). For example:\n\n\n\n\n\n\n \nThis inverted comma won't be a problem inside quotation marks\n\n\nThis inverted comma won't be a problem inside quotation marks\n\n\n 'this \nquote\n will work'\n'this \nquote\n will work'\n\n 'this isn't going to work though'\nFile \nstdin\n, line 1\n'this isn't going to work though'\n^ SyntaxError: invalid syntax\n\n\n\n\n\n\n\n\nTriple quoted strings can be written on multiple lines. The line\n    breaks will be preserved within the string. Useful for docstrings\n    (see section on functions).\n\n\n\n\n\n\nThe usual set of escape characters are supported:\n\n\n\n\n\n\n\\n\n newline\n\n\n\n\n\n\n\\t\n tab\n\n\n\n\n\n\n\\\\\n backslash\n\n\n\n\n\n\n\\'\n single quote\n\n\n\n\n\n\n\\\"\n double quote\n\n\n\n\n\n\nand many more\n\n\n\n\n\n\n\n\n\n\nPython does not have a separate type for representing individual\n    characters. Instead you use strings of length one.\n\n\n\n\n\n\nStrings are iterable. If you iterate over a string (using a for\n    loop) you process it one character at a time from left to right.\n\n\n\n\n\n\nStrings can be indexed to obtain individual characters, e.g. \ns[5]\n\n\n\n\n\n\nIndices are zero-based (but you may also use negative indices to\n    access items with respect to the right end of the string).\n\n\n\n\n\n\nStrings are immutable: you cannot modify a string once it has been\n    created.\n\n\n\n\n\n\nInteractive Examples (Python 3):\n\n\n type(\nhello\n)\n\nclass 'str'\n\n\n \nhello\n == 'hello'\nTrue\n\n '''This string\n... is on\n... multiple\n... lines'''\n'This string\\\\nis on\\\\nmultiple\\\\nlines'\n\n \nbonjour\n.upper()\n'BONJOUR'\n\n len(\nbonjour\n)\n7\n\n \nbonjour\n.startswith(\nb\n)\nTrue\n\n \ncat,sat,flat\n.split(\n,\n)\n['cat', 'sat', 'flat']\n\n # Print the first 5 Chinese unicode characters\n\n print('\\u4E00\\u4E01\\u4E02\\u4E03\\u4E04')\n\u4e00\u4e01\u4e02\u4e03\u4e04\n\n x = \nfloyd\n\n\n x[0]\n'f'\n\n \nhello\n + \n \n + \nworld\n\n'hello world'\n\n\n\n\nExample program:\n\n\n# Prompt the user to input a string:\ninput = raw_input(\nEnter string: \n)\n\n# Count the number of vowels in the input string\nvowels = 'aeiou'\ncount = 0\n\nfor char in input:\n    if char in vowels:\n        count += 1\n\n# Print the count to the standard output\nprint(count)\n\n\n\n\nExample usage of the above program from the operating system command\nprompt, assuming the program is saved in a file called \nvowels.py\n:\n\n\npython vowels.py\nEnter string: abracadabra\n5\n\n\n\n\nLists\n\n\n\n\n\n\nRepresent mutable ordered sequences of values.\n\n\n\n\n\n\nType: \nlist\n\n\n\n\n\n\nList literals are written in between square brackets, e.g. \n[1, 2, 3]\n\n\n\n\n\n\nList elements can be objects of any type (including other lists).\n\n\n\n\n\n\nLike strings, lists can be indexed like so: \nx[3]\n\n\n\n\n\n\nIndices are zero-based (but you may also use negative indices to\n    access items with respect to the right end of the list).\n\n\n\n\n\n\nLists are mutable. You can update items, delete items and add new\n    items.\n\n\n\n\n\n\nIndexing into a list is a constant time (amortised) operation.\n\n\n\n\n\n\nInteractive Examples:\n\n\n type([1, 2, 3])\n\nclass 'list'\n\n\n x = []\n\n len(x)\n0\n\n x.append(\nhello\n)\n\n x\n['hello']\n\n len(x)\n1\n\n x[0]\n'hello'\n\n x.insert(0, True)\n\n x\n[True, 'hello']\n\n del x[1]\n\n x\n[True]\n\n x += [42, \nNewton\n, 3.142]\n\n x\n[True, 42, 'Newton', 3.142]\n\n\n\n\nDictionaries\n\n\n\n\n\n\nRepresent finite mappings from keys to values.\n\n\n\n\n\n\nAre implemented as \nhash tables\n. The key objects must be hashable\n    (which rules out mutable objects, such as lists).\n\n\n\n\n\n\nType: \ndict\n\n\n\n\n\n\nDictionary literals are written inside curly brackets, with\n    key-value pairs separated by colons: e.g. \n{12: \"XII\", 6: \"VI\"}\n\n\n\n\n\n\nDictionaries can be indexed by keys. If the key exists in the\n    dictionary its corresponding value is returned, otherwise a\n    \nKeyError\n exception is raised.\n\n\n\n\n\n\nThe cost of indexing a dictionary is proportional to the time taken\n    to hash the key. For many keys this can be considered constant\n    time. For variable sized objects, such as strings, this can be\n    considered to be proportional to the size of the object.\n\n\n\n\n\n\nIterating over a dictionary yields one key at a time. All keys in\n    the dictionary are visited exactly once. The order in which the\n    keys are visited is arbitrary.\n\n\n\n\n\n\nYou may test if an object is a key of a dictionary using the in\n    operator.\n\n\n\n\n\n\nInteractive Examples:\n\n\n type({12: \nXII\n, 6: \nVI\n})\n\nclass 'dict'\n\n\n friends = {}\n\n friends['Fred'] = ['Barney', 'Dino']\n\n friends\n{'Fred': ['Barney', 'Dino']}\n\n friends['Fred']\n['Barney', 'Dino']\n\n friends['Barney']\nTraceback (most recent call last):\nFile \n\\\nstdin\\\n, line 1, in \\\nmodule\\\n\nKeyError: 'Barney'\n\n friends['Wilma'] = ['Betty']\n\n friends\n{'Fred': ['Barney', 'Dino'], 'Wilma': ['Betty']}\n\n friends.keys()\ndict_keys(['Fred', 'Wilma'])\n\n friends.values()\ndict_values([['Barney', 'Dino'], ['Betty']])\n\n 'Dino' in friends\nFalse\n\n\n\n\nExample program:\n\n\n# Compute and print a histogram of a sequence of integers entered\n# on standard input, one number per line\n\nimport sys\n\nhistogram = {}\n\n# Iterate over each line in the standard input\nfor line in sys.stdin:\n    # Parse the next input as an integer\n    next_integer = int(line)\n    # Update the histogram accordingly\n    if next_integer in histogram:\n        # We've seen this integer before\n        histogram[next_integer] += 1\n    else:\n        # First occurrence of this integer in the input\n        histogram[next_integer] = 1\n\n# Print each key: value pair in the histogram in ascending\n# sorted order of keys\nfor key in sorted(histogram):\n    print(\n{} {}\n.format(key, histogram[key]))s\n\n\n\n\nExample usage of the above program from the operating system command\nprompt, assuming the program is saved in a file called \nhisto.py\n:\n\n\npython histo.py\n\n\n\n\nUser types in a sequence of integers to the program, one per line, and\npresses control-d to terminate the input:\n\n\n3\n43\n12\n19\n3\n12\n12\n43\n\n\n\n\nProgram prints its output:\n\n\n3 2\n12 3\n19 1\n43 2\n\n\n\n\nTuples\n\n\n\n\n\n\nRepresent \nimmutable\n ordered sequences of values.\n\n\n\n\n\n\nVery much like lists except they cannot be modified once created.\n\n\n\n\n\n\nType: \ntuple\n\n\n\n\n\n\nLiterals are written in between parentheses: \n(1, 2, 3)\n\n\n\n\n\n\nThe can be used as keys in dictionaries (unlike lists).\n\n\n\n\n\n\nLoops\n\n\nWhile loops\n\n\n\n\n\n\nIterate until condition is \nFalse\n\n\n\n\n\n\nSyntax:\n\n\n\n\n\n\nwhile expression:\n    statement_block\n\n\n\n\n\n\nThe value of the boolean expression is tested. If it evaluates to\n    \nTrue\n then the statement block is executed once, before repeating\n    the loop. If it evaluates to False then the program continues\n    execution immediately after the loop.\n\n\n\n\nExample:\n\n\ndef factorial(n):\n    result = 1\n    while n \n 0:\n        result *= n\n        n -= 1\n    return result\n\n\n\n\nFor loops\n\n\n\n\n\n\nIterate over each item in a collection (e.g. list, string, tuple,\n    dictionary, file).\n\n\n\n\n\n\nSyntax:\n\n\n\n\n\n\nfor variable in expression:\n    statement_block\n\n\n\n\n\n\n\n\nEach item from the iterator expression is selected and assigned to\n    the variable, then the statement block is executed. The loop ends\n    when every item in the iterator has been visited.\n\n\n\n\n\n\nThe order of items visited in the iterator depends on the type of\n    the iterator. Lists, strings and tuples proceed in a left-to-right\n    fashion. Files proceed one line at a time. Dictionaries proceed in\n    an arbitrary order.\n\n\n\n\n\n\nThe \nrange()\n function is useful for generating iterators of numbers\n    within a range. Note that the lower bound is inclusive and the\n    upper bound is exclusive.\n\n\n\n\n\n\nExample:\n\n\ndef factorial(n):\n    result = 1\n    for item in range(n + 1):\n        result *= item\n    return result\n\n\n\n\nBreak and continue\n\n\n\n\n\n\nBoth types of loops support the \nbreak\n and \ncontinue\n keywords.\n\n\n\n\n\n\nbreak\n terminates the loop immediately.\n\n\n\n\n\n\ncontinue\n jumps immediately back to the start of the loop.\n\n\n\n\n\n\nThey can sometimes simplify the conditional logic of a loop, but\n    should be used sparingly.\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nAllow you to define reusable abstractions. Sometimes called\n    \nprocedures\n.\n\n\n\n\n\n\nAre generally defined at the top level of a module, and can also be\n    nested.\n\n\n\n\n\n\nType: \nfunction\n\n\n\n\n\n\nNamed functions are bound to a variable name and may have complex\n    bodies.\n\n\n\n\n\n\nAnonymous functions are used in-line, and may only have expression\n    bodies.\n\n\n\n\n\n\nNamed function syntax:\n\n\n\n\n\n\ndef variable(parameter_list):\n    statement_block\n\n\n\n\n\n\nAnonymous function syntax:\n\n\n\n\nlambda parameter_list: expression\n\n\n\n\nExample:\n\n\ndef is_leap_year(year):\n    if year % 4 == 0 and year % 100 != 0:\n        return True\n    else:\n        return year % 400 == 0\n\nfor year in range(2000, 2100 + 1):\n    result = is_leap_year(year)\n    print(\n{} {}\n.format(year, result))\n\n\n\n\nAnonymous function example:\n\n\n squared = lambda x: x ** 2\n\n squared(2)\n4\n\n list(map(lambda x: x + 1, [1, 2, 3]))\n[2, 3, 4]\n\n\n\n\nInput and output\n\n\n\n\n\n\nThe \nprint\n function is useful for displaying text (and other values\n    converted to text).\n\n\n\n\n\n\nIn Python 2 \nprint\n was a special keyword. In Python 3 it is a\n    function defined in the builtins.\n\n\n\n\n\n\nFancy string formatting can be done with the format method on\n    strings. Older Python code uses the string interpolation operator\n    for the same task \n%\n, but its use is now discouraged.\n\n\n\n\n\n\nFiles must be opened before than can be manipulated. A file can be\n    opened in different modes: read \n\"r\"\n, write \n\"w\"\n, read-write \n\"r+\"\n,\n    and append \n\"a\"\n. Opening a new file in write or append modes\n    creates a new file. Opening an existing file in write mode\n    overwrites its contents from the start. Opening an existing file\n    in append mode adds new content at the end of the old content.\n\n\n\n\n\n\nWhen you are finished processing a file you should close it as soon\n    as possible. Closing a file releases limited operating system\n    resources, and ensures that any pending buffered writes a flushed\n    to the storage system.\n\n\n\n\n\n\nCertain file types have libraries for convenient processing. One\n    example is the CSV (comma separated values) library for processing\n    tabular data. It is very handy for working with spreadsheets.\n\n\n\n\n\n\nThe command line arguments of a Python program are contained in a\n    list called \nsys.argv\n (it is a variable exported from the \nsys\n\n    module). For complex program you should consider using a command\n    line argument parsing library such as \nargparse\n.\n\n\n\n\n\n\nExample program:\n\n\n# Count the number of words and lines in a file\n\nimport sys\n\n# Get the input file name from the command line arguments\nfilename = sys.argv[1]\n\n# Open the file\nfile = open(filename)\n\n# Count the number of lines in the file\nnum_lines = 0\nnum_words = 0\n\nfor line in file:\n    num_lines += 1\n    num_words += len(line.split())\n\nfile.close()\n\nprint(\nNumber of lines and words in {}: {} {}\n \\\n        .format(filename, num_lines, num_words))\n\n\n\n\nAdvanced Topics\n\n\nClasses\n\n\n\n\n\n\nClasses allow you to define your own types.\n\n\n\n\n\n\nClass definitions may define methods for the type.\n\n\n\n\n\n\nA class may inherit, and possibly override, some functionality from\n    a superclass.\n\n\n\n\n\n\nSyntax:\n\n\n\n\n\n\nclass variable(superclass_list):\n    body\n\n\n\n\n\n\n\n\nThe name of the class is given by the variable in the definition.\n    The superclass list defines the superclasses of the new class\n    (very often the base type object is used). The body of the class\n    typically defines one or more methods.\n\n\n\n\n\n\nInstances of classes are created by calling the class name as if it\n    were a function.\n\n\n\n\n\n\nIf defined, the special method called \n__init__\n is used to\n    initialise a newly created instance of a class.\n\n\n\n\n\n\nThe first parameter to each method is the object upon which the\n    method was called. The convention is to use the variable called\n    self, however any variable name will do. Many object oriented\n    languages make this variable an implicit parameter called this.\n\n\n\n\n\n\nExample:\n\n\nclass Vector(object):\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def magnitude(self):\n        return sqrt(self.x ** 2 + self.y ** 2 + self.z ** 2)\n\n    def normalise(self):\n        magnitude = self.magnitude()\n        if magnitude == 0:\n            # Somehow we have a degenerate vector.\n            return self\n        else:\n            return self / self.magnitude()\n\n    def angle(self, other):\n        dp = self.dot_product(other)\n        return acos(dp / self.magnitude() * other.magnitude())\n\n    def dot_product(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n\n\n\nExceptions\n\n\n\n\n\n\nExceptions allow Python programs to handle erroneous program\n    conditions.\n\n\n\n\n\n\nAn exception is raised (or thrown) at the point of the error and\n    handled (or caught) at some other place in the program.\n\n\n\n\n\n\nException handlers have the syntax:\n\n\n\n\n\n\ntry:\n    statement_block\nexcept exception_type as variable:\n    statement_block\n...\n\n\n\n\n\n\n\n\nThe statement block after \ntry\n is executed. If no exceptions are\n    raised in that block the program continues immediately after the\n    exception handler. If an exception is raised in the block then\n    program control jumps to the innermost closing \nexcept\n clause.\n    Except clauses may optionally specify the set of exception types\n    that they can handle. If the raised exception is an instance of\n    the handled type then the body of the except clause is executed,\n    otherwise the next except clause (if any) is tried.\n\n\n\n\n\n\nIf no matching exception handler is found then the program will\n    terminate with an unhandled exception error. Python will normally\n    print a stack trace at this point for error diagnosis.\n\n\n\n\n\n\nYou may raise your own exceptions using the \nraise\n keyword.\n\n\n\n\n\n\nExample:\n\n\n# alternative version of the histogram code from the section on\n# dictionaries\nfor line in sys.stdin:\n    next_integer = int(line)\n    try:\n        histogram[next_integer] += 1\n    except KeyError:\n        histogram[next_integer] = 1\n\n\n\n\nModules\n\n\n\n\n\n\nA module is a file which contains Python code.\n\n\n\n\n\n\nAny Python file you create is automatically a module.\n\n\n\n\n\n\nIt is considered good programming style to decompose complex\n    programs into multiple modules. Each module should collect\n    together code with similar purpose.\n\n\n\n\n\n\nVariables defined at the top level of a module (such as global\n    variables, functions and classes) can be imported into other\n    modules.\n\n\n\n\n\n\nPython comes with many standard modules.\n\n\n\n\n\n\nThe \nimport\n keyword is used to import an entire module.\n\n\n\n\n\n\nYou may import a subset of things from a module using the \nfrom ... import ...\n syntax.\n\n\n\n\n\n\nYou may import a module with a new name using the \nfrom ... import ... as ...\n or \nimport ... as ...\n\n\n\n\n\n\nWhen a module is first imported in a program, all of its top-level\n    statements are executed from top to bottom. Subsequent imports use\n    a cached version of its definitions, its statements are not\n    re-executed.\n\n\n\n\n\n\nA special module called \nbuiltins\n is imported into every other module\n    by default, and it is automatically imported at the interactive\n    prompt in the interpreter.\n\n\n\n\n\n\nInteractive Example:\n\n\n import math\n\n math.sqrt(100)\n10.0\n\n sqrt(100)\nTraceback (most recent call last):\nFile \nstdin\n, line 1, in \nmodule\n\nNameError: name 'sqrt' is not defined\n\n from math import sqrt\n\n sqrt(100)\n10.0\n\n import math as m\n\n m.sqrt(100)\n10.0\n\n\n\n\nPackages\n\n\n\n\n\n\nA package is a collection of modules in a hierarchy.\n\n\n\n\n\n\nPackages are the common way to structure Python libraries.\n\n\n\n\n\n\nThe \nPython Package Index (PyPI)\n is a big collection of open\n    source packages contributed by the Python community (PyPI contains more than 64 thousand packages at the time of\n    writing).\n\n\n\n\n\n\nPackage installation tools such as \npip\n, make it easy to install\n    packages onto your computer.\n\n\n\n\n\n\nIf you want to make your own Python code easy for others to install\n    and use then you should consider making it a package. You can even\n    upload it to PyPI.\n\n\n\n\n\n\nMany people use \nvirtualenv\n to install packages into a local\n    \"sandboxed\" Python environment. This avoids conflicts with the\n    central Python package database on your computer, and allows\n    multiple different versions of packages to be used.", 
            "title": "Python Overview"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#authors", 
            "text": "Bernie Pope, VLSCI    Catherine de Burgh-Day, Dept. of Physics, The University of Melbourne", 
            "title": "Authors:"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#general-information", 
            "text": "Python modules are stored in files containing a \".py\" suffix (e.g solver.py).    The main implementation of Python is called CPython (it is written in C). It is byte-code interpreted.    Python can be used in two modes: interactive and scripted. In interactive mode you enter a program fragment and Python evaluates\n  it immediately and then prints the result before prompting for a\n  new input. The interactive prompt is usually rendered as the\n   chevron   . In scripted mode your program is stored in one\n  or more files which are executed as one monolithic entity. Such\n  programs behave like ordinary applications.    Python has automatic memory management (via garbage collection). Memory is allocated automatically as needed and freed\n  automatically when no longer used.", 
            "title": "General information"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#python-2-versus-python-3", 
            "text": "Currently there are two distinct flavours of Python available:    Python 2 (2.7.10 at the time of writing)    Python 3 (3.4.3 at the time of writing)    Python 3 is the new and improved version of the language. Python 3 is\nnot entirely backwards compatible, but the two versions share much in\ncommon. Version 2 is now in maintenance mode; new features will only be\nadded to version 3. The public transition from 2 to 3 has been slower\nthan some people would like. You are encouraged to use version 3 where\npossible. These notes are generally compatible with both versions, but\nwe will point out key differences where necessary.", 
            "title": "Python 2 versus Python 3"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#indentation-for-grouping-code-blocks", 
            "text": "Python uses indentation to group code blocks. Most other languages use some kind of brackets for grouping.    The recommended style is to use 4 space characters for a single indent (thus 8 spaces for two indents and so forth).    You are encouraged  not  to use tabs for indentation because there is no standard width for a tab.    Most good text editors can be configured so that that tab key is rendered as 4 space characters when editing Python code.", 
            "title": "Indentation for grouping code blocks"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#style-guide", 
            "text": "A popular style guide for Python is known as  PEP 0008 , there is a\ncorresponding tool called  pep8  which will check your code against\nthe guide and report any transgressions.  Example, Python compared to C:  Python program for computing factorial:  # Compute factorial of n,\n# assuming n  = 0\n\ndef factorial(n):\n  result = 1\n  while n   0:\n      result *= n\n      n -= 1\n  return result\n\nprint(factorial(10))  C program for computing factorial:  #include  stdio.h \n\n/* Compute factorial of n,\n  assuming n  = 0 */\n\nint factorial(int n) {\n   int result = 1;\n\n   while (n   0) {\n      result *= n;\n      n -= 1;\n   }\n   return result;\n}\n\nint main(void) {\n   printf( %d\\n , factorial(10));\n}  Things to note:    The difference in commenting style.    C programs are statically typed, and you must declare the type of functions and variables. Python is dynamically typed.    Code blocks in C are grouped by braces { }; Python uses indentation for grouping.    The C program must have a main function. Python does not require a\n    main function, it just executes the top-level statements of the\n    module.    The result returned by the C function is limited to the size of a\n    machine integer (say 32 bits). However, the result returned by the\n    Python function is unlimited in its size - it can compute\n    arbitrarily large factorials (up to the limit of the available\n    memory in your computer).", 
            "title": "Style Guide"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#comments", 
            "text": "Program comments start with a hash character \"#\" and continue until the\nend of the line. There are no multi-line comment markers, but that can\nsometimes be faked with multi-line string literals.  Examples:  # This is a comment.\n# This is another comment.\nx = 5 # This is a comment that follows some code.\n'''This is\na multi-line\nstring literal\nwhich can sometimes act like\na\ncomment.\n'''", 
            "title": "Comments"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#running-a-python-program", 
            "text": "There are many ways to run Python code:    You can run the interpreter in interactive mode. On Unix (Linux, OS\n    X) you can run the python command at the command line.    If you have Python code stores in a file, say example.py, you can\n    run it from the command line like so: python example.py    You can use one of several integrated programming environments.\n    Python ships with a fairly minimal one called  IDLE , though\n    many scientists prefer the more comprehensive  IPython .    If your Python code was installed as a package (see below), then it\n    may be executed like an ordinary application without the user\n    being aware of how the program was implemented.", 
            "title": "Running a Python program"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#objects-and-types", 
            "text": "Every value in Python is an  object  (including functions!).    Objects can have attributes and methods, which are accessed via the\n    dot \".\" operator.    All objects have a type.    Types are also objects!    Python is dynamically typed: you may get type errors at runtime but\n    never at compile time.    type(x)  returns the type of x.    Python variables may be assigned to values of different types at\n    different points in the program.    Interactive examples (Python 3):   # Create a list, assign to the variable x  x = [3, 1, 2, 3]  # Ask for the type of the value assigned to x  type(x) class 'list'   # Ask for the type of the first item in the list (an integer)  type(x[0]) class 'int'   # Count the number of times 3 appears in the list  # by calling the count method  x.count(3)\n2  # Sort the contents of the list in-place.  # Note that this mutates the list object!  # Also note that Python does not print the result in this case.  x.sort()  # Ask Python to show the value of the list  # assigned to the variable x (note it is now sorted)  x\n[1, 2, 3, 3]  # Assign x to an object of a different type (a float)  x = 3.142  type(x) class 'float'", 
            "title": "Objects and types"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#booleans", 
            "text": "Represent truth values  Values:  True ,  False  Type:  bool  Operators:  and ,  or ,  not  bool(x)  will convert x to a boolean. The heuristic is that empty things and zero-ish things are  False , everything else is  True  (but the user can override for their own types).  False  values:  False  0  (zero integer)  0.0  (zero float)  {}  (empty dictionary)  ()  (empty tuple)  []  (empty list)  ''  (empty string)  None    True  values:  everything else      In numerical contexts  True  is considered equal to the integer  1  and\n     False  is considered equal to the integer  0 . However, these\n    conversions are a common cause of bugs and should be avoided.  Python will automatically test the  truthiness  of a value if it\n    appears in a boolean context.   Interactive examples:   not True\nFalse  not False\nTrue  not ()\nTrue  not [1,2,3]\nFalse  True and False\nFalse  True and ()\n()", 
            "title": "Booleans"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#conditional-statements", 
            "text": "Conditional statements use the keywords:  if ,  elif ,  else . The syntax\n    for a conditional statement is:   if expression:\n    statement-block\nelif expression:\n    statement-block\n...\nelse:\n    statement-block    A conditional statement must have exactly one  if  part. It may have\n    zero or more  elif  parts, and a single optional  else  part at the\n    end.    The  if  and  elif  parts test the value of their boolean expressions.\n    If the expression evaluates to something which is  True  or can be\n    converted to  True  (see the rules for Booleans above) then the\n    statement block immediately beneath that part is executed.\n    Otherwise the following condition (if any) is tried. The  else \n    part, if it exists, is always and only executed if no preceding\n    condition was  True .    Interactive examples:   if []:\n...     print( Was considered True )\n... else:\n...     print( Was considered False )\n...\nWas considered False", 
            "title": "Conditional Statements"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#numbers-and-basic-mathematics", 
            "text": "", 
            "title": "Numbers and basic mathematics"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#integers", 
            "text": "Represent whole negative and positive numbers (and zero).    The range of integer values is unbounded (up to some limit defined\n    by how much memory you have on your computer).    Python 2 distinguishes between two integer types  int  and  long , and\n    automatically promotes  int  to long where necessary, whereas Python\n    3 considers them all one type called  int .    Base ten is the default literal notation:  42  (means  (4 * 10) + 2 )    Hexadecimal literals start with  0x , octal literals start with  0o ,\n    binary literals start with  0b .    int(x)  will try to convert x to an integer, x can be another numeric\n    type (including booleans) or a string. You may specify an optional\n    base for the conversion.    Interactive examples (in Python 3):   2 ** 200\n1606938044258990275541962092341162602522202993782792835301376  0x10\n16  0b10\n2  -0 == 0\nTrue  int( 123 )\n123  int( 3.142 )\nTraceback (most recent call last):\nFile  stdin , line 1, in  module \n    ValueError: invalid literal for int() with base 10: '3.142'", 
            "title": "Integers"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#floating-point-numbers", 
            "text": "Represent a finite approximation to the real numbers.    Type:  float .    (On most platforms) Python uses IEEE-754 double precision floating\n    point numbers which provide 53 bits of precision.    sys.float_info  contains details about max, min, epsilon etcetera.    Literals can be in ordinary notation or in exponential notation:   Ordinary:  3.142  Exponential:  314.2e-2     Ordinary notation requires a point  . , but digits following the\n    point are optional.    Exponential notation does not require a point unless you have a\n    fractional component.    float(x)  will try to convert x to a floating point number, x can be\n    another numeric type (including booleans) or a string.    Numeric operators will automatically convert integer arguments to\n    floating point in mixed-type expressions.    In Python 3 the division operator  /  computes a floating point result\n    for integer arguments. However, in Python 2 it computes an integer\n    result for integer arguments.    Interactive examples:   type(3.142) class 'float'   type(12) class 'int'   3.142 + 12\n15.142  3.142 == 314.2e-2\nTrue  3. == 3.0\nTrue  1/0\nTraceback (most recent call last):\nFile  stdin , line 1, in  module \nZeroDivisionError: division by zero  # Integer divided by integer yields a float in Python 3  10 / 3\n3.3333333333333335  float( 123 )\n123.0  float( 3.142 )\n3.142", 
            "title": "Floating Point Numbers"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#complex-numbers", 
            "text": "Represent a finite approximation to the complex numbers.    Type:  complex    A pair of floating point numbers: real +/- imaginary.    The real part is optional (defaults to 0). The imaginary part is\n    followed immediately by the character  j .    Interactive Examples:   5j + 3j\n8j  2-5j\n(2-5j)  2-5j + 3j\n(2-2j)", 
            "title": "Complex Numbers"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#numeric-operators", 
            "text": "Name  Operation  Precedence  Associativity  Notes      +  add  low  left  Can also be used to concatenate strings together.    *  multiply  medium  left     -  subtract  low  left     /  divide  medium  left  In Python 3 the result is always a floating point number. In Python 2 the result is an integer if both operands are integers.    //  floor-divide  medium  left  divide then floor, result is an integer    **  exponent  high  right     %  modulus  medium  left  remainder after division     Interactive Examples (Python 3):   3 + 4 * 5\n23  (3 + 4) * 5\n35  10 / 3\n3.3333333333333335  10 // 3\n3  10 % 3\n1  2 ** 3 ** 4\n2417851639229258349412352  (2 ** 3) ** 4\n4096", 
            "title": "Numeric Operators"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#strings", 
            "text": "Represent text    Type:  str    In Python 3, the str type contains Unicode characters.    In Python 2, the str type contains ASCII characters (sometimes\n    called byte strings). Python 2 has a separate type for unicode\n    strings, the type is called unicode; literals of this type are\n    prefixed by the letter  u .    String literals must be quoted. There are 3 quoting styles:    single quote characters:  'hello'    double quote characters:  \"hello\"    triple quote characters:  '''hello'''  (three single quotes in a\n    row) or  \"\"\"hello\"\"\"  (three double quote characters in a row)      The single quote and double quote versions of strings have the same\n    value. The purpose of the different quotation styles is to make it\n    convenient to have literal quotation marks inside strings\n    (avoiding the need to escape the quote character). For example:      This inverted comma won't be a problem inside quotation marks  This inverted comma won't be a problem inside quotation marks   'this  quote  will work'\n'this  quote  will work'  'this isn't going to work though'\nFile  stdin , line 1\n'this isn't going to work though'\n^ SyntaxError: invalid syntax    Triple quoted strings can be written on multiple lines. The line\n    breaks will be preserved within the string. Useful for docstrings\n    (see section on functions).    The usual set of escape characters are supported:    \\n  newline    \\t  tab    \\\\  backslash    \\'  single quote    \\\"  double quote    and many more      Python does not have a separate type for representing individual\n    characters. Instead you use strings of length one.    Strings are iterable. If you iterate over a string (using a for\n    loop) you process it one character at a time from left to right.    Strings can be indexed to obtain individual characters, e.g.  s[5]    Indices are zero-based (but you may also use negative indices to\n    access items with respect to the right end of the string).    Strings are immutable: you cannot modify a string once it has been\n    created.    Interactive Examples (Python 3):   type( hello ) class 'str'    hello  == 'hello'\nTrue  '''This string\n... is on\n... multiple\n... lines'''\n'This string\\\\nis on\\\\nmultiple\\\\nlines'   bonjour .upper()\n'BONJOUR'  len( bonjour )\n7   bonjour .startswith( b )\nTrue   cat,sat,flat .split( , )\n['cat', 'sat', 'flat']  # Print the first 5 Chinese unicode characters  print('\\u4E00\\u4E01\\u4E02\\u4E03\\u4E04')\n\u4e00\u4e01\u4e02\u4e03\u4e04  x =  floyd   x[0]\n'f'   hello  +     +  world \n'hello world'  Example program:  # Prompt the user to input a string:\ninput = raw_input( Enter string:  )\n\n# Count the number of vowels in the input string\nvowels = 'aeiou'\ncount = 0\n\nfor char in input:\n    if char in vowels:\n        count += 1\n\n# Print the count to the standard output\nprint(count)  Example usage of the above program from the operating system command\nprompt, assuming the program is saved in a file called  vowels.py :  python vowels.py\nEnter string: abracadabra\n5", 
            "title": "Strings"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#lists", 
            "text": "Represent mutable ordered sequences of values.    Type:  list    List literals are written in between square brackets, e.g.  [1, 2, 3]    List elements can be objects of any type (including other lists).    Like strings, lists can be indexed like so:  x[3]    Indices are zero-based (but you may also use negative indices to\n    access items with respect to the right end of the list).    Lists are mutable. You can update items, delete items and add new\n    items.    Indexing into a list is a constant time (amortised) operation.    Interactive Examples:   type([1, 2, 3]) class 'list'   x = []  len(x)\n0  x.append( hello )  x\n['hello']  len(x)\n1  x[0]\n'hello'  x.insert(0, True)  x\n[True, 'hello']  del x[1]  x\n[True]  x += [42,  Newton , 3.142]  x\n[True, 42, 'Newton', 3.142]", 
            "title": "Lists"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#dictionaries", 
            "text": "Represent finite mappings from keys to values.    Are implemented as  hash tables . The key objects must be hashable\n    (which rules out mutable objects, such as lists).    Type:  dict    Dictionary literals are written inside curly brackets, with\n    key-value pairs separated by colons: e.g.  {12: \"XII\", 6: \"VI\"}    Dictionaries can be indexed by keys. If the key exists in the\n    dictionary its corresponding value is returned, otherwise a\n     KeyError  exception is raised.    The cost of indexing a dictionary is proportional to the time taken\n    to hash the key. For many keys this can be considered constant\n    time. For variable sized objects, such as strings, this can be\n    considered to be proportional to the size of the object.    Iterating over a dictionary yields one key at a time. All keys in\n    the dictionary are visited exactly once. The order in which the\n    keys are visited is arbitrary.    You may test if an object is a key of a dictionary using the in\n    operator.    Interactive Examples:   type({12:  XII , 6:  VI }) class 'dict'   friends = {}  friends['Fred'] = ['Barney', 'Dino']  friends\n{'Fred': ['Barney', 'Dino']}  friends['Fred']\n['Barney', 'Dino']  friends['Barney']\nTraceback (most recent call last):\nFile  \\ stdin\\ , line 1, in \\ module\\ \nKeyError: 'Barney'  friends['Wilma'] = ['Betty']  friends\n{'Fred': ['Barney', 'Dino'], 'Wilma': ['Betty']}  friends.keys()\ndict_keys(['Fred', 'Wilma'])  friends.values()\ndict_values([['Barney', 'Dino'], ['Betty']])  'Dino' in friends\nFalse  Example program:  # Compute and print a histogram of a sequence of integers entered\n# on standard input, one number per line\n\nimport sys\n\nhistogram = {}\n\n# Iterate over each line in the standard input\nfor line in sys.stdin:\n    # Parse the next input as an integer\n    next_integer = int(line)\n    # Update the histogram accordingly\n    if next_integer in histogram:\n        # We've seen this integer before\n        histogram[next_integer] += 1\n    else:\n        # First occurrence of this integer in the input\n        histogram[next_integer] = 1\n\n# Print each key: value pair in the histogram in ascending\n# sorted order of keys\nfor key in sorted(histogram):\n    print( {} {} .format(key, histogram[key]))s  Example usage of the above program from the operating system command\nprompt, assuming the program is saved in a file called  histo.py :  python histo.py  User types in a sequence of integers to the program, one per line, and\npresses control-d to terminate the input:  3\n43\n12\n19\n3\n12\n12\n43  Program prints its output:  3 2\n12 3\n19 1\n43 2", 
            "title": "Dictionaries"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#tuples", 
            "text": "Represent  immutable  ordered sequences of values.    Very much like lists except they cannot be modified once created.    Type:  tuple    Literals are written in between parentheses:  (1, 2, 3)    The can be used as keys in dictionaries (unlike lists).", 
            "title": "Tuples"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#loops", 
            "text": "", 
            "title": "Loops"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#while-loops", 
            "text": "Iterate until condition is  False    Syntax:    while expression:\n    statement_block   The value of the boolean expression is tested. If it evaluates to\n     True  then the statement block is executed once, before repeating\n    the loop. If it evaluates to False then the program continues\n    execution immediately after the loop.   Example:  def factorial(n):\n    result = 1\n    while n   0:\n        result *= n\n        n -= 1\n    return result", 
            "title": "While loops"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#for-loops", 
            "text": "Iterate over each item in a collection (e.g. list, string, tuple,\n    dictionary, file).    Syntax:    for variable in expression:\n    statement_block    Each item from the iterator expression is selected and assigned to\n    the variable, then the statement block is executed. The loop ends\n    when every item in the iterator has been visited.    The order of items visited in the iterator depends on the type of\n    the iterator. Lists, strings and tuples proceed in a left-to-right\n    fashion. Files proceed one line at a time. Dictionaries proceed in\n    an arbitrary order.    The  range()  function is useful for generating iterators of numbers\n    within a range. Note that the lower bound is inclusive and the\n    upper bound is exclusive.    Example:  def factorial(n):\n    result = 1\n    for item in range(n + 1):\n        result *= item\n    return result", 
            "title": "For loops"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#break-and-continue", 
            "text": "Both types of loops support the  break  and  continue  keywords.    break  terminates the loop immediately.    continue  jumps immediately back to the start of the loop.    They can sometimes simplify the conditional logic of a loop, but\n    should be used sparingly.", 
            "title": "Break and continue"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#functions", 
            "text": "Allow you to define reusable abstractions. Sometimes called\n     procedures .    Are generally defined at the top level of a module, and can also be\n    nested.    Type:  function    Named functions are bound to a variable name and may have complex\n    bodies.    Anonymous functions are used in-line, and may only have expression\n    bodies.    Named function syntax:    def variable(parameter_list):\n    statement_block   Anonymous function syntax:   lambda parameter_list: expression  Example:  def is_leap_year(year):\n    if year % 4 == 0 and year % 100 != 0:\n        return True\n    else:\n        return year % 400 == 0\n\nfor year in range(2000, 2100 + 1):\n    result = is_leap_year(year)\n    print( {} {} .format(year, result))  Anonymous function example:   squared = lambda x: x ** 2  squared(2)\n4  list(map(lambda x: x + 1, [1, 2, 3]))\n[2, 3, 4]", 
            "title": "Functions"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#input-and-output", 
            "text": "The  print  function is useful for displaying text (and other values\n    converted to text).    In Python 2  print  was a special keyword. In Python 3 it is a\n    function defined in the builtins.    Fancy string formatting can be done with the format method on\n    strings. Older Python code uses the string interpolation operator\n    for the same task  % , but its use is now discouraged.    Files must be opened before than can be manipulated. A file can be\n    opened in different modes: read  \"r\" , write  \"w\" , read-write  \"r+\" ,\n    and append  \"a\" . Opening a new file in write or append modes\n    creates a new file. Opening an existing file in write mode\n    overwrites its contents from the start. Opening an existing file\n    in append mode adds new content at the end of the old content.    When you are finished processing a file you should close it as soon\n    as possible. Closing a file releases limited operating system\n    resources, and ensures that any pending buffered writes a flushed\n    to the storage system.    Certain file types have libraries for convenient processing. One\n    example is the CSV (comma separated values) library for processing\n    tabular data. It is very handy for working with spreadsheets.    The command line arguments of a Python program are contained in a\n    list called  sys.argv  (it is a variable exported from the  sys \n    module). For complex program you should consider using a command\n    line argument parsing library such as  argparse .    Example program:  # Count the number of words and lines in a file\n\nimport sys\n\n# Get the input file name from the command line arguments\nfilename = sys.argv[1]\n\n# Open the file\nfile = open(filename)\n\n# Count the number of lines in the file\nnum_lines = 0\nnum_words = 0\n\nfor line in file:\n    num_lines += 1\n    num_words += len(line.split())\n\nfile.close()\n\nprint( Number of lines and words in {}: {} {}  \\\n        .format(filename, num_lines, num_words))", 
            "title": "Input and output"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#advanced-topics", 
            "text": "", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#classes", 
            "text": "Classes allow you to define your own types.    Class definitions may define methods for the type.    A class may inherit, and possibly override, some functionality from\n    a superclass.    Syntax:    class variable(superclass_list):\n    body    The name of the class is given by the variable in the definition.\n    The superclass list defines the superclasses of the new class\n    (very often the base type object is used). The body of the class\n    typically defines one or more methods.    Instances of classes are created by calling the class name as if it\n    were a function.    If defined, the special method called  __init__  is used to\n    initialise a newly created instance of a class.    The first parameter to each method is the object upon which the\n    method was called. The convention is to use the variable called\n    self, however any variable name will do. Many object oriented\n    languages make this variable an implicit parameter called this.    Example:  class Vector(object):\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def magnitude(self):\n        return sqrt(self.x ** 2 + self.y ** 2 + self.z ** 2)\n\n    def normalise(self):\n        magnitude = self.magnitude()\n        if magnitude == 0:\n            # Somehow we have a degenerate vector.\n            return self\n        else:\n            return self / self.magnitude()\n\n    def angle(self, other):\n        dp = self.dot_product(other)\n        return acos(dp / self.magnitude() * other.magnitude())\n\n    def dot_product(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z", 
            "title": "Classes"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#exceptions", 
            "text": "Exceptions allow Python programs to handle erroneous program\n    conditions.    An exception is raised (or thrown) at the point of the error and\n    handled (or caught) at some other place in the program.    Exception handlers have the syntax:    try:\n    statement_block\nexcept exception_type as variable:\n    statement_block\n...    The statement block after  try  is executed. If no exceptions are\n    raised in that block the program continues immediately after the\n    exception handler. If an exception is raised in the block then\n    program control jumps to the innermost closing  except  clause.\n    Except clauses may optionally specify the set of exception types\n    that they can handle. If the raised exception is an instance of\n    the handled type then the body of the except clause is executed,\n    otherwise the next except clause (if any) is tried.    If no matching exception handler is found then the program will\n    terminate with an unhandled exception error. Python will normally\n    print a stack trace at this point for error diagnosis.    You may raise your own exceptions using the  raise  keyword.    Example:  # alternative version of the histogram code from the section on\n# dictionaries\nfor line in sys.stdin:\n    next_integer = int(line)\n    try:\n        histogram[next_integer] += 1\n    except KeyError:\n        histogram[next_integer] = 1", 
            "title": "Exceptions"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#modules", 
            "text": "A module is a file which contains Python code.    Any Python file you create is automatically a module.    It is considered good programming style to decompose complex\n    programs into multiple modules. Each module should collect\n    together code with similar purpose.    Variables defined at the top level of a module (such as global\n    variables, functions and classes) can be imported into other\n    modules.    Python comes with many standard modules.    The  import  keyword is used to import an entire module.    You may import a subset of things from a module using the  from ... import ...  syntax.    You may import a module with a new name using the  from ... import ... as ...  or  import ... as ...    When a module is first imported in a program, all of its top-level\n    statements are executed from top to bottom. Subsequent imports use\n    a cached version of its definitions, its statements are not\n    re-executed.    A special module called  builtins  is imported into every other module\n    by default, and it is automatically imported at the interactive\n    prompt in the interpreter.    Interactive Example:   import math  math.sqrt(100)\n10.0  sqrt(100)\nTraceback (most recent call last):\nFile  stdin , line 1, in  module \nNameError: name 'sqrt' is not defined  from math import sqrt  sqrt(100)\n10.0  import math as m  m.sqrt(100)\n10.0", 
            "title": "Modules"
        }, 
        {
            "location": "/tutorials/python_overview/python_overview/#packages", 
            "text": "A package is a collection of modules in a hierarchy.    Packages are the common way to structure Python libraries.    The  Python Package Index (PyPI)  is a big collection of open\n    source packages contributed by the Python community (PyPI contains more than 64 thousand packages at the time of\n    writing).    Package installation tools such as  pip , make it easy to install\n    packages onto your computer.    If you want to make your own Python code easy for others to install\n    and use then you should consider making it a package. You can even\n    upload it to PyPI.    Many people use  virtualenv  to install packages into a local\n    \"sandboxed\" Python environment. This avoids conflicts with the\n    central Python package database on your computer, and allows\n    multiple different versions of packages to be used.", 
            "title": "Packages"
        }, 
        {
            "location": "/tutorials/transcriptomics/", 
            "text": "em {font-style: normal; font-family: courier new;} h2 {font-size: 24px; font-weight: bold} h3 {font-size: 18px; font-weight: bold} h4 {font-size: 16px; font-weight: bold}\n\n\n\nTranscriptomics Workshop\n\n\nLa Trobe University October 2015\n\n\nAuthors\n:  Nathan Hall \n Andrew Robinson\n\n\n1. Background\n\n\nThis Workshop is designed to be run over one and a half days.  No prior bioinformatics or unix knowledge is required.\n\n\nIntro to Sequencing - where does the data come from\n\n\nThe workshop will start lecture overview of where the data comes from, (Illumina technologies) and what types of transcriptomics experiments can be performed.\n\n\nYour Computer\n\n\nThe following programs will need to be installed on your computer to complete this tutorial.  If you are waiting for something to complete, feel free to install these programs ahead of time.\n\n\nMac \n Unix\n\n\n\n\nIGV \n[download]\n\n\nbandage \n [download]\n\n\n\n\nWindows\n\n\n\n\nputty \n[download]\n\n\nwinscp \n[download]\n. You will have to install onto C drive by choosing non-standard installation\n\n\nIGV \n[download]\n.  Download the binary distribution\n\n\nbandage \n[download]\n\n\n\n\nIf you are installing onto the room computers, install everything on the desktop.\n\n\nRemote log in\n\n\nIn this topic we will learn how to connect to a \nUnix\n computer via a method called \nSSH\n and run a few basic commands.\n\n\nTo begin this workshop you will need to connect to an HPC.  Today we will use the LIMS-HPC.  The computer called \n\nlims-hpc-m\n (m is for master which is another name for head node) is the one that coordinates all the HPCs tasks.\n\n\nServer details\n\n\n\n\nhost\n: lims-hpc-m.latrobe.edu.au\n\n\nport\n: 6022 \n\n\nusername\n: trainingXX (where XX is a two digit number, provided at workshop)\n\n\npassword\n: (provided at workshop) \n\n\n\n\n\n\n\n\nMac OS X / Linux\n\n\n\n\nBoth Mac OS X and Linux come with a version of ssh (called OpenSSH) that can be used from the command line.  To use OpenSSH you must \nfirst start a terminal program on your computer.  On OS X the standard terminal is called Terminal, and it is installed by default. \nOn Linux there are many popular terminal programs including: xterm, gnome-terminal, konsole (if you aren't sure, then xterm is a good \ndefault).  When you've started the terminal you should see a command prompt.  To log into LIMS-HPC, for example, type this command at \nthe prompt and press return (where the word username is replaced with your LIMS-HPC username):\n\n\nssh -p 6022 username@lims-hpc-m.latrobe.edu.au\n\n\n\n\nThe same procedure works for any other machine where you have an account except most other HPCs will not need the \n-p 6022\n \n(which is telling ssh to connect on a non-standard port number).\n\n\nYou may be presented with a message along the lines of:\n\n\nThe authenticity of host 'lims-hpc-m.latrobe.edu.au (131.172.36.150)' can't be  established.\n...\nAre you sure you want to continue connecting (yes/no)?\n\n\n\n\nAlthough you should never ignore a warning, this particular one is nothing to be concerned about; type \nyes\n and then \npress enter\n. \nIf all goes well you will be asked to enter your password.  Assuming you type the correct username and password the system should \nthen display a welcome message, and then present you with a Unix prompt.  If you get this far then you are ready to start entering \nUnix commands and thus begin using the remote computer.\n\n\n\n\n\n\n\n\n(function(w,d,u){w.readyQ=[];w.bindReadyQ=[];function p(x,y){if(x==\"ready\"){w.bindReadyQ.push(y);}else{w.readyQ.push(x);}};var a={ready:p,bind:p};w.$=w.jQuery=function(f){if(f===d||f===u){return a}else{p(f)}}})(window,document)\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink0\").click(function(e){\n            e.preventDefault();\n            $(\"#showable0\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nWindows\n\n\n\n\nOn Microsoft Windows (Vista, 7, 8) we recommend that you use the PuTTY ssh client.  PuTTY (putty.exe) can be downloaded \nfrom this web page:\n\n\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\n\n\nDocumentation for using PuTTY is here:\n\n\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/docs.html\n\n\nWhen you start PuTTY you should see a window which looks something like this:\n\n\n\n\nTo connect to LIMS-HPC you should enter its hostname into the box entitled \"Host Name (or IP address)\" and \n6022\n in the port, \nthen click on the Open button. All of the settings should remain the same as they were when PuTTY started (which should be the \nsame as they are in the picture above).\n\n\nIn some circumstances you will be presented with a window entitled PuTTY Security Alert. It will say something along the lines \nof \n\"The server's host key is not cached in the registry\"\n. This is nothing to worry about, and you should agree to continue (by \nclicking on Yes). You usually see this message the first time you try to connect to a particular remote computer.\n\n\nIf all goes well, a terminal window will open, showing a prompt with the text \n\"login as:\"\n. An example terminal window is shown \nbelow. You should type your LIMS-HPC username and press enter. After entering your username you will be prompted for your \npassword. Assuming you type the correct username and password the system should then display a welcome message, and then \npresent you with a Unix prompt. If you get this far then you are ready to start entering Unix commands and thus begin using \nthe remote computer.\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink1\").click(function(e){\n            e.preventDefault();\n            $(\"#showable1\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nBasic Unix commands:\n\n\n\n\ncd\n - change directory\n\n\ncp\n - copy files\n\n\nls\n - list files in a directory\n\n\nmore\n - look at the contents of a file, \nspace bar\n to proceed to next page,  \nq\n to quit.\n\n\n\n\nWorkshop files\n\n\nThe files required for the workshop have already been copied into the training accounts.  Type the following commands\n\n\nls -l \n\n\n\n\nthis gives you a list of the files already in your directory.  We will go through the contents of these files as we proceed through the workshop.\n\n\nTest data set\n\n\nThis workshop is using real 100 bp single end Illumina HiSeq data for \nCol-0\n arabidopsis, but reads are limited to chromosome 1 of the genome to make the data files and computational time more manageable.  The data file \nchr1.fastq\n has over 2 million reads.  Typical read count for a basic experiment is 15-20 million reads per sample.\n\n\nFastq file format\n\n\nline1: @sequence_name \n\nline2: sequence string\n\nline3: + character\n\nline4: quality string\n\n\nQuality encoding ordered lowest quality to highest quality: \n\n \n!\"#$%\n'()*+,-./0123456789:;\n=\n?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\n\n\nexample:\n\n\n\n\n@HWI-1KL119:131:C4W5NACXX:2:2201:14635:56396\nGAAATCGGACGGTTTAGTGAAAATGGAGTATCAAGTTGGGTTTGGGTTCCGTCCGAACGACGAGGAGCTC\n+\nBB\n<\n00;B;7BFFFFBFB;FFBBB;BBB;;BBFBBFBFBBFFFFFFBBBFFFFIIIIIIIFIIIIIIIIFF\n\n\n\n\n\n\n\nYou can look at the contents of the fastq file by typing\n\n\nmore chr1.fastq\n\n\n\n\nType \nq\n to exit the screen\n\n\n2. Data QC\n\n\nThe typical first step of an NGS project is to analyse the quality of the data.  The easiest way to do this is to use the \nfastqc\n program\n\n\nThe instructions to the computer are in the \nrun_fastqc\n program that you copied earlier into your directory.  You can see the content of the \nrun_fastqc\n file by typing\n\n\nmore fastqc\n\n\n\n\nType \nq\n to exit the screen\n\n\nA command called \nsbatch\n tells the computer to execute the \nrun_fastqc\n instructions. The \nfastqc\n program is loaded using the \nmodule load\n command and the program is executed with the last line of the script: with \nfastqc filename.fastq\n.  Now we will submit this job to the computer.\n\n\nsbatch run_fastqc\n\n\n\n\n\n\nAside\n: our computers run the \nslurm\n queueing system which uses \nsbatch\n, a similar command \nqsub\n is used for the \nPBS\n queueing system.\n\n\n\nOnce you have submitted your job with the \nsbatch\n command you can see if it has finished by typing the \nsqueue\n command, which lists all the current jobs. You can choose to only see your jobs with the command:\n\n\nsqueue -u trainingXX\n\n\n\n\nwhere XX is replaced with your training account number. \n\n\nAlternatively you can type\n\n\nls -lrt\n\n\n\n\nYou will see a list of files with the most recent at the bottom of the page\nthe file that starts with slurm contains the output of your \nrun_fastqc\n script\nYou can see the contents of the slurm file by typing\n\n\nmore slurm-*\n\n\n\n\nAside\n: the \n*\n character is a wildcard, so the above command will look at all files that starts with slurm.  At the moment we only have one file, but we can type in the full name to get the file of interest.  There is also the auto complete tab function.  Try typing \nmore slurm\n, then the \ntab\n key to get an auto complete of the slurm file.  \nNote\n: auto complete does not work if the results are ambiguous\n\n\n\nAnalysing the fastqc output:\n\n\nThe easiest way to analyse the output of the fastqc job is to download the \nchr1_fastqc.zip\n file and visualise through a web browser.  \n\n\nMacs\n\n\nFrom a mac terminal window (not the lims-hpc window) paste the following command:\n\n\nscp -P 6022 trainingXX@lims-hpc-m.latrobe.edu.au:chr1_fastqc.zip ~/Desktop\n\n\n\n\nNote\n: You will need to replace XX with your training account number and enter the password when prompted.\n\n\nOn your desktop, double click on the \nzip\n file, and then go into the extracted folder and double click on the \n.html\n file, and it should open up in your web browser.\n\n\nWindows\n\n\nInstall winscp and login using the settings below.  Make sure you have your correct training username\n\ufeff\n\n\n\nYou will then be able to drag the unix files (right screen) onto your local computer (left screen)\nThe file you need transfer for this fastqc analysis is \nchr1_fastqc.zip\n\n\nOnce the file is transferred, right click on the file and select \nextract\n.  You can then enter the extracted \nchr1_fastqc\n directory and open the \nhtml\n file.\n\n\nAnalysis\n\n\nOnce the html file is opened in your web browser, the things to look at are:\n\nQuality:\n\nGC content:\n\noverrepresented sequences - this is where adaptors can be noticed, \nyou may also want to blast any unknown overrepresented sequences.\n\n\nNote\n: these stats are optimised for genomes, NOT transcriptomes, so some things will not conform to expectations, particularly GC content and duplication rate.\n\n\nAside\n: Most modern Illumina data does not need quality trimming, but sometimes adaptor and quality trimming is still required.  \nTrimmomatic\n is one of the most commonly used trimming programs.\n\n\n\n3. Mapping RNAseq Data\n\n\nOnce we have analysed the raw reads and satisfied ourselves that the data is OK, we can then start the mapping process using the \ntophat\n and \nbowtie\n programs.  Here each read is mapped to the reference genome (using bowtie) and then a second round of mapping (tophat) incorporates splice sites.\n\n\nFor this mapping we can submit the job by typing\n\n\nsbatch run_tophat\n\n\n\n\nHave a look at the contents of this \nrun_tophat\n script with the \nmore\n command.  \n\n\nAfter the job has started there will be a tophat directory created. Type \n\n\ncd tophat \n\n\n\n\nto go into the \ntophat\n directory.  Type \nls -l\n to see what is there and use \nmore\n to visualise any files text that are present.\n\n\nUse \ncd dir_name\n again to go into any subdirectories, \ncd ..\n to go up a directory, or just \ncd\n to go back to your home directory.\n\n\nFollow the status of your job with the \nsqueue\n command and look at your slurm output file as for the previous job.\n\n\nWhen the run has finished, the most important file is \naccepted_hits.bam\n.\nThis binary file contains all the the details of the data that maps to the genome including the mapping coordinates.\n\n\nTo look at the text version of this bam file we use the \nsamtools\n program.\nFirst this program needs to be loaded using the \nmodule load\n command, and then executed as below (copy and paste this into your terminal/putty window):\n\n\ncd ~/tophat\nmodule load samtools-gcc/1.2\nsamtools view accepted_hits.bam | more\n\n\n\n\nType \nq\n to get out of the \nmore\n session.\n\nWe won\u2019t worry about all the details of the sam file at this stage as we will look at some of the more informative fields later today.\n\n\nLook at the file \nalign_summary.txt\n using the \nmore\n command.  As we are only mapping chr1 reads this is not particularly interesting, but can be informative for full data sets as differing mapping rates across samples can alert you to library problems or other issues.\n\n\n4. Visualising mapped data\n\n\nThis section uses the  Interactive Genome Viewer (IGV) to look at reads that map to the genome.\n\n\nInstalling IGV on your computer:\n\n\nBefore we can visualise the data, the program needs to be installed locally.\n\n\nGo to the \n[IGV webpage]\n\nYou will need to register before you can download the application.  \n\n\nWindows users will need to run the program by opening \nIGV\n the \nwindows batch\n file\n\n\nFile transfers\n\n\nOnce this \nrun_tophat\n script has finished, we can copy the the important files to a local computer and visualise the mapped data interactively.\n\n\nMac:\n\n\nscp -P 6022 trainingXX@lims-hpc-m.latrobe.edu.au:tophat/accepted_hits.bam* ~/Desktop\n\n\n\n\nImportant\n: this copies the bam file and the index file.\n\n\nscp -P 6022 trainingXX@lims-hpc-m.latrobe.edu.au:tophat/junctions.bed ~/Desktop\n\n\n\n\nWindows:\n\n\nUse \nwinscp\n to copy the following files from the \ntophat\n directory: \naccepted_hits.bam\n, \naccepted_hits.bam.bai\n, \njunctions.bed\n\n\nVisualisation\n\n\nNow that \nIGV\n is installed and the files are transferred onto your computer, you can start IGV and read in the files. Choose the \nA. Thaliana (TAIR 10)\n genome from the genome menu (top LHS), then \nfile open\n and choose the \nbam\n file and then the \nbed\n file.  You do not need to manually read in the \nbai\n file - this is done automatically.\n\n\nIGV\n shows individual reads, with splicing details shown.  Things to see, histogram, splicing, read directions, how genes, introns and exons are displayed, reads that do not match the known genes etc\u2026\n\n\nFind genes that have alternative splicing, retained introns, have good coverage, bad coverage, have overlapping reads with another gene or are interesting in any other way and record the AT numbers for later in the workshop.\n\n\n5. Gene Counting\n\n\nOnce the data has been mapped, we can count each gene using the program \nhtseq-count\n.\nThis is a conceptually simple process, where if a read unambiguously maps to a gene, then that gene has one count.  \n\n\nNote\n: alternative isoforms are ignored for most gene count experiments and counts are for all isoforms combined.\n\n\nDocumentation for \nhtseq-count\n is found here:\n\n\nhttp://www-huber.embl.de/users/anders/HTSeq/doc/count.html\n\n\nFirst submit the slurm script\n\n\nsbatch run_htseq\n\n\n\n\nThe final output of htseq-count a table list of genes and their counts and is called \ngene_counts.txt\n and can be found in the \ntophat\n directory.  Use the \nmore\n command to look at this file.\n\n\nNote that we are only mapping to genes on chromosome 1 so many genes have no reads.\n\n\nYou can sort this file in terms of gene counts by using the command:\n\n\nsort -k 2 -n gene_counts.txt | more\n\n\n\n\nFurther Gene count analysis\n\n\nGo back to IGV and look at some genes with:\n\n1. High counts\n\n2. Middle level counts\n\n3. Low counts\n\n\nrecord a few AT numbers for later in the workshop\n\n\nReads not counted\n\n\nWhen a read is mapped to more than one position in the genome, then this read is not counted by \nhtseq-count\n.  In \nIGV\n, go to \nAT1G11270\n to see some reads that are not counted.  The white reads have a zero mapping quality.\n\n\nInfo\n: when you mouse over a read in IGV, it will show you mapping information. Take note of the \nCigar\n string (M=match,  N=gap), \nmapping quality\n (50=good, low value=bad) and \nNH\n (number of hits, if >1 then mapping is ambiguous).  Google \u201csamtools format\u201d to see all the details \n\n\n\nNow go to \nAT1G11300\n and decide on whether you believe the apparent splicing in that gene.\n\n\nVisualise gene \nAT1G64940\n.  How many reads should be counted by \nhtseq-count\n for these genes?\nUsing the grep command below  (grep just extracts the line of the file that matches the string, AT number in this case)\n\n\ngrep AT1G64930 gene_counts.txt\ngrep AT1G64940 gene_counts.txt\n\n\n\n\nThis will give you the counted reads for these genes\n\n\nFinally type:\n\n\ntail gene_counts.txt\n\n\n\n\nto see the number of reads that are not counted, and the reasons why:\n\nno_feature   \n\nambiguous    \n\nalignment_not_unique     \n\n\n6. Differential Gene Expression\n\n\nRather that mapping six whole transcriptomes and combining the results in the workshop, we will use a file that has already been generated called \nWT_MUT_counts.tsv\n.  This comes from a data set being worked on in the Whelan lab, where a LETM gene has been knocked out and plants are put under a drought stress environment.  Visualise this data table with the \nmore\n command. \n\n\nWe can do simple, but statistically valid differential expression analysis using a web server called \ndegust\n\n\n[http://vicbioinformatics.com/degust-training/]\n\n\nYou will need to copy \nWT_MUT_counts.tsv\n onto your computer and then upload the data into degust.\n\n\nFollow these steps: \n\n1. Upload your \ntsv\n file\n\n2. give the dataset a name\n\n3. \nInfo columns\n is set to \nseqname\n  \n\n4. enter \nMin Read Count\n as \n10\n\n5. Group replicates using the \nAdd condition\n button\n\n6. Press \nSave Changes\n where you are done.\n\n\nI will demonstrate the options of degust and help you interpret the results.\n\n\n\n\nMDS plot - what is an MDS plot and how do replicates group?\n\n\nMDS plot, (somewhat like principle component analysis), groups samples on 2D graph on their most variable genes.  Note: The groupings of replicates are not taken into account in this analysis.\n\n\nYou can change the number of genes that are used to calculate the MDS plot. This does not usually have a large effect.\n\n\nDifferential expression analysis\n\n\nThere are two other tabs which relate to differential expression analysis.  \nExpression - parallel coordinates\n, and \nExpression - MA plot\n.  Parallel expression give you a heat map representation, and the MA plot is a measure of differential expression in combination with absolute expression.\n\n\nYou will need to limit the genes you are viewing. \nFDR cut off\n (false discovery rate) is the main filter, but you can also choose to define an \nabsolute log FC\n filter.  A value of 1 means that you require a two fold difference in expression (see below for explanation of log2 FC).\n\n\n\n\nAside\n: how to define expression changes : use log2 values\n\nIf a fold change in expression (counts)  is 2, then log2=1\n\nIf a fold change in expression is 4, then log2=2\n\nIf a fold change in expression is 8, then log2=3\n\nIf a fold change in expression is -2, then log2=-1\n\nIf a fold change in expression is -4, then log2=-2\n\nIf a fold change in expression is -8, then log2=-3\n\nRatios of expressions (counts) don\u2019t work as two fold reduction is 0.5, \n\n4 fold reduction is 0.25\n\n8 fold reduction is 0.125\n\n\n\nWithin degust, you can also change the analysis method from \nVoom/Limma\n to \nedgeR\n.  All analysis is done by the degust server.\n\n\nAside\n: Limma and edgeR info\n\n\nVoom/Limma\n: Linear Models for Microarray and RNA-Seq Data\n\nVoom: http://genomebiology.com/2014/15/2/R29, precision weights unlock linear model analysis tools for RNA-seq read counts\n\n\nedgeR\n: Implements a range of statistical methodology based on the negative binomial distributions, including empirical Bayes estimation, exact tests, generalized linear models and quasi-likelihood tests.\n\n\n\nSpend some time interacting with these these pages, exploring what information can be gained from this data.  Look for patterns in the heatmaps, how may these relate to function?\n\n\nDay two\n\n\n7. Transcriptome Assembly\n\n\nWhen a reference genome is not available, then assembling the reads using programs such as \ntrinity\n is the typical route of analysis.\n\n \n[http://trinityrnaseq.github.io/]\n\n\nThis workshop will take the same raw \nfastq\n data as was mapped to the genome and assemble it, then analyse some of the transcripts. For the sake of speed, only the first 250 thousand reads are assembled.  These correspond to approximately the first 2.5MB of chromosome 1.\n\n\nThe first step is to make a file with these reads using the \nhead\n command.  We take the first million lines as there are four lines per sequence.\n \n\n\nhead -1000000 chr1.fastq\n chr1_250K.fastq\n\n\n\n\nLook at the \nrun_trinity\n file and then submit the job:\n\n\nsbatch run_trinity\n\n\n\n\nThe final output file is called \nTrinity.fasta\n and is in the \ntrinity\n directory.\n\nThe format of the output fasta file is:\n\nc203_g1_i1\n\n\nc\n represents the contig number - loosely represents a gene\n\n\ng\n represents the fragment number of the gene\n\n\ni\n represents the isoform or the sequence variant number\n\n\n8. Visualising transcripts\n\n\nThe \nbandage\n visualisation tool can be downloaded from \n \n[https://github.com/rrwick/Bandage/releases]\n\nselect the version that you require and install\n\n\nThe \nTrinity.fasta\n file needs to be transferred onto your computer:\n\n\nmac\n\n\nscp -P 6022 trainingXX@lims-hpc-m.latrobe.edu.au:trinity/Trinity.fasta ~/Desktop\n\n\n\n\nwindows\n\n\ncopy the \nTrinity.fasta\n file, found in the \ntrinity\n directory onto your local computer using \nwinscp\n.\n\n\nRunning bandage\n\n\nOpen up the \nTrinity.fasta\n file with the \nfile/Load graph\n menu option.  Then  press the \nDraw graph\n button.  This may take a little time.  You can search for particular contigs with the \nFind nodes\n search option.  you can only search at the cXXX level (gene model), you can\u2019t put in the the entire contig name, so make sure you pick the \npartial\n search option.  You will need to come back to this program after the next step. \n\n\n9. Annotating transcripts\n\n\nThe best and easiest way to annotate transcript is to use \nblast\n.   We will now set up a blast job which will compare our assembled transcripts against a database of known arabidopsis proteins.  Firstly, look at the \nrun_blast\n script and then submit the script.\n\n\nsbatch run_blast\n\n\n\n\nThe output of the blast run is found in the text file call \nTrinity_blast.txt\n.\n\n\nTake some time looking over the blast output.\n\n\nThings you might look out for, and record some AT numbers:\n\n\n\n\nCorrect full length transcripts \n\n\nPartial transcripts\n\n\nAlternative splicings\n\n\nFragmented assemblies\n\n\nNo hits\n\n\nAnything else interesting\n\n\n\n\nGo back to IGV, and search with the AT number and see how the reads relate to the blast results, comparing genes of first four categories above.  You can also visualise some of these alternatively spliced trinity transcripts in bandage.  \n\nTry visualising \nAT1G02080\n and the trinity assembly that matches this protein. See example below to see how to search for this.\n\nWhat do some of the alternative transcripts represent?\n\nHow do they look in bandage and what do the reads look like in IGV?\n\n\nHave a look at \nAT1G01030\n in \nIGV\n.  How do you think the this would have assembled?\nType the following command to see the blast hits to this gene.\n\n\nmore Trinity_blast.txt\n#then within the program type the following to search\n/AT1G01030\n\n\n\n\nIf you prefer, you can transfer this \nTrinity_blast.txt\n  file onto your local computer and search it using your favorite text editor.\n\n\nAssembly Note\n: When transcriptomes are assembled, all the data from all the conditions are usually combined to get a standard reference and minimise gene fragmentation for the low coverage genes.  All reads are then mapped back onto the transcriptome for counting and differential expression analysis\n\n\n\nAside\n: Where did the blast database come from?\n\n\nhttps://www.arabidopsis.org/download/index-auto.jsp?dir=%2Fdownload_files%2FSequences%2FTAIR10_blastsets\n\nThe database was then indexed with the following blast command:\n\n\nmakeblastdb -in TAIR10_pep_20101214_updated.txt -out TAIR10_pep -title TAIR10_pep -dbtype prot\n\n\n\n10. Summary\n\n\nThis is the end of the formal part of the workshop.  This workshop has been designed to give you a greater understanding of the concepts and steps of RNA seq analysis. Things that you should have an understanding about are:\n\n1. Where does the data come from \n\n2. What is the quality of the data\n\n3. How the data is mapped to a reference \n\n4. How is the data assembled\n\n5. How are reads turned into counts\n\n6. What are the basic concepts of differential expression analysis\n\n\nThis workshop does not cover how to further analyse lists of differentially expressed genes.  The interpretation is often the hardest part of the analysis, and requires different approaches, depending on the experiment.\n\n\nRemember, the more you understand about the bioinformatics process, the more you can get out of the analysis.\n\n\n11.  Individual Project Discussions\n\n\nTwo transcriptome projects are rarely the same, in terms of design and analysis.  This final session gives you the opportunity to discuss aspects of your project, with other attendees and the workshop presenters.", 
            "title": "Transcriptomics"
        }, 
        {
            "location": "/tutorials/transcriptomics/#transcriptomics-workshop", 
            "text": "La Trobe University October 2015  Authors :  Nathan Hall   Andrew Robinson", 
            "title": "Transcriptomics Workshop"
        }, 
        {
            "location": "/tutorials/transcriptomics/#1-background", 
            "text": "This Workshop is designed to be run over one and a half days.  No prior bioinformatics or unix knowledge is required.  Intro to Sequencing - where does the data come from  The workshop will start lecture overview of where the data comes from, (Illumina technologies) and what types of transcriptomics experiments can be performed.  Your Computer  The following programs will need to be installed on your computer to complete this tutorial.  If you are waiting for something to complete, feel free to install these programs ahead of time.  Mac   Unix   IGV  [download]  bandage   [download]   Windows   putty  [download]  winscp  [download] . You will have to install onto C drive by choosing non-standard installation  IGV  [download] .  Download the binary distribution  bandage  [download]   If you are installing onto the room computers, install everything on the desktop.  Remote log in  In this topic we will learn how to connect to a  Unix  computer via a method called  SSH  and run a few basic commands.  To begin this workshop you will need to connect to an HPC.  Today we will use the LIMS-HPC.  The computer called  lims-hpc-m  (m is for master which is another name for head node) is the one that coordinates all the HPCs tasks.  Server details   host : lims-hpc-m.latrobe.edu.au  port : 6022   username : trainingXX (where XX is a two digit number, provided at workshop)  password : (provided at workshop)      Mac OS X / Linux   Both Mac OS X and Linux come with a version of ssh (called OpenSSH) that can be used from the command line.  To use OpenSSH you must \nfirst start a terminal program on your computer.  On OS X the standard terminal is called Terminal, and it is installed by default. \nOn Linux there are many popular terminal programs including: xterm, gnome-terminal, konsole (if you aren't sure, then xterm is a good \ndefault).  When you've started the terminal you should see a command prompt.  To log into LIMS-HPC, for example, type this command at \nthe prompt and press return (where the word username is replaced with your LIMS-HPC username):  ssh -p 6022 username@lims-hpc-m.latrobe.edu.au  The same procedure works for any other machine where you have an account except most other HPCs will not need the  -p 6022  \n(which is telling ssh to connect on a non-standard port number).  You may be presented with a message along the lines of:  The authenticity of host 'lims-hpc-m.latrobe.edu.au (131.172.36.150)' can't be  established.\n...\nAre you sure you want to continue connecting (yes/no)?  Although you should never ignore a warning, this particular one is nothing to be concerned about; type  yes  and then  press enter . \nIf all goes well you will be asked to enter your password.  Assuming you type the correct username and password the system should \nthen display a welcome message, and then present you with a Unix prompt.  If you get this far then you are ready to start entering \nUnix commands and thus begin using the remote computer.     (function(w,d,u){w.readyQ=[];w.bindReadyQ=[];function p(x,y){if(x==\"ready\"){w.bindReadyQ.push(y);}else{w.readyQ.push(x);}};var a={ready:p,bind:p};w.$=w.jQuery=function(f){if(f===d||f===u){return a}else{p(f)}}})(window,document)  \n    $(document).ready(function(){\n        $(\"#showablelink0\").click(function(e){\n            e.preventDefault();\n            $(\"#showable0\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Windows   On Microsoft Windows (Vista, 7, 8) we recommend that you use the PuTTY ssh client.  PuTTY (putty.exe) can be downloaded \nfrom this web page:  http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html  Documentation for using PuTTY is here:  http://www.chiark.greenend.org.uk/~sgtatham/putty/docs.html  When you start PuTTY you should see a window which looks something like this:   To connect to LIMS-HPC you should enter its hostname into the box entitled \"Host Name (or IP address)\" and  6022  in the port, \nthen click on the Open button. All of the settings should remain the same as they were when PuTTY started (which should be the \nsame as they are in the picture above).  In some circumstances you will be presented with a window entitled PuTTY Security Alert. It will say something along the lines \nof  \"The server's host key is not cached in the registry\" . This is nothing to worry about, and you should agree to continue (by \nclicking on Yes). You usually see this message the first time you try to connect to a particular remote computer.  If all goes well, a terminal window will open, showing a prompt with the text  \"login as:\" . An example terminal window is shown \nbelow. You should type your LIMS-HPC username and press enter. After entering your username you will be prompted for your \npassword. Assuming you type the correct username and password the system should then display a welcome message, and then \npresent you with a Unix prompt. If you get this far then you are ready to start entering Unix commands and thus begin using \nthe remote computer.      \n    $(document).ready(function(){\n        $(\"#showablelink1\").click(function(e){\n            e.preventDefault();\n            $(\"#showable1\").toggleClass(\"showable-hidden\");\n        });\n    });\n      Basic Unix commands:   cd  - change directory  cp  - copy files  ls  - list files in a directory  more  - look at the contents of a file,  space bar  to proceed to next page,   q  to quit.   Workshop files  The files required for the workshop have already been copied into the training accounts.  Type the following commands  ls -l   this gives you a list of the files already in your directory.  We will go through the contents of these files as we proceed through the workshop.  Test data set  This workshop is using real 100 bp single end Illumina HiSeq data for  Col-0  arabidopsis, but reads are limited to chromosome 1 of the genome to make the data files and computational time more manageable.  The data file  chr1.fastq  has over 2 million reads.  Typical read count for a basic experiment is 15-20 million reads per sample.  Fastq file format  line1: @sequence_name  \nline2: sequence string \nline3: + character \nline4: quality string  Quality encoding ordered lowest quality to highest quality:  \n  !\"#$% '()*+,-./0123456789:; = ?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~  example:  \n@HWI-1KL119:131:C4W5NACXX:2:2201:14635:56396\nGAAATCGGACGGTTTAGTGAAAATGGAGTATCAAGTTGGGTTTGGGTTCCGTCCGAACGACGAGGAGCTC\n+\nBB < 00;B;7BFFFFBFB;FFBBB;BBB;;BBFBBFBFBBFFFFFFBBBFFFFIIIIIIIFIIIIIIIIFF   You can look at the contents of the fastq file by typing  more chr1.fastq  Type  q  to exit the screen", 
            "title": "1. Background"
        }, 
        {
            "location": "/tutorials/transcriptomics/#2-data-qc", 
            "text": "The typical first step of an NGS project is to analyse the quality of the data.  The easiest way to do this is to use the  fastqc  program  The instructions to the computer are in the  run_fastqc  program that you copied earlier into your directory.  You can see the content of the  run_fastqc  file by typing  more fastqc  Type  q  to exit the screen  A command called  sbatch  tells the computer to execute the  run_fastqc  instructions. The  fastqc  program is loaded using the  module load  command and the program is executed with the last line of the script: with  fastqc filename.fastq .  Now we will submit this job to the computer.  sbatch run_fastqc   Aside : our computers run the  slurm  queueing system which uses  sbatch , a similar command  qsub  is used for the  PBS  queueing system.  \nOnce you have submitted your job with the  sbatch  command you can see if it has finished by typing the  squeue  command, which lists all the current jobs. You can choose to only see your jobs with the command:  squeue -u trainingXX  where XX is replaced with your training account number.   Alternatively you can type  ls -lrt  You will see a list of files with the most recent at the bottom of the page\nthe file that starts with slurm contains the output of your  run_fastqc  script\nYou can see the contents of the slurm file by typing  more slurm-*  Aside : the  *  character is a wildcard, so the above command will look at all files that starts with slurm.  At the moment we only have one file, but we can type in the full name to get the file of interest.  There is also the auto complete tab function.  Try typing  more slurm , then the  tab  key to get an auto complete of the slurm file.   Note : auto complete does not work if the results are ambiguous  Analysing the fastqc output:  The easiest way to analyse the output of the fastqc job is to download the  chr1_fastqc.zip  file and visualise through a web browser.    Macs  From a mac terminal window (not the lims-hpc window) paste the following command:  scp -P 6022 trainingXX@lims-hpc-m.latrobe.edu.au:chr1_fastqc.zip ~/Desktop  Note : You will need to replace XX with your training account number and enter the password when prompted.  On your desktop, double click on the  zip  file, and then go into the extracted folder and double click on the  .html  file, and it should open up in your web browser.  Windows  Install winscp and login using the settings below.  Make sure you have your correct training username\n\ufeff  You will then be able to drag the unix files (right screen) onto your local computer (left screen)\nThe file you need transfer for this fastqc analysis is  chr1_fastqc.zip  Once the file is transferred, right click on the file and select  extract .  You can then enter the extracted  chr1_fastqc  directory and open the  html  file.  Analysis  Once the html file is opened in your web browser, the things to look at are: \nQuality: \nGC content: \noverrepresented sequences - this is where adaptors can be noticed, \nyou may also want to blast any unknown overrepresented sequences.  Note : these stats are optimised for genomes, NOT transcriptomes, so some things will not conform to expectations, particularly GC content and duplication rate.  Aside : Most modern Illumina data does not need quality trimming, but sometimes adaptor and quality trimming is still required.   Trimmomatic  is one of the most commonly used trimming programs.", 
            "title": "2. Data QC"
        }, 
        {
            "location": "/tutorials/transcriptomics/#3-mapping-rnaseq-data", 
            "text": "Once we have analysed the raw reads and satisfied ourselves that the data is OK, we can then start the mapping process using the  tophat  and  bowtie  programs.  Here each read is mapped to the reference genome (using bowtie) and then a second round of mapping (tophat) incorporates splice sites.  For this mapping we can submit the job by typing  sbatch run_tophat  Have a look at the contents of this  run_tophat  script with the  more  command.    After the job has started there will be a tophat directory created. Type   cd tophat   to go into the  tophat  directory.  Type  ls -l  to see what is there and use  more  to visualise any files text that are present.  Use  cd dir_name  again to go into any subdirectories,  cd ..  to go up a directory, or just  cd  to go back to your home directory.  Follow the status of your job with the  squeue  command and look at your slurm output file as for the previous job.  When the run has finished, the most important file is  accepted_hits.bam .\nThis binary file contains all the the details of the data that maps to the genome including the mapping coordinates.  To look at the text version of this bam file we use the  samtools  program.\nFirst this program needs to be loaded using the  module load  command, and then executed as below (copy and paste this into your terminal/putty window):  cd ~/tophat\nmodule load samtools-gcc/1.2\nsamtools view accepted_hits.bam | more  Type  q  to get out of the  more  session. \nWe won\u2019t worry about all the details of the sam file at this stage as we will look at some of the more informative fields later today.  Look at the file  align_summary.txt  using the  more  command.  As we are only mapping chr1 reads this is not particularly interesting, but can be informative for full data sets as differing mapping rates across samples can alert you to library problems or other issues.", 
            "title": "3. Mapping RNAseq Data"
        }, 
        {
            "location": "/tutorials/transcriptomics/#4-visualising-mapped-data", 
            "text": "This section uses the  Interactive Genome Viewer (IGV) to look at reads that map to the genome.  Installing IGV on your computer:  Before we can visualise the data, the program needs to be installed locally.  Go to the  [IGV webpage] \nYou will need to register before you can download the application.    Windows users will need to run the program by opening  IGV  the  windows batch  file  File transfers  Once this  run_tophat  script has finished, we can copy the the important files to a local computer and visualise the mapped data interactively.  Mac:  scp -P 6022 trainingXX@lims-hpc-m.latrobe.edu.au:tophat/accepted_hits.bam* ~/Desktop  Important : this copies the bam file and the index file.  scp -P 6022 trainingXX@lims-hpc-m.latrobe.edu.au:tophat/junctions.bed ~/Desktop  Windows:  Use  winscp  to copy the following files from the  tophat  directory:  accepted_hits.bam ,  accepted_hits.bam.bai ,  junctions.bed  Visualisation  Now that  IGV  is installed and the files are transferred onto your computer, you can start IGV and read in the files. Choose the  A. Thaliana (TAIR 10)  genome from the genome menu (top LHS), then  file open  and choose the  bam  file and then the  bed  file.  You do not need to manually read in the  bai  file - this is done automatically.  IGV  shows individual reads, with splicing details shown.  Things to see, histogram, splicing, read directions, how genes, introns and exons are displayed, reads that do not match the known genes etc\u2026  Find genes that have alternative splicing, retained introns, have good coverage, bad coverage, have overlapping reads with another gene or are interesting in any other way and record the AT numbers for later in the workshop.", 
            "title": "4. Visualising mapped data"
        }, 
        {
            "location": "/tutorials/transcriptomics/#5-gene-counting", 
            "text": "Once the data has been mapped, we can count each gene using the program  htseq-count .\nThis is a conceptually simple process, where if a read unambiguously maps to a gene, then that gene has one count.    Note : alternative isoforms are ignored for most gene count experiments and counts are for all isoforms combined.  Documentation for  htseq-count  is found here:  http://www-huber.embl.de/users/anders/HTSeq/doc/count.html  First submit the slurm script  sbatch run_htseq  The final output of htseq-count a table list of genes and their counts and is called  gene_counts.txt  and can be found in the  tophat  directory.  Use the  more  command to look at this file.  Note that we are only mapping to genes on chromosome 1 so many genes have no reads.  You can sort this file in terms of gene counts by using the command:  sort -k 2 -n gene_counts.txt | more  Further Gene count analysis  Go back to IGV and look at some genes with: \n1. High counts \n2. Middle level counts \n3. Low counts  record a few AT numbers for later in the workshop  Reads not counted  When a read is mapped to more than one position in the genome, then this read is not counted by  htseq-count .  In  IGV , go to  AT1G11270  to see some reads that are not counted.  The white reads have a zero mapping quality.  Info : when you mouse over a read in IGV, it will show you mapping information. Take note of the  Cigar  string (M=match,  N=gap),  mapping quality  (50=good, low value=bad) and  NH  (number of hits, if >1 then mapping is ambiguous).  Google \u201csamtools format\u201d to see all the details   Now go to  AT1G11300  and decide on whether you believe the apparent splicing in that gene.  Visualise gene  AT1G64940 .  How many reads should be counted by  htseq-count  for these genes?\nUsing the grep command below  (grep just extracts the line of the file that matches the string, AT number in this case)  grep AT1G64930 gene_counts.txt\ngrep AT1G64940 gene_counts.txt  This will give you the counted reads for these genes  Finally type:  tail gene_counts.txt  to see the number of reads that are not counted, and the reasons why: \nno_feature    \nambiguous     \nalignment_not_unique", 
            "title": "5. Gene Counting"
        }, 
        {
            "location": "/tutorials/transcriptomics/#6-differential-gene-expression", 
            "text": "Rather that mapping six whole transcriptomes and combining the results in the workshop, we will use a file that has already been generated called  WT_MUT_counts.tsv .  This comes from a data set being worked on in the Whelan lab, where a LETM gene has been knocked out and plants are put under a drought stress environment.  Visualise this data table with the  more  command.   We can do simple, but statistically valid differential expression analysis using a web server called  degust  [http://vicbioinformatics.com/degust-training/]  You will need to copy  WT_MUT_counts.tsv  onto your computer and then upload the data into degust.  Follow these steps:  \n1. Upload your  tsv  file \n2. give the dataset a name \n3.  Info columns  is set to  seqname    \n4. enter  Min Read Count  as  10 \n5. Group replicates using the  Add condition  button \n6. Press  Save Changes  where you are done.  I will demonstrate the options of degust and help you interpret the results.   MDS plot - what is an MDS plot and how do replicates group?  MDS plot, (somewhat like principle component analysis), groups samples on 2D graph on their most variable genes.  Note: The groupings of replicates are not taken into account in this analysis.  You can change the number of genes that are used to calculate the MDS plot. This does not usually have a large effect.  Differential expression analysis  There are two other tabs which relate to differential expression analysis.   Expression - parallel coordinates , and  Expression - MA plot .  Parallel expression give you a heat map representation, and the MA plot is a measure of differential expression in combination with absolute expression.  You will need to limit the genes you are viewing.  FDR cut off  (false discovery rate) is the main filter, but you can also choose to define an  absolute log FC  filter.  A value of 1 means that you require a two fold difference in expression (see below for explanation of log2 FC).   Aside : how to define expression changes : use log2 values \nIf a fold change in expression (counts)  is 2, then log2=1 \nIf a fold change in expression is 4, then log2=2 \nIf a fold change in expression is 8, then log2=3 \nIf a fold change in expression is -2, then log2=-1 \nIf a fold change in expression is -4, then log2=-2 \nIf a fold change in expression is -8, then log2=-3 \nRatios of expressions (counts) don\u2019t work as two fold reduction is 0.5,  \n4 fold reduction is 0.25 \n8 fold reduction is 0.125  Within degust, you can also change the analysis method from  Voom/Limma  to  edgeR .  All analysis is done by the degust server.  Aside : Limma and edgeR info  Voom/Limma : Linear Models for Microarray and RNA-Seq Data \nVoom: http://genomebiology.com/2014/15/2/R29, precision weights unlock linear model analysis tools for RNA-seq read counts  edgeR : Implements a range of statistical methodology based on the negative binomial distributions, including empirical Bayes estimation, exact tests, generalized linear models and quasi-likelihood tests.  Spend some time interacting with these these pages, exploring what information can be gained from this data.  Look for patterns in the heatmaps, how may these relate to function?", 
            "title": "6. Differential Gene Expression"
        }, 
        {
            "location": "/tutorials/transcriptomics/#day-two", 
            "text": "", 
            "title": "Day two"
        }, 
        {
            "location": "/tutorials/transcriptomics/#7-transcriptome-assembly", 
            "text": "When a reference genome is not available, then assembling the reads using programs such as  trinity  is the typical route of analysis. \n  [http://trinityrnaseq.github.io/]  This workshop will take the same raw  fastq  data as was mapped to the genome and assemble it, then analyse some of the transcripts. For the sake of speed, only the first 250 thousand reads are assembled.  These correspond to approximately the first 2.5MB of chromosome 1.  The first step is to make a file with these reads using the  head  command.  We take the first million lines as there are four lines per sequence.    head -1000000 chr1.fastq  chr1_250K.fastq  Look at the  run_trinity  file and then submit the job:  sbatch run_trinity  The final output file is called  Trinity.fasta  and is in the  trinity  directory. \nThe format of the output fasta file is: c203_g1_i1  c  represents the contig number - loosely represents a gene  g  represents the fragment number of the gene  i  represents the isoform or the sequence variant number", 
            "title": "7. Transcriptome Assembly"
        }, 
        {
            "location": "/tutorials/transcriptomics/#8-visualising-transcripts", 
            "text": "The  bandage  visualisation tool can be downloaded from \n  [https://github.com/rrwick/Bandage/releases] \nselect the version that you require and install  The  Trinity.fasta  file needs to be transferred onto your computer:  mac  scp -P 6022 trainingXX@lims-hpc-m.latrobe.edu.au:trinity/Trinity.fasta ~/Desktop  windows  copy the  Trinity.fasta  file, found in the  trinity  directory onto your local computer using  winscp .  Running bandage  Open up the  Trinity.fasta  file with the  file/Load graph  menu option.  Then  press the  Draw graph  button.  This may take a little time.  You can search for particular contigs with the  Find nodes  search option.  you can only search at the cXXX level (gene model), you can\u2019t put in the the entire contig name, so make sure you pick the  partial  search option.  You will need to come back to this program after the next step.", 
            "title": "8. Visualising transcripts"
        }, 
        {
            "location": "/tutorials/transcriptomics/#9-annotating-transcripts", 
            "text": "The best and easiest way to annotate transcript is to use  blast .   We will now set up a blast job which will compare our assembled transcripts against a database of known arabidopsis proteins.  Firstly, look at the  run_blast  script and then submit the script.  sbatch run_blast  The output of the blast run is found in the text file call  Trinity_blast.txt .  Take some time looking over the blast output.  Things you might look out for, and record some AT numbers:   Correct full length transcripts   Partial transcripts  Alternative splicings  Fragmented assemblies  No hits  Anything else interesting   Go back to IGV, and search with the AT number and see how the reads relate to the blast results, comparing genes of first four categories above.  You can also visualise some of these alternatively spliced trinity transcripts in bandage.   \nTry visualising  AT1G02080  and the trinity assembly that matches this protein. See example below to see how to search for this. \nWhat do some of the alternative transcripts represent? \nHow do they look in bandage and what do the reads look like in IGV?  Have a look at  AT1G01030  in  IGV .  How do you think the this would have assembled?\nType the following command to see the blast hits to this gene.  more Trinity_blast.txt\n#then within the program type the following to search\n/AT1G01030  If you prefer, you can transfer this  Trinity_blast.txt   file onto your local computer and search it using your favorite text editor.  Assembly Note : When transcriptomes are assembled, all the data from all the conditions are usually combined to get a standard reference and minimise gene fragmentation for the low coverage genes.  All reads are then mapped back onto the transcriptome for counting and differential expression analysis  Aside : Where did the blast database come from? \n\nhttps://www.arabidopsis.org/download/index-auto.jsp?dir=%2Fdownload_files%2FSequences%2FTAIR10_blastsets \nThe database was then indexed with the following blast command:  makeblastdb -in TAIR10_pep_20101214_updated.txt -out TAIR10_pep -title TAIR10_pep -dbtype prot", 
            "title": "9. Annotating transcripts"
        }, 
        {
            "location": "/tutorials/transcriptomics/#10-summary", 
            "text": "This is the end of the formal part of the workshop.  This workshop has been designed to give you a greater understanding of the concepts and steps of RNA seq analysis. Things that you should have an understanding about are: \n1. Where does the data come from  \n2. What is the quality of the data \n3. How the data is mapped to a reference  \n4. How is the data assembled \n5. How are reads turned into counts \n6. What are the basic concepts of differential expression analysis  This workshop does not cover how to further analyse lists of differentially expressed genes.  The interpretation is often the hardest part of the analysis, and requires different approaches, depending on the experiment.  Remember, the more you understand about the bioinformatics process, the more you can get out of the analysis.", 
            "title": "10. Summary"
        }, 
        {
            "location": "/tutorials/transcriptomics/#11-individual-project-discussions", 
            "text": "Two transcriptome projects are rarely the same, in terms of design and analysis.  This final session gives you the opportunity to discuss aspects of your project, with other attendees and the workshop presenters.", 
            "title": "11.  Individual Project Discussions"
        }
    ]
}